using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace TeleTurk.Core.MTProto
{
    #region Abstract types

    public abstract class TLObject
    {
        public abstract TL.Types ConstructorCode { get; }
        public abstract void Write(TBinaryWriter writer);
        public abstract void Read(TBinaryReader reader);

        public abstract object this[string name] { get; }
        public abstract bool HasKey(string name);
    }

    public abstract class MTProtoRequest
    {
        public long MessageId { get; set; }
        public int Sequence { get; set; }
        public abstract TL.Types ConstructorCode { get; }

        public bool Dirty { get; set; }

        public bool Sent { get; private set; }
        public DateTime SendTime { get; private set; }
        public bool ConfirmReceived { get; set; }
        public abstract void OnSend(TBinaryWriter writer);
        public abstract void OnResponse(TBinaryReader reader);
        public abstract void OnException(Exception exception);
        public abstract bool Confirmed { get; }
        public abstract bool Responded { get; }

        public abstract object GetResult();

        public virtual void OnSendSuccess()
        {
            SendTime = DateTime.Now;
            Sent = true;
        }

        public virtual void OnConfirm()
        {
            ConfirmReceived = true;
        }

        public bool NeedResend => Dirty || (Confirmed && !ConfirmReceived && DateTime.Now - SendTime > TimeSpan.FromSeconds(3));
    }

    public abstract class MsgsAck : TLObject { }
    public abstract class BadMsgNotification : TLObject { }
    public abstract class MsgsStateReq : TLObject { }
    public abstract class MsgsStateInfo : TLObject { }
    public abstract class MsgsAllInfo : TLObject { }
    public abstract class MsgDetailedInfo : TLObject { }
    public abstract class MsgResendReq : TLObject { }
    public abstract class RpcError : TLObject { }
    public abstract class RpcDropAnswer : TLObject { }
    public abstract class FutureSalt : TLObject { }
    public abstract class FutureSalts : TLObject { }
    public abstract class Pong : TLObject { }
    public abstract class DestroySessionRes : TLObject { }
    public abstract class NewSession : TLObject { }
    public abstract class HttpWait : TLObject { }
    public abstract class Bool : TLObject { }
    public abstract class True : TLObject { }
    public abstract class Error : TLObject { }
    public abstract class Null : TLObject { }
    public abstract class InputPeer : TLObject { }
    public abstract class InputUser : TLObject { }
    public abstract class InputContact : TLObject { }
    public abstract class InputFile : TLObject { }
    public abstract class InputMedia : TLObject { }
    public abstract class InputChatPhoto : TLObject { }
    public abstract class InputGeoPoint : TLObject { }
    public abstract class InputPhoto : TLObject { }
    public abstract class InputFileLocation : TLObject { }
    public abstract class InputPhotoCrop : TLObject { }
    public abstract class InputAppEvent : TLObject { }
    public abstract class Peer : TLObject { }
    public abstract class StorageFileType : TLObject { }
    public abstract class FileLocation : TLObject { }
    public abstract class User : TLObject { }
    public abstract class UserProfilePhoto : TLObject { }
    public abstract class UserStatus : TLObject { }
    public abstract class Chat : TLObject { }
    public abstract class ChatFull : TLObject { }
    public abstract class ChatParticipant : TLObject { }
    public abstract class ChatParticipants : TLObject { }
    public abstract class ChatPhoto : TLObject { }
    public abstract class Message : TLObject { }
    public abstract class MessageMedia : TLObject { }
    public abstract class MessageAction : TLObject { }
    public abstract class Dialog : TLObject { }
    public abstract class Photo : TLObject { }
    public abstract class PhotoSize : TLObject { }
    public abstract class GeoPoint : TLObject { }
    public abstract class AuthCheckedPhone : TLObject { }
    public abstract class AuthSentCode : TLObject { }
    public abstract class AuthAuthorization : TLObject { }
    public abstract class AuthExportedAuthorization : TLObject { }
    public abstract class InputNotifyPeer : TLObject { }
    public abstract class InputPeerNotifyEvents : TLObject { }
    public abstract class InputPeerNotifySettings : TLObject { }
    public abstract class PeerNotifyEvents : TLObject { }
    public abstract class PeerNotifySettings : TLObject { }
    public abstract class PeerSettings : TLObject { }
    public abstract class WallPaper : TLObject { }
    public abstract class ReportReason : TLObject { }
    public abstract class UserFull : TLObject { }
    public abstract class Contact : TLObject { }
    public abstract class ImportedContact : TLObject { }
    public abstract class ContactBlocked : TLObject { }
    public abstract class ContactStatus : TLObject { }
    public abstract class ContactsLink : TLObject { }
    public abstract class ContactsContacts : TLObject { }
    public abstract class ContactsImportedContacts : TLObject { }
    public abstract class ContactsBlocked : TLObject { }
    public abstract class MessagesDialogs : TLObject { }
    public abstract class MessagesMessages : TLObject { }
    public abstract class MessagesChats : TLObject { }
    public abstract class MessagesChatFull : TLObject { }
    public abstract class MessagesAffectedHistory : TLObject { }
    public abstract class MessagesFilter : TLObject { }
    public abstract class Update : TLObject { }
    public abstract class UpdatesState : TLObject { }
    public abstract class UpdatesDifference : TLObject { }
    public abstract class Updates : TLObject { }
    public abstract class PhotosPhotos : TLObject { }
    public abstract class PhotosPhoto : TLObject { }
    public abstract class UploadFile : TLObject { }
    public abstract class DcOption : TLObject { }
    public abstract class Config : TLObject { }
    public abstract class NearestDc : TLObject { }
    public abstract class HelpAppUpdate : TLObject { }
    public abstract class HelpInviteText : TLObject { }
    public abstract class EncryptedChat : TLObject { }
    public abstract class InputEncryptedChat : TLObject { }
    public abstract class EncryptedFile : TLObject { }
    public abstract class InputEncryptedFile : TLObject { }
    public abstract class EncryptedMessage : TLObject { }
    public abstract class MessagesDhConfig : TLObject { }
    public abstract class MessagesSentEncryptedMessage : TLObject { }
    public abstract class InputDocument : TLObject { }
    public abstract class Document : TLObject { }
    public abstract class HelpSupport : TLObject { }
    public abstract class NotifyPeer : TLObject { }
    public abstract class SendMessageAction : TLObject { }
    public abstract class ContactsFound : TLObject { }
    public abstract class InputPrivacyKey : TLObject { }
    public abstract class PrivacyKey : TLObject { }
    public abstract class InputPrivacyRule : TLObject { }
    public abstract class PrivacyRule : TLObject { }
    public abstract class AccountPrivacyRules : TLObject { }
    public abstract class AccountDaysTTL : TLObject { }
    public abstract class DocumentAttribute : TLObject { }
    public abstract class MessagesStickers : TLObject { }
    public abstract class StickerPack : TLObject { }
    public abstract class MessagesAllStickers : TLObject { }
    public abstract class DisabledFeature : TLObject { }
    public abstract class MessagesAffectedMessages : TLObject { }
    public abstract class ContactLink : TLObject { }
    public abstract class WebPage : TLObject { }
    public abstract class Authorization : TLObject { }
    public abstract class AccountAuthorizations : TLObject { }
    public abstract class AccountPassword : TLObject { }
    public abstract class AccountPasswordSettings : TLObject { }
    public abstract class AccountPasswordInputSettings : TLObject { }
    public abstract class AuthPasswordRecovery : TLObject { }
    public abstract class ReceivedNotifyMessage : TLObject { }
    public abstract class ExportedChatInvite : TLObject { }
    public abstract class ChatInvite : TLObject { }
    public abstract class InputStickerSet : TLObject { }
    public abstract class StickerSet : TLObject { }
    public abstract class MessagesStickerSet : TLObject { }
    public abstract class BotCommand : TLObject { }
    public abstract class BotInfo : TLObject { }
    public abstract class KeyboardButton : TLObject { }
    public abstract class KeyboardButtonRow : TLObject { }
    public abstract class ReplyMarkup : TLObject { }
    public abstract class HelpAppChangelog : TLObject { }
    public abstract class MessageEntity : TLObject { }
    public abstract class InputChannel : TLObject { }
    public abstract class ContactsResolvedPeer : TLObject { }
    public abstract class MessageRange : TLObject { }
    public abstract class UpdatesChannelDifference : TLObject { }
    public abstract class ChannelMessagesFilter : TLObject { }
    public abstract class ChannelParticipant : TLObject { }
    public abstract class ChannelParticipantsFilter : TLObject { }
    public abstract class ChannelParticipantRole : TLObject { }
    public abstract class ChannelsChannelParticipants : TLObject { }
    public abstract class ChannelsChannelParticipant : TLObject { }
    public abstract class HelpTermsOfService : TLObject { }
    public abstract class FoundGif : TLObject { }
    public abstract class MessagesFoundGifs : TLObject { }
    public abstract class MessagesSavedGifs : TLObject { }
    public abstract class InputBotInlineMessage : TLObject { }
    public abstract class InputBotInlineResult : TLObject { }
    public abstract class BotInlineMessage : TLObject { }
    public abstract class BotInlineResult : TLObject { }
    public abstract class MessagesBotResults : TLObject { }
    public abstract class ExportedMessageLink : TLObject { }
    public abstract class MessageFwdHeader : TLObject { }
    public abstract class AuthCodeType : TLObject { }
    public abstract class AuthSentCodeType : TLObject { }
    public abstract class MessagesBotCallbackAnswer : TLObject { }
    public abstract class MessagesMessageEditData : TLObject { }
    public abstract class InputBotInlineMessageID : TLObject { }
    public abstract class InlineBotSwitchPM : TLObject { }
    public abstract class MessagesPeerDialogs : TLObject { }
    public abstract class TopPeer : TLObject { }
    public abstract class TopPeerCategory : TLObject { }
    public abstract class TopPeerCategoryPeers : TLObject { }
    public abstract class ContactsTopPeers : TLObject { }
    public abstract class DraftMessage : TLObject { }

    #endregion

    #region TBinaryReader and TBinaryWriter

    public class TBinaryReader : BinaryReader
    {
        public TBinaryReader(Stream stream) : base(stream) { }
        public TBinaryReader(Stream stream, Encoding encoding) : base(stream, encoding) { }
        public TBinaryReader(Stream stream, Encoding encoding, bool leaveOpen) : base(stream, encoding, leaveOpen) { }

        public byte[] ReadBytes()
        {
            byte firstByte = ReadByte();
            int len, padding;
            if (firstByte == 254)
            {
                len = ReadByte() | (ReadByte() << 8) | (ReadByte() << 16);
                padding = len % 4;
            }
            else
            {
                len = firstByte;
                padding = (len + 1) % 4;
            }

            byte[] data = ReadBytes(len);
            if (padding > 0)
            {
                padding = 4 - padding;
                ReadBytes(padding);
            }

            return data;
        }

        public override string ReadString()
        {
            byte[] data = ReadBytes();
            return Encoding.UTF8.GetString(data, 0, data.Length);
        }

        public override bool ReadBoolean()
        {
            return ReadUInt32() == 0x997275b5; // uint == true code ? true : false
        }

        public True ReadTrue()
        {
            // true's don't require to be read, they're only used in flags
            return new TL.TrueType();
        }

        public T Read<T>()
        {
            return (T)(object)ReadTLObject();
        }

        public TLObject ReadTLObject()
        {
            var code = ReadUInt32();
            return ReadTLObject((TL.Types)code);
        }

        public TLObject ReadTLObject(uint code)
        {
            return ReadTLObject((TL.Types)code);
        }
        public TLObject ReadTLObject(TL.Types type)
        {
            TLObject obj = (TLObject)Activator.CreateInstance(TL.Constructors[type]);
            obj.Read(this);
            return obj;
        }
    }

    public class TBinaryWriter : BinaryWriter
    {
        public TBinaryWriter() { }
        public TBinaryWriter(Stream stream) : base(stream) { }
        public TBinaryWriter(Stream stream, Encoding encoding) : base(stream, encoding) { }
        public TBinaryWriter(Stream stream, Encoding encoding, bool leaveOpen) : base(stream, encoding, leaveOpen) { }

        public override void Write(byte[] data)
        {
            int padding;
            if (data.Length < 254)
            {
                padding = (data.Length + 1) % 4;
                if (padding != 0)
                {
                    padding = 4 - padding;
                }

                base.Write((byte)data.Length);
                base.Write(data);
            }
            else
            {
                padding = (data.Length) % 4;
                if (padding != 0)
                {
                    padding = 4 - padding;
                }
                base.Write((byte)254);
                base.Write((byte)(data.Length));
                base.Write((byte)(data.Length >> 8));
                base.Write((byte)(data.Length >> 16));
                base.Write(data);
            }

            for (int i = 0; i < padding; i++)
            {
                base.Write((byte)0);
            }
        }
        public void WriteBase(byte[] data) => base.Write(data);

        public override void Write(string value)
        {
            Write(Encoding.UTF8.GetBytes(value));
        }

        public override void Write(bool value)
        {
            //            true         false
            Write(value ? 0x997275b5 : 0xbc799737);
        }

    }

    #endregion

    public class TL
    {
        #region Types enumeration

        public enum Types : uint
        {
            ResPQRequest = 0x05162463,
            PQInnerDataRequest = 0x83c95aec,
            ServerDHParamsFailRequest = 0x79cb045d,
            ServerDHParamsOkRequest = 0xd0e8075c,
            ServerDHInnerDataRequest = 0xb5890dba,
            ClientDHInnerDataRequest = 0x6643b654,
            DhGenOkRequest = 0x3bcbf734,
            DhGenRetryRequest = 0x46dc1fb9,
            DhGenFailRequest = 0xa69dae02,
            ReqPqRequest = 0x60469778,
            ReqDHParamsRequest = 0xd712e4be,
            SetClientDHParamsRequest = 0xf5045f1f,
            MsgsAckType = 0x62d6b459,
            MsgsAckRequest = 0x62d6b459,
            BadMsgNotificationType = 0xa7eff811,
            BadServerSaltType = 0xedab447b,
            MsgsStateReqType = 0xda69fb52,
            MsgsStateInfoType = 0x04deb57d,
            MsgsAllInfoType = 0x8cc0d131,
            MsgDetailedInfoType = 0x276d3ec6,
            MsgNewDetailedInfoType = 0x809db6df,
            MsgResendReqType = 0x7d861a08,
            RpcErrorType = 0x2144ca19,
            RpcAnswerUnknownType = 0x5e2ad36e,
            RpcAnswerDroppedRunningType = 0xcd78e586,
            RpcAnswerDroppedType = 0xa43ad8b7,
            FutureSaltType = 0x0949d9dc,
            FutureSaltsType = 0xae500895,
            PongType = 0x347773c5,
            DestroySessionOkType = 0xe22045fc,
            DestroySessionNoneType = 0x62d350c9,
            NewSessionCreatedType = 0x9ec20908,
            HttpWaitType = 0x9299359f,
            RpcDropAnswerRequest = 0x58e4a740,
            GetFutureSaltsRequest = 0xb921bd04,
            PingRequest = 0x7abe77ec,
            PingDelayDisconnectRequest = 0xf3427b8c,
            DestroySessionRequest = 0xe7512126,
            RegisterSaveDeveloperInfoRequest = 0x9a5f6e95,
            BoolFalseType = 0xbc799737,
            BoolTrueType = 0x997275b5,
            TrueType = 0x3fedd339,
            VectorType = 0x1cb5c415,
            ErrorType = 0xc4b9f9bb,
            NullType = 0x56730bcc,
            InputPeerEmptyType = 0x7f3b18ea,
            InputPeerSelfType = 0x7da07ec9,
            InputPeerChatType = 0x179be863,
            InputPeerUserType = 0x7b8e7de6,
            InputPeerChannelType = 0x20adaef8,
            InputUserEmptyType = 0xb98886cf,
            InputUserSelfType = 0xf7c1b13f,
            InputUserType = 0xd8292816,
            InputPhoneContactType = 0xf392b7f4,
            InputFileType = 0xf52ff27f,
            InputFileBigType = 0xfa4f0bb5,
            InputMediaEmptyType = 0x9664f57f,
            InputMediaUploadedPhotoType = 0xf7aff1c0,
            InputMediaPhotoType = 0xe9bfb4f3,
            InputMediaGeoPointType = 0xf9c44144,
            InputMediaContactType = 0xa6e45987,
            InputMediaUploadedDocumentType = 0x1d89306d,
            InputMediaUploadedThumbDocumentType = 0xad613491,
            InputMediaDocumentType = 0x1a77f29c,
            InputMediaVenueType = 0x2827a81a,
            InputMediaGifExternalType = 0x4843b0fd,
            InputChatPhotoEmptyType = 0x1ca48f57,
            InputChatUploadedPhotoType = 0x94254732,
            InputChatPhotoType = 0xb2e1bf08,
            InputGeoPointEmptyType = 0xe4c123d6,
            InputGeoPointType = 0xf3b7acc9,
            InputPhotoEmptyType = 0x1cd7bf0d,
            InputPhotoType = 0xfb95c6c4,
            InputFileLocationType = 0x14637196,
            InputEncryptedFileLocationType = 0xf5235d55,
            InputDocumentFileLocationType = 0x4e45abe9,
            InputPhotoCropAutoType = 0xade6b004,
            InputPhotoCropType = 0xd9915325,
            InputAppEventType = 0x770656a8,
            PeerUserType = 0x9db1bc6d,
            PeerChatType = 0xbad0e5bb,
            PeerChannelType = 0xbddde532,
            StorageFileUnknownType = 0xaa963b05,
            StorageFileJpegType = 0x007efe0e,
            StorageFileGifType = 0xcae1aadf,
            StorageFilePngType = 0x0a4f63c0,
            StorageFilePdfType = 0xae1e508d,
            StorageFileMp3Type = 0x528a0677,
            StorageFileMovType = 0x4b09ebbc,
            StorageFilePartialType = 0x40bc6f52,
            StorageFileMp4Type = 0xb3cea0e4,
            StorageFileWebpType = 0x1081464c,
            FileLocationUnavailableType = 0x7c596b46,
            FileLocationType = 0x53d69076,
            UserEmptyType = 0x200250ba,
            UserType = 0xd10d979a,
            UserProfilePhotoEmptyType = 0x4f11bae1,
            UserProfilePhotoType = 0xd559d8c8,
            UserStatusEmptyType = 0x09d05049,
            UserStatusOnlineType = 0xedb93949,
            UserStatusOfflineType = 0x008c703f,
            UserStatusRecentlyType = 0xe26f42f1,
            UserStatusLastWeekType = 0x07bf09fc,
            UserStatusLastMonthType = 0x77ebc742,
            ChatEmptyType = 0x9ba2d800,
            ChatType = 0xd91cdd54,
            ChatForbiddenType = 0x07328bdb,
            ChannelType = 0xa14dca52,
            ChannelForbiddenType = 0x8537784f,
            ChatFullType = 0x2e02a614,
            ChannelFullType = 0xc3d5512f,
            ChatParticipantType = 0xc8d7493e,
            ChatParticipantCreatorType = 0xda13538a,
            ChatParticipantAdminType = 0xe2d6e436,
            ChatParticipantsForbiddenType = 0xfc900c2b,
            ChatParticipantsType = 0x3f460fed,
            ChatPhotoEmptyType = 0x37c1011c,
            ChatPhotoType = 0x6153276a,
            MessageEmptyType = 0x83e5de54,
            MessageType = 0xc09be45f,
            MessageServiceType = 0x9e19a1f6,
            MessageMediaEmptyType = 0x3ded6320,
            MessageMediaPhotoType = 0x3d8ce53d,
            MessageMediaGeoType = 0x56e0d474,
            MessageMediaContactType = 0x5e7d2f39,
            MessageMediaUnsupportedType = 0x9f84f49e,
            MessageMediaDocumentType = 0xf3e02ea8,
            MessageMediaWebPageType = 0xa32dd600,
            MessageMediaVenueType = 0x7912b71f,
            MessageActionEmptyType = 0xb6aef7b0,
            MessageActionChatCreateType = 0xa6638b9a,
            MessageActionChatEditTitleType = 0xb5a1ce5a,
            MessageActionChatEditPhotoType = 0x7fcb13a8,
            MessageActionChatDeletePhotoType = 0x95e3fbef,
            MessageActionChatAddUserType = 0x488a7337,
            MessageActionChatDeleteUserType = 0xb2ae9b0c,
            MessageActionChatJoinedByLinkType = 0xf89cf5e8,
            MessageActionChannelCreateType = 0x95d2ac92,
            MessageActionChatMigrateToType = 0x51bdb021,
            MessageActionChannelMigrateFromType = 0xb055eaee,
            MessageActionPinMessageType = 0x94bd38ed,
            MessageActionHistoryClearType = 0x9fbab604,
            DialogType = 0x66ffba14,
            PhotoEmptyType = 0x2331b22d,
            PhotoType = 0xcded42fe,
            PhotoSizeEmptyType = 0x0e17e23c,
            PhotoSizeType = 0x77bfb61b,
            PhotoCachedSizeType = 0xe9a734fa,
            GeoPointEmptyType = 0x1117dd5f,
            GeoPointType = 0x2049d70c,
            AuthCheckedPhoneType = 0x811ea28e,
            AuthSentCodeType = 0x5e002502,
            AuthAuthorizationType = 0xff036af1,
            AuthExportedAuthorizationType = 0xdf969c2d,
            InputNotifyPeerType = 0xb8bc5b0c,
            InputNotifyUsersType = 0x193b4417,
            InputNotifyChatsType = 0x4a95e84e,
            InputNotifyAllType = 0xa429b886,
            InputPeerNotifyEventsEmptyType = 0xf03064d8,
            InputPeerNotifyEventsAllType = 0xe86a2c74,
            InputPeerNotifySettingsType = 0x38935eb2,
            PeerNotifyEventsEmptyType = 0xadd53cb3,
            PeerNotifyEventsAllType = 0x6d1ded88,
            PeerNotifySettingsEmptyType = 0x70a68512,
            PeerNotifySettingsType = 0x9acda4c0,
            PeerSettingsType = 0x818426cd,
            WallPaperType = 0xccb03657,
            WallPaperSolidType = 0x63117f24,
            InputReportReasonSpamType = 0x58dbcab8,
            InputReportReasonViolenceType = 0x1e22c78d,
            InputReportReasonPornographyType = 0x2e59d922,
            InputReportReasonOtherType = 0xe1746d0a,
            UserFullType = 0x5932fc03,
            ContactType = 0xf911c994,
            ImportedContactType = 0xd0028438,
            ContactBlockedType = 0x561bc879,
            ContactStatusType = 0xd3680c61,
            ContactsLinkType = 0x3ace484c,
            ContactsContactsNotModifiedType = 0xb74ba9d2,
            ContactsContactsType = 0x6f8b8cb2,
            ContactsImportedContactsType = 0xad524315,
            ContactsBlockedType = 0x1c138d15,
            ContactsBlockedSliceType = 0x900802a1,
            MessagesDialogsType = 0x15ba6c40,
            MessagesDialogsSliceType = 0x71e094f3,
            MessagesMessagesType = 0x8c718e87,
            MessagesMessagesSliceType = 0x0b446ae3,
            MessagesChannelMessagesType = 0x99262e37,
            MessagesChatsType = 0x64ff9fd5,
            MessagesChatFullType = 0xe5d7d19c,
            MessagesAffectedHistoryType = 0xb45c69d1,
            InputMessagesFilterEmptyType = 0x57e2f66c,
            InputMessagesFilterPhotosType = 0x9609a51c,
            InputMessagesFilterVideoType = 0x9fc00e65,
            InputMessagesFilterPhotoVideoType = 0x56e9f0e4,
            InputMessagesFilterPhotoVideoDocumentsType = 0xd95e73bb,
            InputMessagesFilterDocumentType = 0x9eddf188,
            InputMessagesFilterUrlType = 0x7ef0dd87,
            InputMessagesFilterGifType = 0xffc86587,
            InputMessagesFilterVoiceType = 0x50f5c392,
            InputMessagesFilterMusicType = 0x3751b49e,
            InputMessagesFilterChatPhotosType = 0x3a20ecb8,
            UpdateNewMessageType = 0x1f2b0afd,
            UpdateMessageIDType = 0x4e90bfd6,
            UpdateDeleteMessagesType = 0xa20db0e5,
            UpdateUserTypingType = 0x5c486927,
            UpdateChatUserTypingType = 0x9a65ea1f,
            UpdateChatParticipantsType = 0x07761198,
            UpdateUserStatusType = 0x1bfbd823,
            UpdateUserNameType = 0xa7332b73,
            UpdateUserPhotoType = 0x95313b0c,
            UpdateContactRegisteredType = 0x2575bbb9,
            UpdateContactLinkType = 0x9d2e67c5,
            UpdateNewAuthorizationType = 0x8f06529a,
            UpdateNewEncryptedMessageType = 0x12bcbd9a,
            UpdateEncryptedChatTypingType = 0x1710f156,
            UpdateEncryptionType = 0xb4a2e88d,
            UpdateEncryptedMessagesReadType = 0x38fe25b7,
            UpdateChatParticipantAddType = 0xea4b0e5c,
            UpdateChatParticipantDeleteType = 0x6e5f8c22,
            UpdateDcOptionsType = 0x8e5e9873,
            UpdateUserBlockedType = 0x80ece81a,
            UpdateNotifySettingsType = 0xbec268ef,
            UpdateServiceNotificationType = 0x382dd3e4,
            UpdatePrivacyType = 0xee3b272a,
            UpdateUserPhoneType = 0x12b9417b,
            UpdateReadHistoryInboxType = 0x9961fd5c,
            UpdateReadHistoryOutboxType = 0x2f2f21bf,
            UpdateWebPageType = 0x7f891213,
            UpdateReadMessagesContentsType = 0x68c13933,
            UpdateChannelTooLongType = 0xeb0467fb,
            UpdateChannelType = 0xb6d45656,
            UpdateNewChannelMessageType = 0x62ba04d9,
            UpdateReadChannelInboxType = 0x4214f37f,
            UpdateDeleteChannelMessagesType = 0xc37521c9,
            UpdateChannelMessageViewsType = 0x98a12b4b,
            UpdateChatAdminsType = 0x6e947941,
            UpdateChatParticipantAdminType = 0xb6901959,
            UpdateNewStickerSetType = 0x688a30aa,
            UpdateStickerSetsOrderType = 0xf0dfb451,
            UpdateStickerSetsType = 0x43ae3dec,
            UpdateSavedGifsType = 0x9375341e,
            UpdateBotInlineQueryType = 0x54826690,
            UpdateBotInlineSendType = 0x0e48f964,
            UpdateEditChannelMessageType = 0x1b3f4df7,
            UpdateChannelPinnedMessageType = 0x98592475,
            UpdateBotCallbackQueryType = 0xa68c688c,
            UpdateEditMessageType = 0xe40370a3,
            UpdateInlineBotCallbackQueryType = 0x2cbd95af,
            UpdateReadChannelOutboxType = 0x25d6c9c7,
            UpdateDraftMessageType = 0xee2bb969,
            UpdatesStateType = 0xa56c2a3e,
            UpdatesDifferenceEmptyType = 0x5d75a138,
            UpdatesDifferenceType = 0x00f49ca0,
            UpdatesDifferenceSliceType = 0xa8fb1981,
            UpdatesTooLongType = 0xe317af7e,
            UpdateShortMessageType = 0x914fbf11,
            UpdateShortChatMessageType = 0x16812688,
            UpdateShortType = 0x78d4dec1,
            UpdatesCombinedType = 0x725b04c3,
            UpdatesType = 0x74ae4240,
            UpdateShortSentMessageType = 0x11f1331c,
            PhotosPhotosType = 0x8dca6aa5,
            PhotosPhotosSliceType = 0x15051f54,
            PhotosPhotoType = 0x20212ca8,
            UploadFileType = 0x096a18d5,
            DcOptionType = 0x05d8c6cc,
            ConfigType = 0xc9411388,
            NearestDcType = 0x8e1a1775,
            HelpAppUpdateType = 0x8987f311,
            HelpNoAppUpdateType = 0xc45a6536,
            HelpInviteTextType = 0x18cb9f78,
            EncryptedChatEmptyType = 0xab7ec0a0,
            EncryptedChatWaitingType = 0x3bf703dc,
            EncryptedChatRequestedType = 0xc878527e,
            EncryptedChatType = 0xfa56ce36,
            EncryptedChatDiscardedType = 0x13d6dd27,
            InputEncryptedChatType = 0xf141b5e1,
            EncryptedFileEmptyType = 0xc21f497e,
            EncryptedFileType = 0x4a70994c,
            InputEncryptedFileEmptyType = 0x1837c364,
            InputEncryptedFileUploadedType = 0x64bd0306,
            InputEncryptedFileType = 0x5a17b5e5,
            InputEncryptedFileBigUploadedType = 0x2dc173c8,
            EncryptedMessageType = 0xed18c118,
            EncryptedMessageServiceType = 0x23734b06,
            MessagesDhConfigNotModifiedType = 0xc0e24635,
            MessagesDhConfigType = 0x2c221edd,
            MessagesSentEncryptedMessageType = 0x560f8935,
            MessagesSentEncryptedFileType = 0x9493ff32,
            InputDocumentEmptyType = 0x72f0eaae,
            InputDocumentType = 0x18798952,
            DocumentEmptyType = 0x36f8c871,
            DocumentType = 0xf9a39f4f,
            HelpSupportType = 0x17c6b5f6,
            NotifyPeerType = 0x9fd40bd8,
            NotifyUsersType = 0xb4c83b4c,
            NotifyChatsType = 0xc007cec3,
            NotifyAllType = 0x74d07c60,
            SendMessageTypingActionType = 0x16bf744e,
            SendMessageCancelActionType = 0xfd5ec8f5,
            SendMessageRecordVideoActionType = 0xa187d66f,
            SendMessageUploadVideoActionType = 0xe9763aec,
            SendMessageRecordAudioActionType = 0xd52f73f7,
            SendMessageUploadAudioActionType = 0xf351d7ab,
            SendMessageUploadPhotoActionType = 0xd1d34a26,
            SendMessageUploadDocumentActionType = 0xaa0cd9e4,
            SendMessageGeoLocationActionType = 0x176f8ba1,
            SendMessageChooseContactActionType = 0x628cbc6f,
            ContactsFoundType = 0x1aa1f784,
            InputPrivacyKeyStatusTimestampType = 0x4f96cb18,
            InputPrivacyKeyChatInviteType = 0xbdfb0426,
            PrivacyKeyStatusTimestampType = 0xbc2eab30,
            PrivacyKeyChatInviteType = 0x500e6dfa,
            InputPrivacyValueAllowContactsType = 0x0d09e07b,
            InputPrivacyValueAllowAllType = 0x184b35ce,
            InputPrivacyValueAllowUsersType = 0x131cc67f,
            InputPrivacyValueDisallowContactsType = 0x0ba52007,
            InputPrivacyValueDisallowAllType = 0xd66b66c9,
            InputPrivacyValueDisallowUsersType = 0x90110467,
            PrivacyValueAllowContactsType = 0xfffe1bac,
            PrivacyValueAllowAllType = 0x65427b82,
            PrivacyValueAllowUsersType = 0x4d5bbe0c,
            PrivacyValueDisallowContactsType = 0xf888fa1a,
            PrivacyValueDisallowAllType = 0x8b73e763,
            PrivacyValueDisallowUsersType = 0x0c7f49b7,
            AccountPrivacyRulesType = 0x554abb6f,
            AccountDaysTTLType = 0xb8d0afdf,
            DocumentAttributeImageSizeType = 0x6c37c15c,
            DocumentAttributeAnimatedType = 0x11b58939,
            DocumentAttributeStickerType = 0x3a556302,
            DocumentAttributeVideoType = 0x5910cccb,
            DocumentAttributeAudioType = 0x9852f9c6,
            DocumentAttributeFilenameType = 0x15590068,
            MessagesStickersNotModifiedType = 0xf1749a22,
            MessagesStickersType = 0x8a8ecd32,
            StickerPackType = 0x12b299d4,
            MessagesAllStickersNotModifiedType = 0xe86602c3,
            MessagesAllStickersType = 0xedfd405f,
            DisabledFeatureType = 0xae636f24,
            MessagesAffectedMessagesType = 0x84d19185,
            ContactLinkUnknownType = 0x5f4f9247,
            ContactLinkNoneType = 0xfeedd3ad,
            ContactLinkHasPhoneType = 0x268f3f59,
            ContactLinkContactType = 0xd502c2d0,
            WebPageEmptyType = 0xeb1477e8,
            WebPagePendingType = 0xc586da1c,
            WebPageType = 0xca820ed7,
            AuthorizationType = 0x7bf2e6f6,
            AccountAuthorizationsType = 0x1250abde,
            AccountNoPasswordType = 0x96dabc18,
            AccountPasswordType = 0x7c18141c,
            AccountPasswordSettingsType = 0xb7b72ab3,
            AccountPasswordInputSettingsType = 0x86916deb,
            AuthPasswordRecoveryType = 0x137948a5,
            ReceivedNotifyMessageType = 0xa384b779,
            ChatInviteEmptyType = 0x69df3769,
            ChatInviteExportedType = 0xfc2e05bc,
            ChatInviteAlreadyType = 0x5a686d7c,
            ChatInviteType = 0x93e99b60,
            InputStickerSetEmptyType = 0xffb62b95,
            InputStickerSetIDType = 0x9de7a269,
            InputStickerSetShortNameType = 0x861cc8a0,
            StickerSetType = 0xcd303b41,
            MessagesStickerSetType = 0xb60a24a6,
            BotCommandType = 0xc27ac8c7,
            BotInfoType = 0x98e81d3a,
            KeyboardButtonType = 0xa2fa4880,
            KeyboardButtonUrlType = 0x258aff05,
            KeyboardButtonCallbackType = 0x683a5e46,
            KeyboardButtonRequestPhoneType = 0xb16a6c29,
            KeyboardButtonRequestGeoLocationType = 0xfc796b3f,
            KeyboardButtonSwitchInlineType = 0xea1b7a14,
            KeyboardButtonRowType = 0x77608b83,
            ReplyKeyboardHideType = 0xa03e5b85,
            ReplyKeyboardForceReplyType = 0xf4108aa0,
            ReplyKeyboardMarkupType = 0x3502758c,
            ReplyInlineMarkupType = 0x48a30254,
            HelpAppChangelogEmptyType = 0xaf7e0394,
            HelpAppChangelogType = 0x4668e6bd,
            MessageEntityUnknownType = 0xbb92ba95,
            MessageEntityMentionType = 0xfa04579d,
            MessageEntityHashtagType = 0x6f635b0d,
            MessageEntityBotCommandType = 0x6cef8ac7,
            MessageEntityUrlType = 0x6ed02538,
            MessageEntityEmailType = 0x64e475c2,
            MessageEntityBoldType = 0xbd610bc9,
            MessageEntityItalicType = 0x826f8b60,
            MessageEntityCodeType = 0x28a20571,
            MessageEntityPreType = 0x73924be0,
            MessageEntityTextUrlType = 0x76a6d327,
            MessageEntityMentionNameType = 0x352dca58,
            InputMessageEntityMentionNameType = 0x208e68c9,
            InputChannelEmptyType = 0xee8c1e86,
            InputChannelType = 0xafeb712e,
            ContactsResolvedPeerType = 0x7f077ad9,
            MessageRangeType = 0x0ae30253,
            UpdatesChannelDifferenceEmptyType = 0x3e11affb,
            UpdatesChannelDifferenceTooLongType = 0x410dee07,
            UpdatesChannelDifferenceType = 0x2064674e,
            ChannelMessagesFilterEmptyType = 0x94d42ee7,
            ChannelMessagesFilterType = 0xcd77d957,
            ChannelParticipantType = 0x15ebac1d,
            ChannelParticipantSelfType = 0xa3289a6d,
            ChannelParticipantModeratorType = 0x91057fef,
            ChannelParticipantEditorType = 0x98192d61,
            ChannelParticipantKickedType = 0x8cc5e69a,
            ChannelParticipantCreatorType = 0xe3e2e1f9,
            ChannelParticipantsRecentType = 0xde3f3c79,
            ChannelParticipantsAdminsType = 0xb4608969,
            ChannelParticipantsKickedType = 0x3c37bb7a,
            ChannelParticipantsBotsType = 0xb0d1865b,
            ChannelRoleEmptyType = 0xb285a0c6,
            ChannelRoleModeratorType = 0x9618d975,
            ChannelRoleEditorType = 0x820bfe8c,
            ChannelsChannelParticipantsType = 0xf56ee2a8,
            ChannelsChannelParticipantType = 0xd0d9b163,
            HelpTermsOfServiceType = 0xf1ee3e90,
            FoundGifType = 0x162ecc1f,
            FoundGifCachedType = 0x9c750409,
            MessagesFoundGifsType = 0x450a1c0a,
            MessagesSavedGifsNotModifiedType = 0xe8025ca2,
            MessagesSavedGifsType = 0x2e0709a5,
            InputBotInlineMessageMediaAutoType = 0x292fed13,
            InputBotInlineMessageTextType = 0x3dcd7a87,
            InputBotInlineMessageMediaGeoType = 0xf4a59de1,
            InputBotInlineMessageMediaVenueType = 0xaaafadc8,
            InputBotInlineMessageMediaContactType = 0x2daf01a7,
            InputBotInlineResultType = 0x2cbbe15a,
            InputBotInlineResultPhotoType = 0xa8d864a7,
            InputBotInlineResultDocumentType = 0xfff8fdc4,
            BotInlineMessageMediaAutoType = 0x0a74b15b,
            BotInlineMessageTextType = 0x8c7f65e2,
            BotInlineMessageMediaGeoType = 0x3a8fd8b8,
            BotInlineMessageMediaVenueType = 0x4366232e,
            BotInlineMessageMediaContactType = 0x35edb4d4,
            BotInlineResultType = 0x9bebaeb9,
            BotInlineMediaResultType = 0x17db940b,
            MessagesBotResultsType = 0x256709a6,
            ExportedMessageLinkType = 0x1f486803,
            MessageFwdHeaderType = 0xc786ddcb,
            AuthCodeTypeSmsType = 0x72a3158c,
            AuthCodeTypeCallType = 0x741cd3e3,
            AuthCodeTypeFlashCallType = 0x226ccefb,
            AuthSentCodeTypeAppType = 0x3dbb5986,
            AuthSentCodeTypeSmsType = 0xc000bba2,
            AuthSentCodeTypeCallType = 0x5353e5a7,
            AuthSentCodeTypeFlashCallType = 0xab03c6d9,
            MessagesBotCallbackAnswerType = 0x1264f1c6,
            MessagesMessageEditDataType = 0x26b5dde6,
            InputBotInlineMessageIDType = 0x890c3d89,
            InlineBotSwitchPMType = 0x3c20629f,
            MessagesPeerDialogsType = 0x3371c354,
            TopPeerType = 0xedcdc05b,
            TopPeerCategoryBotsPMType = 0xab661b5b,
            TopPeerCategoryBotsInlineType = 0x148677e2,
            TopPeerCategoryCorrespondentsType = 0x0637b7ed,
            TopPeerCategoryGroupsType = 0xbd17a14a,
            TopPeerCategoryChannelsType = 0x161d9628,
            TopPeerCategoryPeersType = 0xfb834291,
            ContactsTopPeersNotModifiedType = 0xde266ef5,
            ContactsTopPeersType = 0x70b772a8,
            DraftMessageEmptyType = 0xba4baec5,
            DraftMessageType = 0xfd8e711f,
            InvokeAfterMsgRequest = 0xcb9f372d,
            InvokeAfterMsgsRequest = 0x3dc4b4f0,
            InitConnectionRequest = 0x69796de9,
            InvokeWithLayerRequest = 0xda9b0d0d,
            InvokeWithoutUpdatesRequest = 0xbf9459b7,
            AuthCheckPhoneRequest = 0x6fe51dfb,
            AuthSendCodeRequest = 0x86aef0ec,
            AuthSignUpRequest = 0x1b067634,
            AuthSignInRequest = 0xbcd51581,
            AuthLogOutRequest = 0x5717da40,
            AuthResetAuthorizationsRequest = 0x9fab0d1a,
            AuthSendInvitesRequest = 0x771c1d97,
            AuthExportAuthorizationRequest = 0xe5bfffcd,
            AuthImportAuthorizationRequest = 0xe3ef9613,
            AuthBindTempAuthKeyRequest = 0xcdd42a05,
            AuthImportBotAuthorizationRequest = 0x67a3ff2c,
            AuthCheckPasswordRequest = 0x0a63011e,
            AuthRequestPasswordRecoveryRequest = 0xd897bc66,
            AuthRecoverPasswordRequest = 0x4ea56e92,
            AuthResendCodeRequest = 0x3ef1a9bf,
            AuthCancelCodeRequest = 0x1f040578,
            AccountRegisterDeviceRequest = 0x637ea878,
            AccountUnregisterDeviceRequest = 0x65c55b40,
            AccountUpdateNotifySettingsRequest = 0x84be5b93,
            AccountGetNotifySettingsRequest = 0x12b3ad31,
            AccountResetNotifySettingsRequest = 0xdb7e1747,
            AccountUpdateProfileRequest = 0x78515775,
            AccountUpdateStatusRequest = 0x6628562c,
            AccountGetWallPapersRequest = 0xc04cfac2,
            AccountReportPeerRequest = 0xae189d5f,
            AccountCheckUsernameRequest = 0x2714d86c,
            AccountUpdateUsernameRequest = 0x3e0bdd7c,
            AccountGetPrivacyRequest = 0xdadbc950,
            AccountSetPrivacyRequest = 0xc9f81ce8,
            AccountDeleteAccountRequest = 0x418d4e0b,
            AccountGetAccountTTLRequest = 0x08fc711d,
            AccountSetAccountTTLRequest = 0x2442485e,
            AccountSendChangePhoneCodeRequest = 0x08e57deb,
            AccountChangePhoneRequest = 0x70c32edb,
            AccountUpdateDeviceLockedRequest = 0x38df3532,
            AccountGetAuthorizationsRequest = 0xe320c158,
            AccountResetAuthorizationRequest = 0xdf77f3bc,
            AccountGetPasswordRequest = 0x548a30f5,
            AccountGetPasswordSettingsRequest = 0xbc8d11bb,
            AccountUpdatePasswordSettingsRequest = 0xfa7c4b86,
            UsersGetUsersRequest = 0x0d91a548,
            UsersGetFullUserRequest = 0xca30a5b1,
            ContactsGetStatusesRequest = 0xc4a353ee,
            ContactsGetContactsRequest = 0x22c6aa08,
            ContactsImportContactsRequest = 0xda30b32d,
            ContactsDeleteContactRequest = 0x8e953744,
            ContactsDeleteContactsRequest = 0x59ab389e,
            ContactsBlockRequest = 0x332b49fc,
            ContactsUnblockRequest = 0xe54100bd,
            ContactsGetBlockedRequest = 0xf57c350f,
            ContactsExportCardRequest = 0x84e53737,
            ContactsImportCardRequest = 0x4fe196fe,
            ContactsSearchRequest = 0x11f812d8,
            ContactsResolveUsernameRequest = 0xf93ccba3,
            ContactsGetTopPeersRequest = 0xd4982db5,
            ContactsResetTopPeerRatingRequest = 0x1ae373ac,
            MessagesGetMessagesRequest = 0x4222fa74,
            MessagesGetDialogsRequest = 0x6b47f94d,
            MessagesGetHistoryRequest = 0xafa92846,
            MessagesSearchRequest = 0xd4569248,
            MessagesReadHistoryRequest = 0x0e306d3a,
            MessagesDeleteHistoryRequest = 0x1c015b09,
            MessagesDeleteMessagesRequest = 0xa5f18925,
            MessagesReceivedMessagesRequest = 0x05a954c0,
            MessagesSetTypingRequest = 0xa3825e50,
            MessagesSendMessageRequest = 0xfa88427a,
            MessagesSendMediaRequest = 0xc8f16791,
            MessagesForwardMessagesRequest = 0x708e0195,
            MessagesReportSpamRequest = 0xcf1592db,
            MessagesHideReportSpamRequest = 0xa8f1709b,
            MessagesGetPeerSettingsRequest = 0x3672e09c,
            MessagesGetChatsRequest = 0x3c6aa187,
            MessagesGetFullChatRequest = 0x3b831c66,
            MessagesEditChatTitleRequest = 0xdc452855,
            MessagesEditChatPhotoRequest = 0xca4c79d8,
            MessagesAddChatUserRequest = 0xf9a0aa09,
            MessagesDeleteChatUserRequest = 0xe0611f16,
            MessagesCreateChatRequest = 0x09cb126e,
            MessagesForwardMessageRequest = 0x33963bf9,
            MessagesSendBroadcastRequest = 0xbf73f4da,
            MessagesGetDhConfigRequest = 0x26cf8950,
            MessagesRequestEncryptionRequest = 0xf64daf43,
            MessagesAcceptEncryptionRequest = 0x3dbc0415,
            MessagesDiscardEncryptionRequest = 0xedd923c5,
            MessagesSetEncryptedTypingRequest = 0x791451ed,
            MessagesReadEncryptedHistoryRequest = 0x7f4b690a,
            MessagesSendEncryptedRequest = 0xa9776773,
            MessagesSendEncryptedFileRequest = 0x9a901b66,
            MessagesSendEncryptedServiceRequest = 0x32d439a4,
            MessagesReceivedQueueRequest = 0x55a5bb66,
            MessagesReadMessageContentsRequest = 0x36a73f77,
            MessagesGetStickersRequest = 0xae22e045,
            MessagesGetAllStickersRequest = 0x1c9618b1,
            MessagesGetWebPagePreviewRequest = 0x25223e24,
            MessagesExportChatInviteRequest = 0x7d885289,
            MessagesCheckChatInviteRequest = 0x3eadb1bb,
            MessagesImportChatInviteRequest = 0x6c50051c,
            MessagesGetStickerSetRequest = 0x2619a90e,
            MessagesInstallStickerSetRequest = 0x7b30c3a6,
            MessagesUninstallStickerSetRequest = 0xf96e55de,
            MessagesStartBotRequest = 0xe6df7378,
            MessagesGetMessagesViewsRequest = 0xc4c8a55d,
            MessagesToggleChatAdminsRequest = 0xec8bd9e1,
            MessagesEditChatAdminRequest = 0xa9e69f2e,
            MessagesMigrateChatRequest = 0x15a3b8e3,
            MessagesSearchGlobalRequest = 0x9e3cacb0,
            MessagesReorderStickerSetsRequest = 0x9fcfbc30,
            MessagesGetDocumentByHashRequest = 0x338e2464,
            MessagesSearchGifsRequest = 0xbf9a776b,
            MessagesGetSavedGifsRequest = 0x83bf3d52,
            MessagesSaveGifRequest = 0x327a30cb,
            MessagesGetInlineBotResultsRequest = 0x514e999d,
            MessagesSetInlineBotResultsRequest = 0xeb5ea206,
            MessagesSendInlineBotResultRequest = 0xb16e06fe,
            MessagesGetMessageEditDataRequest = 0xfda68d36,
            MessagesEditMessageRequest = 0xce91e4ca,
            MessagesEditInlineBotMessageRequest = 0x130c2c85,
            MessagesGetBotCallbackAnswerRequest = 0xa6e94f04,
            MessagesSetBotCallbackAnswerRequest = 0x481c591a,
            MessagesGetPeerDialogsRequest = 0x2d9776b9,
            MessagesSaveDraftRequest = 0xbc39e14b,
            MessagesGetAllDraftsRequest = 0x6a3f8d65,
            UpdatesGetStateRequest = 0xedd4882a,
            UpdatesGetDifferenceRequest = 0x0a041495,
            UpdatesGetChannelDifferenceRequest = 0xbb32d7c0,
            PhotosUpdateProfilePhotoRequest = 0xeef579a0,
            PhotosUploadProfilePhotoRequest = 0xd50f9c88,
            PhotosDeletePhotosRequest = 0x87cf7f2f,
            PhotosGetUserPhotosRequest = 0x91cd32a8,
            UploadSaveFilePartRequest = 0xb304a621,
            UploadGetFileRequest = 0xe3a6cfb5,
            UploadSaveBigFilePartRequest = 0xde7b673d,
            HelpGetConfigRequest = 0xc4f9186b,
            HelpGetNearestDcRequest = 0x1fb33026,
            HelpGetAppUpdateRequest = 0xae2de196,
            HelpSaveAppLogRequest = 0x6f02f748,
            HelpGetInviteTextRequest = 0x4d392343,
            HelpGetSupportRequest = 0x9cdf08cd,
            HelpGetAppChangelogRequest = 0xb921197a,
            HelpGetTermsOfServiceRequest = 0x350170f3,
            ChannelsReadHistoryRequest = 0xcc104937,
            ChannelsDeleteMessagesRequest = 0x84c1fd4e,
            ChannelsDeleteUserHistoryRequest = 0xd10dd71b,
            ChannelsReportSpamRequest = 0xfe087810,
            ChannelsGetMessagesRequest = 0x93d7b347,
            ChannelsGetParticipantsRequest = 0x24d98f92,
            ChannelsGetParticipantRequest = 0x546dd7a6,
            ChannelsGetChannelsRequest = 0x0a7f6bbb,
            ChannelsGetFullChannelRequest = 0x08736a09,
            ChannelsCreateChannelRequest = 0xf4893d7f,
            ChannelsEditAboutRequest = 0x13e27f1e,
            ChannelsEditAdminRequest = 0xeb7611d0,
            ChannelsEditTitleRequest = 0x566decd0,
            ChannelsEditPhotoRequest = 0xf12e57c9,
            ChannelsCheckUsernameRequest = 0x10e6bd2c,
            ChannelsUpdateUsernameRequest = 0x3514b3de,
            ChannelsJoinChannelRequest = 0x24b524c5,
            ChannelsLeaveChannelRequest = 0xf836aa95,
            ChannelsInviteToChannelRequest = 0x199f3a6c,
            ChannelsKickFromChannelRequest = 0xa672de14,
            ChannelsExportInviteRequest = 0xc7560885,
            ChannelsDeleteChannelRequest = 0xc0111fe3,
            ChannelsToggleInvitesRequest = 0x49609307,
            ChannelsExportMessageLinkRequest = 0xc846d22d,
            ChannelsToggleSignaturesRequest = 0x1f69b606,
            ChannelsUpdatePinnedMessageRequest = 0xa72ded52
        }

        #endregion

        #region Constructors dictionary

        public static readonly Dictionary<Types, Type> Constructors = new Dictionary<Types, Type>()
        {
            { Types.MsgsAckType, typeof(MsgsAckType) },
            { Types.BadMsgNotificationType, typeof(BadMsgNotificationType) },
            { Types.BadServerSaltType, typeof(BadServerSaltType) },
            { Types.MsgsStateReqType, typeof(MsgsStateReqType) },
            { Types.MsgsStateInfoType, typeof(MsgsStateInfoType) },
            { Types.MsgsAllInfoType, typeof(MsgsAllInfoType) },
            { Types.MsgDetailedInfoType, typeof(MsgDetailedInfoType) },
            { Types.MsgNewDetailedInfoType, typeof(MsgNewDetailedInfoType) },
            { Types.MsgResendReqType, typeof(MsgResendReqType) },
            { Types.RpcErrorType, typeof(RpcErrorType) },
            { Types.RpcAnswerUnknownType, typeof(RpcAnswerUnknownType) },
            { Types.RpcAnswerDroppedRunningType, typeof(RpcAnswerDroppedRunningType) },
            { Types.RpcAnswerDroppedType, typeof(RpcAnswerDroppedType) },
            { Types.FutureSaltType, typeof(FutureSaltType) },
            { Types.FutureSaltsType, typeof(FutureSaltsType) },
            { Types.PongType, typeof(PongType) },
            { Types.DestroySessionOkType, typeof(DestroySessionOkType) },
            { Types.DestroySessionNoneType, typeof(DestroySessionNoneType) },
            { Types.NewSessionCreatedType, typeof(NewSessionCreatedType) },
            { Types.HttpWaitType, typeof(HttpWaitType) },
            { Types.BoolFalseType, typeof(BoolFalseType) },
            { Types.BoolTrueType, typeof(BoolTrueType) },
            { Types.TrueType, typeof(TrueType) },
            { Types.ErrorType, typeof(ErrorType) },
            { Types.NullType, typeof(NullType) },
            { Types.InputPeerEmptyType, typeof(InputPeerEmptyType) },
            { Types.InputPeerSelfType, typeof(InputPeerSelfType) },
            { Types.InputPeerChatType, typeof(InputPeerChatType) },
            { Types.InputPeerUserType, typeof(InputPeerUserType) },
            { Types.InputPeerChannelType, typeof(InputPeerChannelType) },
            { Types.InputUserEmptyType, typeof(InputUserEmptyType) },
            { Types.InputUserSelfType, typeof(InputUserSelfType) },
            { Types.InputUserType, typeof(InputUserType) },
            { Types.InputPhoneContactType, typeof(InputPhoneContactType) },
            { Types.InputFileType, typeof(InputFileType) },
            { Types.InputFileBigType, typeof(InputFileBigType) },
            { Types.InputMediaEmptyType, typeof(InputMediaEmptyType) },
            { Types.InputMediaUploadedPhotoType, typeof(InputMediaUploadedPhotoType) },
            { Types.InputMediaPhotoType, typeof(InputMediaPhotoType) },
            { Types.InputMediaGeoPointType, typeof(InputMediaGeoPointType) },
            { Types.InputMediaContactType, typeof(InputMediaContactType) },
            { Types.InputMediaUploadedDocumentType, typeof(InputMediaUploadedDocumentType) },
            { Types.InputMediaUploadedThumbDocumentType, typeof(InputMediaUploadedThumbDocumentType) },
            { Types.InputMediaDocumentType, typeof(InputMediaDocumentType) },
            { Types.InputMediaVenueType, typeof(InputMediaVenueType) },
            { Types.InputMediaGifExternalType, typeof(InputMediaGifExternalType) },
            { Types.InputChatPhotoEmptyType, typeof(InputChatPhotoEmptyType) },
            { Types.InputChatUploadedPhotoType, typeof(InputChatUploadedPhotoType) },
            { Types.InputChatPhotoType, typeof(InputChatPhotoType) },
            { Types.InputGeoPointEmptyType, typeof(InputGeoPointEmptyType) },
            { Types.InputGeoPointType, typeof(InputGeoPointType) },
            { Types.InputPhotoEmptyType, typeof(InputPhotoEmptyType) },
            { Types.InputPhotoType, typeof(InputPhotoType) },
            { Types.InputFileLocationType, typeof(InputFileLocationType) },
            { Types.InputEncryptedFileLocationType, typeof(InputEncryptedFileLocationType) },
            { Types.InputDocumentFileLocationType, typeof(InputDocumentFileLocationType) },
            { Types.InputPhotoCropAutoType, typeof(InputPhotoCropAutoType) },
            { Types.InputPhotoCropType, typeof(InputPhotoCropType) },
            { Types.InputAppEventType, typeof(InputAppEventType) },
            { Types.PeerUserType, typeof(PeerUserType) },
            { Types.PeerChatType, typeof(PeerChatType) },
            { Types.PeerChannelType, typeof(PeerChannelType) },
            { Types.StorageFileUnknownType, typeof(StorageFileUnknownType) },
            { Types.StorageFileJpegType, typeof(StorageFileJpegType) },
            { Types.StorageFileGifType, typeof(StorageFileGifType) },
            { Types.StorageFilePngType, typeof(StorageFilePngType) },
            { Types.StorageFilePdfType, typeof(StorageFilePdfType) },
            { Types.StorageFileMp3Type, typeof(StorageFileMp3Type) },
            { Types.StorageFileMovType, typeof(StorageFileMovType) },
            { Types.StorageFilePartialType, typeof(StorageFilePartialType) },
            { Types.StorageFileMp4Type, typeof(StorageFileMp4Type) },
            { Types.StorageFileWebpType, typeof(StorageFileWebpType) },
            { Types.FileLocationUnavailableType, typeof(FileLocationUnavailableType) },
            { Types.FileLocationType, typeof(FileLocationType) },
            { Types.UserEmptyType, typeof(UserEmptyType) },
            { Types.UserType, typeof(UserType) },
            { Types.UserProfilePhotoEmptyType, typeof(UserProfilePhotoEmptyType) },
            { Types.UserProfilePhotoType, typeof(UserProfilePhotoType) },
            { Types.UserStatusEmptyType, typeof(UserStatusEmptyType) },
            { Types.UserStatusOnlineType, typeof(UserStatusOnlineType) },
            { Types.UserStatusOfflineType, typeof(UserStatusOfflineType) },
            { Types.UserStatusRecentlyType, typeof(UserStatusRecentlyType) },
            { Types.UserStatusLastWeekType, typeof(UserStatusLastWeekType) },
            { Types.UserStatusLastMonthType, typeof(UserStatusLastMonthType) },
            { Types.ChatEmptyType, typeof(ChatEmptyType) },
            { Types.ChatType, typeof(ChatType) },
            { Types.ChatForbiddenType, typeof(ChatForbiddenType) },
            { Types.ChannelType, typeof(ChannelType) },
            { Types.ChannelForbiddenType, typeof(ChannelForbiddenType) },
            { Types.ChatFullType, typeof(ChatFullType) },
            { Types.ChannelFullType, typeof(ChannelFullType) },
            { Types.ChatParticipantType, typeof(ChatParticipantType) },
            { Types.ChatParticipantCreatorType, typeof(ChatParticipantCreatorType) },
            { Types.ChatParticipantAdminType, typeof(ChatParticipantAdminType) },
            { Types.ChatParticipantsForbiddenType, typeof(ChatParticipantsForbiddenType) },
            { Types.ChatParticipantsType, typeof(ChatParticipantsType) },
            { Types.ChatPhotoEmptyType, typeof(ChatPhotoEmptyType) },
            { Types.ChatPhotoType, typeof(ChatPhotoType) },
            { Types.MessageEmptyType, typeof(MessageEmptyType) },
            { Types.MessageType, typeof(MessageType) },
            { Types.MessageServiceType, typeof(MessageServiceType) },
            { Types.MessageMediaEmptyType, typeof(MessageMediaEmptyType) },
            { Types.MessageMediaPhotoType, typeof(MessageMediaPhotoType) },
            { Types.MessageMediaGeoType, typeof(MessageMediaGeoType) },
            { Types.MessageMediaContactType, typeof(MessageMediaContactType) },
            { Types.MessageMediaUnsupportedType, typeof(MessageMediaUnsupportedType) },
            { Types.MessageMediaDocumentType, typeof(MessageMediaDocumentType) },
            { Types.MessageMediaWebPageType, typeof(MessageMediaWebPageType) },
            { Types.MessageMediaVenueType, typeof(MessageMediaVenueType) },
            { Types.MessageActionEmptyType, typeof(MessageActionEmptyType) },
            { Types.MessageActionChatCreateType, typeof(MessageActionChatCreateType) },
            { Types.MessageActionChatEditTitleType, typeof(MessageActionChatEditTitleType) },
            { Types.MessageActionChatEditPhotoType, typeof(MessageActionChatEditPhotoType) },
            { Types.MessageActionChatDeletePhotoType, typeof(MessageActionChatDeletePhotoType) },
            { Types.MessageActionChatAddUserType, typeof(MessageActionChatAddUserType) },
            { Types.MessageActionChatDeleteUserType, typeof(MessageActionChatDeleteUserType) },
            { Types.MessageActionChatJoinedByLinkType, typeof(MessageActionChatJoinedByLinkType) },
            { Types.MessageActionChannelCreateType, typeof(MessageActionChannelCreateType) },
            { Types.MessageActionChatMigrateToType, typeof(MessageActionChatMigrateToType) },
            { Types.MessageActionChannelMigrateFromType, typeof(MessageActionChannelMigrateFromType) },
            { Types.MessageActionPinMessageType, typeof(MessageActionPinMessageType) },
            { Types.MessageActionHistoryClearType, typeof(MessageActionHistoryClearType) },
            { Types.DialogType, typeof(DialogType) },
            { Types.PhotoEmptyType, typeof(PhotoEmptyType) },
            { Types.PhotoType, typeof(PhotoType) },
            { Types.PhotoSizeEmptyType, typeof(PhotoSizeEmptyType) },
            { Types.PhotoSizeType, typeof(PhotoSizeType) },
            { Types.PhotoCachedSizeType, typeof(PhotoCachedSizeType) },
            { Types.GeoPointEmptyType, typeof(GeoPointEmptyType) },
            { Types.GeoPointType, typeof(GeoPointType) },
            { Types.AuthCheckedPhoneType, typeof(AuthCheckedPhoneType) },
            { Types.AuthSentCodeType, typeof(AuthSentCodeType) },
            { Types.AuthAuthorizationType, typeof(AuthAuthorizationType) },
            { Types.AuthExportedAuthorizationType, typeof(AuthExportedAuthorizationType) },
            { Types.InputNotifyPeerType, typeof(InputNotifyPeerType) },
            { Types.InputNotifyUsersType, typeof(InputNotifyUsersType) },
            { Types.InputNotifyChatsType, typeof(InputNotifyChatsType) },
            { Types.InputNotifyAllType, typeof(InputNotifyAllType) },
            { Types.InputPeerNotifyEventsEmptyType, typeof(InputPeerNotifyEventsEmptyType) },
            { Types.InputPeerNotifyEventsAllType, typeof(InputPeerNotifyEventsAllType) },
            { Types.InputPeerNotifySettingsType, typeof(InputPeerNotifySettingsType) },
            { Types.PeerNotifyEventsEmptyType, typeof(PeerNotifyEventsEmptyType) },
            { Types.PeerNotifyEventsAllType, typeof(PeerNotifyEventsAllType) },
            { Types.PeerNotifySettingsEmptyType, typeof(PeerNotifySettingsEmptyType) },
            { Types.PeerNotifySettingsType, typeof(PeerNotifySettingsType) },
            { Types.PeerSettingsType, typeof(PeerSettingsType) },
            { Types.WallPaperType, typeof(WallPaperType) },
            { Types.WallPaperSolidType, typeof(WallPaperSolidType) },
            { Types.InputReportReasonSpamType, typeof(InputReportReasonSpamType) },
            { Types.InputReportReasonViolenceType, typeof(InputReportReasonViolenceType) },
            { Types.InputReportReasonPornographyType, typeof(InputReportReasonPornographyType) },
            { Types.InputReportReasonOtherType, typeof(InputReportReasonOtherType) },
            { Types.UserFullType, typeof(UserFullType) },
            { Types.ContactType, typeof(ContactType) },
            { Types.ImportedContactType, typeof(ImportedContactType) },
            { Types.ContactBlockedType, typeof(ContactBlockedType) },
            { Types.ContactStatusType, typeof(ContactStatusType) },
            { Types.ContactsLinkType, typeof(ContactsLinkType) },
            { Types.ContactsContactsNotModifiedType, typeof(ContactsContactsNotModifiedType) },
            { Types.ContactsContactsType, typeof(ContactsContactsType) },
            { Types.ContactsImportedContactsType, typeof(ContactsImportedContactsType) },
            { Types.ContactsBlockedType, typeof(ContactsBlockedType) },
            { Types.ContactsBlockedSliceType, typeof(ContactsBlockedSliceType) },
            { Types.MessagesDialogsType, typeof(MessagesDialogsType) },
            { Types.MessagesDialogsSliceType, typeof(MessagesDialogsSliceType) },
            { Types.MessagesMessagesType, typeof(MessagesMessagesType) },
            { Types.MessagesMessagesSliceType, typeof(MessagesMessagesSliceType) },
            { Types.MessagesChannelMessagesType, typeof(MessagesChannelMessagesType) },
            { Types.MessagesChatsType, typeof(MessagesChatsType) },
            { Types.MessagesChatFullType, typeof(MessagesChatFullType) },
            { Types.MessagesAffectedHistoryType, typeof(MessagesAffectedHistoryType) },
            { Types.InputMessagesFilterEmptyType, typeof(InputMessagesFilterEmptyType) },
            { Types.InputMessagesFilterPhotosType, typeof(InputMessagesFilterPhotosType) },
            { Types.InputMessagesFilterVideoType, typeof(InputMessagesFilterVideoType) },
            { Types.InputMessagesFilterPhotoVideoType, typeof(InputMessagesFilterPhotoVideoType) },
            { Types.InputMessagesFilterPhotoVideoDocumentsType, typeof(InputMessagesFilterPhotoVideoDocumentsType) },
            { Types.InputMessagesFilterDocumentType, typeof(InputMessagesFilterDocumentType) },
            { Types.InputMessagesFilterUrlType, typeof(InputMessagesFilterUrlType) },
            { Types.InputMessagesFilterGifType, typeof(InputMessagesFilterGifType) },
            { Types.InputMessagesFilterVoiceType, typeof(InputMessagesFilterVoiceType) },
            { Types.InputMessagesFilterMusicType, typeof(InputMessagesFilterMusicType) },
            { Types.InputMessagesFilterChatPhotosType, typeof(InputMessagesFilterChatPhotosType) },
            { Types.UpdateNewMessageType, typeof(UpdateNewMessageType) },
            { Types.UpdateMessageIDType, typeof(UpdateMessageIDType) },
            { Types.UpdateDeleteMessagesType, typeof(UpdateDeleteMessagesType) },
            { Types.UpdateUserTypingType, typeof(UpdateUserTypingType) },
            { Types.UpdateChatUserTypingType, typeof(UpdateChatUserTypingType) },
            { Types.UpdateChatParticipantsType, typeof(UpdateChatParticipantsType) },
            { Types.UpdateUserStatusType, typeof(UpdateUserStatusType) },
            { Types.UpdateUserNameType, typeof(UpdateUserNameType) },
            { Types.UpdateUserPhotoType, typeof(UpdateUserPhotoType) },
            { Types.UpdateContactRegisteredType, typeof(UpdateContactRegisteredType) },
            { Types.UpdateContactLinkType, typeof(UpdateContactLinkType) },
            { Types.UpdateNewAuthorizationType, typeof(UpdateNewAuthorizationType) },
            { Types.UpdateNewEncryptedMessageType, typeof(UpdateNewEncryptedMessageType) },
            { Types.UpdateEncryptedChatTypingType, typeof(UpdateEncryptedChatTypingType) },
            { Types.UpdateEncryptionType, typeof(UpdateEncryptionType) },
            { Types.UpdateEncryptedMessagesReadType, typeof(UpdateEncryptedMessagesReadType) },
            { Types.UpdateChatParticipantAddType, typeof(UpdateChatParticipantAddType) },
            { Types.UpdateChatParticipantDeleteType, typeof(UpdateChatParticipantDeleteType) },
            { Types.UpdateDcOptionsType, typeof(UpdateDcOptionsType) },
            { Types.UpdateUserBlockedType, typeof(UpdateUserBlockedType) },
            { Types.UpdateNotifySettingsType, typeof(UpdateNotifySettingsType) },
            { Types.UpdateServiceNotificationType, typeof(UpdateServiceNotificationType) },
            { Types.UpdatePrivacyType, typeof(UpdatePrivacyType) },
            { Types.UpdateUserPhoneType, typeof(UpdateUserPhoneType) },
            { Types.UpdateReadHistoryInboxType, typeof(UpdateReadHistoryInboxType) },
            { Types.UpdateReadHistoryOutboxType, typeof(UpdateReadHistoryOutboxType) },
            { Types.UpdateWebPageType, typeof(UpdateWebPageType) },
            { Types.UpdateReadMessagesContentsType, typeof(UpdateReadMessagesContentsType) },
            { Types.UpdateChannelTooLongType, typeof(UpdateChannelTooLongType) },
            { Types.UpdateChannelType, typeof(UpdateChannelType) },
            { Types.UpdateNewChannelMessageType, typeof(UpdateNewChannelMessageType) },
            { Types.UpdateReadChannelInboxType, typeof(UpdateReadChannelInboxType) },
            { Types.UpdateDeleteChannelMessagesType, typeof(UpdateDeleteChannelMessagesType) },
            { Types.UpdateChannelMessageViewsType, typeof(UpdateChannelMessageViewsType) },
            { Types.UpdateChatAdminsType, typeof(UpdateChatAdminsType) },
            { Types.UpdateChatParticipantAdminType, typeof(UpdateChatParticipantAdminType) },
            { Types.UpdateNewStickerSetType, typeof(UpdateNewStickerSetType) },
            { Types.UpdateStickerSetsOrderType, typeof(UpdateStickerSetsOrderType) },
            { Types.UpdateStickerSetsType, typeof(UpdateStickerSetsType) },
            { Types.UpdateSavedGifsType, typeof(UpdateSavedGifsType) },
            { Types.UpdateBotInlineQueryType, typeof(UpdateBotInlineQueryType) },
            { Types.UpdateBotInlineSendType, typeof(UpdateBotInlineSendType) },
            { Types.UpdateEditChannelMessageType, typeof(UpdateEditChannelMessageType) },
            { Types.UpdateChannelPinnedMessageType, typeof(UpdateChannelPinnedMessageType) },
            { Types.UpdateBotCallbackQueryType, typeof(UpdateBotCallbackQueryType) },
            { Types.UpdateEditMessageType, typeof(UpdateEditMessageType) },
            { Types.UpdateInlineBotCallbackQueryType, typeof(UpdateInlineBotCallbackQueryType) },
            { Types.UpdateReadChannelOutboxType, typeof(UpdateReadChannelOutboxType) },
            { Types.UpdateDraftMessageType, typeof(UpdateDraftMessageType) },
            { Types.UpdatesStateType, typeof(UpdatesStateType) },
            { Types.UpdatesDifferenceEmptyType, typeof(UpdatesDifferenceEmptyType) },
            { Types.UpdatesDifferenceType, typeof(UpdatesDifferenceType) },
            { Types.UpdatesDifferenceSliceType, typeof(UpdatesDifferenceSliceType) },
            { Types.UpdatesTooLongType, typeof(UpdatesTooLongType) },
            { Types.UpdateShortMessageType, typeof(UpdateShortMessageType) },
            { Types.UpdateShortChatMessageType, typeof(UpdateShortChatMessageType) },
            { Types.UpdateShortType, typeof(UpdateShortType) },
            { Types.UpdatesCombinedType, typeof(UpdatesCombinedType) },
            { Types.UpdatesType, typeof(UpdatesType) },
            { Types.UpdateShortSentMessageType, typeof(UpdateShortSentMessageType) },
            { Types.PhotosPhotosType, typeof(PhotosPhotosType) },
            { Types.PhotosPhotosSliceType, typeof(PhotosPhotosSliceType) },
            { Types.PhotosPhotoType, typeof(PhotosPhotoType) },
            { Types.UploadFileType, typeof(UploadFileType) },
            { Types.DcOptionType, typeof(DcOptionType) },
            { Types.ConfigType, typeof(ConfigType) },
            { Types.NearestDcType, typeof(NearestDcType) },
            { Types.HelpAppUpdateType, typeof(HelpAppUpdateType) },
            { Types.HelpNoAppUpdateType, typeof(HelpNoAppUpdateType) },
            { Types.HelpInviteTextType, typeof(HelpInviteTextType) },
            { Types.EncryptedChatEmptyType, typeof(EncryptedChatEmptyType) },
            { Types.EncryptedChatWaitingType, typeof(EncryptedChatWaitingType) },
            { Types.EncryptedChatRequestedType, typeof(EncryptedChatRequestedType) },
            { Types.EncryptedChatType, typeof(EncryptedChatType) },
            { Types.EncryptedChatDiscardedType, typeof(EncryptedChatDiscardedType) },
            { Types.InputEncryptedChatType, typeof(InputEncryptedChatType) },
            { Types.EncryptedFileEmptyType, typeof(EncryptedFileEmptyType) },
            { Types.EncryptedFileType, typeof(EncryptedFileType) },
            { Types.InputEncryptedFileEmptyType, typeof(InputEncryptedFileEmptyType) },
            { Types.InputEncryptedFileUploadedType, typeof(InputEncryptedFileUploadedType) },
            { Types.InputEncryptedFileType, typeof(InputEncryptedFileType) },
            { Types.InputEncryptedFileBigUploadedType, typeof(InputEncryptedFileBigUploadedType) },
            { Types.EncryptedMessageType, typeof(EncryptedMessageType) },
            { Types.EncryptedMessageServiceType, typeof(EncryptedMessageServiceType) },
            { Types.MessagesDhConfigNotModifiedType, typeof(MessagesDhConfigNotModifiedType) },
            { Types.MessagesDhConfigType, typeof(MessagesDhConfigType) },
            { Types.MessagesSentEncryptedMessageType, typeof(MessagesSentEncryptedMessageType) },
            { Types.MessagesSentEncryptedFileType, typeof(MessagesSentEncryptedFileType) },
            { Types.InputDocumentEmptyType, typeof(InputDocumentEmptyType) },
            { Types.InputDocumentType, typeof(InputDocumentType) },
            { Types.DocumentEmptyType, typeof(DocumentEmptyType) },
            { Types.DocumentType, typeof(DocumentType) },
            { Types.HelpSupportType, typeof(HelpSupportType) },
            { Types.NotifyPeerType, typeof(NotifyPeerType) },
            { Types.NotifyUsersType, typeof(NotifyUsersType) },
            { Types.NotifyChatsType, typeof(NotifyChatsType) },
            { Types.NotifyAllType, typeof(NotifyAllType) },
            { Types.SendMessageTypingActionType, typeof(SendMessageTypingActionType) },
            { Types.SendMessageCancelActionType, typeof(SendMessageCancelActionType) },
            { Types.SendMessageRecordVideoActionType, typeof(SendMessageRecordVideoActionType) },
            { Types.SendMessageUploadVideoActionType, typeof(SendMessageUploadVideoActionType) },
            { Types.SendMessageRecordAudioActionType, typeof(SendMessageRecordAudioActionType) },
            { Types.SendMessageUploadAudioActionType, typeof(SendMessageUploadAudioActionType) },
            { Types.SendMessageUploadPhotoActionType, typeof(SendMessageUploadPhotoActionType) },
            { Types.SendMessageUploadDocumentActionType, typeof(SendMessageUploadDocumentActionType) },
            { Types.SendMessageGeoLocationActionType, typeof(SendMessageGeoLocationActionType) },
            { Types.SendMessageChooseContactActionType, typeof(SendMessageChooseContactActionType) },
            { Types.ContactsFoundType, typeof(ContactsFoundType) },
            { Types.InputPrivacyKeyStatusTimestampType, typeof(InputPrivacyKeyStatusTimestampType) },
            { Types.InputPrivacyKeyChatInviteType, typeof(InputPrivacyKeyChatInviteType) },
            { Types.PrivacyKeyStatusTimestampType, typeof(PrivacyKeyStatusTimestampType) },
            { Types.PrivacyKeyChatInviteType, typeof(PrivacyKeyChatInviteType) },
            { Types.InputPrivacyValueAllowContactsType, typeof(InputPrivacyValueAllowContactsType) },
            { Types.InputPrivacyValueAllowAllType, typeof(InputPrivacyValueAllowAllType) },
            { Types.InputPrivacyValueAllowUsersType, typeof(InputPrivacyValueAllowUsersType) },
            { Types.InputPrivacyValueDisallowContactsType, typeof(InputPrivacyValueDisallowContactsType) },
            { Types.InputPrivacyValueDisallowAllType, typeof(InputPrivacyValueDisallowAllType) },
            { Types.InputPrivacyValueDisallowUsersType, typeof(InputPrivacyValueDisallowUsersType) },
            { Types.PrivacyValueAllowContactsType, typeof(PrivacyValueAllowContactsType) },
            { Types.PrivacyValueAllowAllType, typeof(PrivacyValueAllowAllType) },
            { Types.PrivacyValueAllowUsersType, typeof(PrivacyValueAllowUsersType) },
            { Types.PrivacyValueDisallowContactsType, typeof(PrivacyValueDisallowContactsType) },
            { Types.PrivacyValueDisallowAllType, typeof(PrivacyValueDisallowAllType) },
            { Types.PrivacyValueDisallowUsersType, typeof(PrivacyValueDisallowUsersType) },
            { Types.AccountPrivacyRulesType, typeof(AccountPrivacyRulesType) },
            { Types.AccountDaysTTLType, typeof(AccountDaysTTLType) },
            { Types.DocumentAttributeImageSizeType, typeof(DocumentAttributeImageSizeType) },
            { Types.DocumentAttributeAnimatedType, typeof(DocumentAttributeAnimatedType) },
            { Types.DocumentAttributeStickerType, typeof(DocumentAttributeStickerType) },
            { Types.DocumentAttributeVideoType, typeof(DocumentAttributeVideoType) },
            { Types.DocumentAttributeAudioType, typeof(DocumentAttributeAudioType) },
            { Types.DocumentAttributeFilenameType, typeof(DocumentAttributeFilenameType) },
            { Types.MessagesStickersNotModifiedType, typeof(MessagesStickersNotModifiedType) },
            { Types.MessagesStickersType, typeof(MessagesStickersType) },
            { Types.StickerPackType, typeof(StickerPackType) },
            { Types.MessagesAllStickersNotModifiedType, typeof(MessagesAllStickersNotModifiedType) },
            { Types.MessagesAllStickersType, typeof(MessagesAllStickersType) },
            { Types.DisabledFeatureType, typeof(DisabledFeatureType) },
            { Types.MessagesAffectedMessagesType, typeof(MessagesAffectedMessagesType) },
            { Types.ContactLinkUnknownType, typeof(ContactLinkUnknownType) },
            { Types.ContactLinkNoneType, typeof(ContactLinkNoneType) },
            { Types.ContactLinkHasPhoneType, typeof(ContactLinkHasPhoneType) },
            { Types.ContactLinkContactType, typeof(ContactLinkContactType) },
            { Types.WebPageEmptyType, typeof(WebPageEmptyType) },
            { Types.WebPagePendingType, typeof(WebPagePendingType) },
            { Types.WebPageType, typeof(WebPageType) },
            { Types.AuthorizationType, typeof(AuthorizationType) },
            { Types.AccountAuthorizationsType, typeof(AccountAuthorizationsType) },
            { Types.AccountNoPasswordType, typeof(AccountNoPasswordType) },
            { Types.AccountPasswordType, typeof(AccountPasswordType) },
            { Types.AccountPasswordSettingsType, typeof(AccountPasswordSettingsType) },
            { Types.AccountPasswordInputSettingsType, typeof(AccountPasswordInputSettingsType) },
            { Types.AuthPasswordRecoveryType, typeof(AuthPasswordRecoveryType) },
            { Types.ReceivedNotifyMessageType, typeof(ReceivedNotifyMessageType) },
            { Types.ChatInviteEmptyType, typeof(ChatInviteEmptyType) },
            { Types.ChatInviteExportedType, typeof(ChatInviteExportedType) },
            { Types.ChatInviteAlreadyType, typeof(ChatInviteAlreadyType) },
            { Types.ChatInviteType, typeof(ChatInviteType) },
            { Types.InputStickerSetEmptyType, typeof(InputStickerSetEmptyType) },
            { Types.InputStickerSetIDType, typeof(InputStickerSetIDType) },
            { Types.InputStickerSetShortNameType, typeof(InputStickerSetShortNameType) },
            { Types.StickerSetType, typeof(StickerSetType) },
            { Types.MessagesStickerSetType, typeof(MessagesStickerSetType) },
            { Types.BotCommandType, typeof(BotCommandType) },
            { Types.BotInfoType, typeof(BotInfoType) },
            { Types.KeyboardButtonType, typeof(KeyboardButtonType) },
            { Types.KeyboardButtonUrlType, typeof(KeyboardButtonUrlType) },
            { Types.KeyboardButtonCallbackType, typeof(KeyboardButtonCallbackType) },
            { Types.KeyboardButtonRequestPhoneType, typeof(KeyboardButtonRequestPhoneType) },
            { Types.KeyboardButtonRequestGeoLocationType, typeof(KeyboardButtonRequestGeoLocationType) },
            { Types.KeyboardButtonSwitchInlineType, typeof(KeyboardButtonSwitchInlineType) },
            { Types.KeyboardButtonRowType, typeof(KeyboardButtonRowType) },
            { Types.ReplyKeyboardHideType, typeof(ReplyKeyboardHideType) },
            { Types.ReplyKeyboardForceReplyType, typeof(ReplyKeyboardForceReplyType) },
            { Types.ReplyKeyboardMarkupType, typeof(ReplyKeyboardMarkupType) },
            { Types.ReplyInlineMarkupType, typeof(ReplyInlineMarkupType) },
            { Types.HelpAppChangelogEmptyType, typeof(HelpAppChangelogEmptyType) },
            { Types.HelpAppChangelogType, typeof(HelpAppChangelogType) },
            { Types.MessageEntityUnknownType, typeof(MessageEntityUnknownType) },
            { Types.MessageEntityMentionType, typeof(MessageEntityMentionType) },
            { Types.MessageEntityHashtagType, typeof(MessageEntityHashtagType) },
            { Types.MessageEntityBotCommandType, typeof(MessageEntityBotCommandType) },
            { Types.MessageEntityUrlType, typeof(MessageEntityUrlType) },
            { Types.MessageEntityEmailType, typeof(MessageEntityEmailType) },
            { Types.MessageEntityBoldType, typeof(MessageEntityBoldType) },
            { Types.MessageEntityItalicType, typeof(MessageEntityItalicType) },
            { Types.MessageEntityCodeType, typeof(MessageEntityCodeType) },
            { Types.MessageEntityPreType, typeof(MessageEntityPreType) },
            { Types.MessageEntityTextUrlType, typeof(MessageEntityTextUrlType) },
            { Types.MessageEntityMentionNameType, typeof(MessageEntityMentionNameType) },
            { Types.InputMessageEntityMentionNameType, typeof(InputMessageEntityMentionNameType) },
            { Types.InputChannelEmptyType, typeof(InputChannelEmptyType) },
            { Types.InputChannelType, typeof(InputChannelType) },
            { Types.ContactsResolvedPeerType, typeof(ContactsResolvedPeerType) },
            { Types.MessageRangeType, typeof(MessageRangeType) },
            { Types.UpdatesChannelDifferenceEmptyType, typeof(UpdatesChannelDifferenceEmptyType) },
            { Types.UpdatesChannelDifferenceTooLongType, typeof(UpdatesChannelDifferenceTooLongType) },
            { Types.UpdatesChannelDifferenceType, typeof(UpdatesChannelDifferenceType) },
            { Types.ChannelMessagesFilterEmptyType, typeof(ChannelMessagesFilterEmptyType) },
            { Types.ChannelMessagesFilterType, typeof(ChannelMessagesFilterType) },
            { Types.ChannelParticipantType, typeof(ChannelParticipantType) },
            { Types.ChannelParticipantSelfType, typeof(ChannelParticipantSelfType) },
            { Types.ChannelParticipantModeratorType, typeof(ChannelParticipantModeratorType) },
            { Types.ChannelParticipantEditorType, typeof(ChannelParticipantEditorType) },
            { Types.ChannelParticipantKickedType, typeof(ChannelParticipantKickedType) },
            { Types.ChannelParticipantCreatorType, typeof(ChannelParticipantCreatorType) },
            { Types.ChannelParticipantsRecentType, typeof(ChannelParticipantsRecentType) },
            { Types.ChannelParticipantsAdminsType, typeof(ChannelParticipantsAdminsType) },
            { Types.ChannelParticipantsKickedType, typeof(ChannelParticipantsKickedType) },
            { Types.ChannelParticipantsBotsType, typeof(ChannelParticipantsBotsType) },
            { Types.ChannelRoleEmptyType, typeof(ChannelRoleEmptyType) },
            { Types.ChannelRoleModeratorType, typeof(ChannelRoleModeratorType) },
            { Types.ChannelRoleEditorType, typeof(ChannelRoleEditorType) },
            { Types.ChannelsChannelParticipantsType, typeof(ChannelsChannelParticipantsType) },
            { Types.ChannelsChannelParticipantType, typeof(ChannelsChannelParticipantType) },
            { Types.HelpTermsOfServiceType, typeof(HelpTermsOfServiceType) },
            { Types.FoundGifType, typeof(FoundGifType) },
            { Types.FoundGifCachedType, typeof(FoundGifCachedType) },
            { Types.MessagesFoundGifsType, typeof(MessagesFoundGifsType) },
            { Types.MessagesSavedGifsNotModifiedType, typeof(MessagesSavedGifsNotModifiedType) },
            { Types.MessagesSavedGifsType, typeof(MessagesSavedGifsType) },
            { Types.InputBotInlineMessageMediaAutoType, typeof(InputBotInlineMessageMediaAutoType) },
            { Types.InputBotInlineMessageTextType, typeof(InputBotInlineMessageTextType) },
            { Types.InputBotInlineMessageMediaGeoType, typeof(InputBotInlineMessageMediaGeoType) },
            { Types.InputBotInlineMessageMediaVenueType, typeof(InputBotInlineMessageMediaVenueType) },
            { Types.InputBotInlineMessageMediaContactType, typeof(InputBotInlineMessageMediaContactType) },
            { Types.InputBotInlineResultType, typeof(InputBotInlineResultType) },
            { Types.InputBotInlineResultPhotoType, typeof(InputBotInlineResultPhotoType) },
            { Types.InputBotInlineResultDocumentType, typeof(InputBotInlineResultDocumentType) },
            { Types.BotInlineMessageMediaAutoType, typeof(BotInlineMessageMediaAutoType) },
            { Types.BotInlineMessageTextType, typeof(BotInlineMessageTextType) },
            { Types.BotInlineMessageMediaGeoType, typeof(BotInlineMessageMediaGeoType) },
            { Types.BotInlineMessageMediaVenueType, typeof(BotInlineMessageMediaVenueType) },
            { Types.BotInlineMessageMediaContactType, typeof(BotInlineMessageMediaContactType) },
            { Types.BotInlineResultType, typeof(BotInlineResultType) },
            { Types.BotInlineMediaResultType, typeof(BotInlineMediaResultType) },
            { Types.MessagesBotResultsType, typeof(MessagesBotResultsType) },
            { Types.ExportedMessageLinkType, typeof(ExportedMessageLinkType) },
            { Types.MessageFwdHeaderType, typeof(MessageFwdHeaderType) },
            { Types.AuthCodeTypeSmsType, typeof(AuthCodeTypeSmsType) },
            { Types.AuthCodeTypeCallType, typeof(AuthCodeTypeCallType) },
            { Types.AuthCodeTypeFlashCallType, typeof(AuthCodeTypeFlashCallType) },
            { Types.AuthSentCodeTypeAppType, typeof(AuthSentCodeTypeAppType) },
            { Types.AuthSentCodeTypeSmsType, typeof(AuthSentCodeTypeSmsType) },
            { Types.AuthSentCodeTypeCallType, typeof(AuthSentCodeTypeCallType) },
            { Types.AuthSentCodeTypeFlashCallType, typeof(AuthSentCodeTypeFlashCallType) },
            { Types.MessagesBotCallbackAnswerType, typeof(MessagesBotCallbackAnswerType) },
            { Types.MessagesMessageEditDataType, typeof(MessagesMessageEditDataType) },
            { Types.InputBotInlineMessageIDType, typeof(InputBotInlineMessageIDType) },
            { Types.InlineBotSwitchPMType, typeof(InlineBotSwitchPMType) },
            { Types.MessagesPeerDialogsType, typeof(MessagesPeerDialogsType) },
            { Types.TopPeerType, typeof(TopPeerType) },
            { Types.TopPeerCategoryBotsPMType, typeof(TopPeerCategoryBotsPMType) },
            { Types.TopPeerCategoryBotsInlineType, typeof(TopPeerCategoryBotsInlineType) },
            { Types.TopPeerCategoryCorrespondentsType, typeof(TopPeerCategoryCorrespondentsType) },
            { Types.TopPeerCategoryGroupsType, typeof(TopPeerCategoryGroupsType) },
            { Types.TopPeerCategoryChannelsType, typeof(TopPeerCategoryChannelsType) },
            { Types.TopPeerCategoryPeersType, typeof(TopPeerCategoryPeersType) },
            { Types.ContactsTopPeersNotModifiedType, typeof(ContactsTopPeersNotModifiedType) },
            { Types.ContactsTopPeersType, typeof(ContactsTopPeersType) },
            { Types.DraftMessageEmptyType, typeof(DraftMessageEmptyType) },
            { Types.DraftMessageType, typeof(DraftMessageType) }
        };

        #endregion

        #region Functions (requests)

        public class MsgsAckRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MsgsAckRequest;

            public List<long> MsgIds;

            public MsgsAck Result;
            public override object GetResult() => Result;

            public MsgsAckRequest() { }

            public MsgsAckRequest(List<long> MsgIds)
            {
                this.MsgIds = MsgIds;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(MsgIds.Count);
                foreach (long MsgIdsElement in MsgIds)
                    writer.Write(MsgIdsElement);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MsgsAck>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MsgsAckRequest MsgIds:{0})", MsgIds);
            }
        }

        public class RpcDropAnswerRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.RpcDropAnswerRequest;

            public long ReqMsgId;

            public RpcDropAnswer Result;
            public override object GetResult() => Result;

            public RpcDropAnswerRequest() { }

            public RpcDropAnswerRequest(long ReqMsgId)
            {
                this.ReqMsgId = ReqMsgId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ReqMsgId);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<RpcDropAnswer>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(RpcDropAnswerRequest ReqMsgId:{0})", ReqMsgId);
            }
        }

        public class GetFutureSaltsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.GetFutureSaltsRequest;

            public int Num;

            public FutureSalts Result;
            public override object GetResult() => Result;

            public GetFutureSaltsRequest() { }

            public GetFutureSaltsRequest(int Num)
            {
                this.Num = Num;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Num);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<FutureSalts>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(GetFutureSaltsRequest Num:{0})", Num);
            }
        }

        public class PingRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.PingRequest;

            public long PingId;

            public Pong Result;
            public override object GetResult() => Result;

            public PingRequest() { }

            public PingRequest(long PingId)
            {
                this.PingId = PingId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PingId);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Pong>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(PingRequest PingId:{0})", PingId);
            }
        }

        public class PingDelayDisconnectRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.PingDelayDisconnectRequest;

            public long PingId;
            public int DisconnectDelay;

            public Pong Result;
            public override object GetResult() => Result;

            public PingDelayDisconnectRequest() { }

            public PingDelayDisconnectRequest(long PingId, int DisconnectDelay)
            {
                this.PingId = PingId;
                this.DisconnectDelay = DisconnectDelay;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PingId);
                writer.Write(DisconnectDelay);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Pong>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(PingDelayDisconnectRequest PingId:{0} DisconnectDelay:{1})", PingId, DisconnectDelay);
            }
        }

        public class DestroySessionRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.DestroySessionRequest;

            public long SessionId;

            public DestroySessionRes Result;
            public override object GetResult() => Result;

            public DestroySessionRequest() { }

            public DestroySessionRequest(long SessionId)
            {
                this.SessionId = SessionId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(SessionId);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<DestroySessionRes>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(DestroySessionRequest SessionId:{0})", SessionId);
            }
        }

        public class RegisterSaveDeveloperInfoRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.RegisterSaveDeveloperInfoRequest;

            public string Name;
            public string Email;
            public string PhoneNumber;
            public int Age;
            public string City;

            public bool Result;
            public override object GetResult() => Result;

            public RegisterSaveDeveloperInfoRequest() { }

            public RegisterSaveDeveloperInfoRequest(string Name, string Email, string PhoneNumber, int Age, string City)
            {
                this.Name = Name;
                this.Email = Email;
                this.PhoneNumber = PhoneNumber;
                this.Age = Age;
                this.City = City;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Name);
                writer.Write(Email);
                writer.Write(PhoneNumber);
                writer.Write(Age);
                writer.Write(City);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(RegisterSaveDeveloperInfoRequest Name:{0} Email:{1} PhoneNumber:{2} Age:{3} City:{4})", Name, Email, PhoneNumber, Age, City);
            }
        }

        public class InvokeAfterMsgRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.InvokeAfterMsgRequest;

            public long MsgId;
            public MTProtoRequest Query;

            public TLObject Result;
            public override object GetResult() => Result;

            public InvokeAfterMsgRequest() { }

            public InvokeAfterMsgRequest(long MsgId, MTProtoRequest Query)
            {
                this.MsgId = MsgId;
                this.Query = Query;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(MsgId);
                Query.OnSend(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<TLObject>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(InvokeAfterMsgRequest MsgId:{0} Query:{1})", MsgId, Query);
            }
        }

        public class InvokeAfterMsgsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.InvokeAfterMsgsRequest;

            public List<long> MsgIds;
            public MTProtoRequest Query;

            public TLObject Result;
            public override object GetResult() => Result;

            public InvokeAfterMsgsRequest() { }

            public InvokeAfterMsgsRequest(List<long> MsgIds, MTProtoRequest Query)
            {
                this.MsgIds = MsgIds;
                this.Query = Query;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(MsgIds.Count);
                foreach (long MsgIdsElement in MsgIds)
                    writer.Write(MsgIdsElement);
                Query.OnSend(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<TLObject>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(InvokeAfterMsgsRequest MsgIds:{0} Query:{1})", MsgIds, Query);
            }
        }

        public class InitConnectionRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.InitConnectionRequest;

            public int ApiId;
            public string DeviceModel;
            public string SystemVersion;
            public string AppVersion;
            public string LangCode;
            public MTProtoRequest Query;

            public TLObject Result;
            public override object GetResult() => Result;

            public InitConnectionRequest() { }

            public InitConnectionRequest(int ApiId, string DeviceModel, string SystemVersion, string AppVersion, string LangCode, MTProtoRequest Query)
            {
                this.ApiId = ApiId;
                this.DeviceModel = DeviceModel;
                this.SystemVersion = SystemVersion;
                this.AppVersion = AppVersion;
                this.LangCode = LangCode;
                this.Query = Query;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ApiId);
                writer.Write(DeviceModel);
                writer.Write(SystemVersion);
                writer.Write(AppVersion);
                writer.Write(LangCode);
                Query.OnSend(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<TLObject>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(InitConnectionRequest ApiId:{0} DeviceModel:{1} SystemVersion:{2} AppVersion:{3} LangCode:{4} Query:{5})", ApiId, DeviceModel, SystemVersion, AppVersion, LangCode, Query);
            }
        }

        public class InvokeWithLayerRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.InvokeWithLayerRequest;

            public int Layer;
            public MTProtoRequest Query;

            public TLObject Result;
            public override object GetResult() => Result;

            public InvokeWithLayerRequest() { }

            public InvokeWithLayerRequest(int Layer, MTProtoRequest Query)
            {
                this.Layer = Layer;
                this.Query = Query;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Layer);
                Query.OnSend(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<TLObject>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(InvokeWithLayerRequest Layer:{0} Query:{1})", Layer, Query);
            }
        }

        public class InvokeWithoutUpdatesRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.InvokeWithoutUpdatesRequest;

            public MTProtoRequest Query;

            public TLObject Result;
            public override object GetResult() => Result;

            public InvokeWithoutUpdatesRequest() { }

            public InvokeWithoutUpdatesRequest(MTProtoRequest Query)
            {
                this.Query = Query;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Query.OnSend(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<TLObject>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(InvokeWithoutUpdatesRequest Query:{0})", Query);
            }
        }

        public class AuthCheckPhoneRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthCheckPhoneRequest;

            public string PhoneNumber;

            public AuthCheckedPhone Result;
            public override object GetResult() => Result;

            public AuthCheckPhoneRequest() { }

            public AuthCheckPhoneRequest(string PhoneNumber)
            {
                this.PhoneNumber = PhoneNumber;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PhoneNumber);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AuthCheckedPhone>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AuthCheckPhoneRequest PhoneNumber:{0})", PhoneNumber);
            }
        }

        public class AuthSendCodeRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthSendCodeRequest;

            public True AllowFlashcall;
            public string PhoneNumber;
            public bool? CurrentNumber;
            public int ApiId;
            public string ApiHash;

            public AuthSentCode Result;
            public override object GetResult() => Result;

            public AuthSendCodeRequest() { }

            /// <summary>
            /// The following arguments can be null: AllowFlashcall, CurrentNumber
            /// </summary>
            /// <param name="AllowFlashcall">Can be null</param>
            /// <param name="PhoneNumber">Can NOT be null</param>
            /// <param name="CurrentNumber">Can be null</param>
            /// <param name="ApiId">Can NOT be null</param>
            /// <param name="ApiHash">Can NOT be null</param>
            public AuthSendCodeRequest(True AllowFlashcall, string PhoneNumber, bool? CurrentNumber, int ApiId, string ApiHash)
            {
                this.AllowFlashcall = AllowFlashcall;
                this.PhoneNumber = PhoneNumber;
                this.CurrentNumber = CurrentNumber;
                this.ApiId = ApiId;
                this.ApiHash = ApiHash;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (AllowFlashcall != null ? 1 << 0 : 0) |
                    (CurrentNumber != null ? 1 << 0 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (AllowFlashcall != null)
                {

                }

                writer.Write(PhoneNumber);
                if (CurrentNumber != null)
                {
                    writer.Write(CurrentNumber.Value);
                }

                writer.Write(ApiId);
                writer.Write(ApiHash);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AuthSentCode>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AuthSendCodeRequest AllowFlashcall:{0} PhoneNumber:{1} CurrentNumber:{2} ApiId:{3} ApiHash:{4})", AllowFlashcall, PhoneNumber, CurrentNumber, ApiId, ApiHash);
            }
        }

        public class AuthSignUpRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthSignUpRequest;

            public string PhoneNumber;
            public string PhoneCodeHash;
            public string PhoneCode;
            public string FirstName;
            public string LastName;

            public AuthAuthorization Result;
            public override object GetResult() => Result;

            public AuthSignUpRequest() { }

            public AuthSignUpRequest(string PhoneNumber, string PhoneCodeHash, string PhoneCode, string FirstName, string LastName)
            {
                this.PhoneNumber = PhoneNumber;
                this.PhoneCodeHash = PhoneCodeHash;
                this.PhoneCode = PhoneCode;
                this.FirstName = FirstName;
                this.LastName = LastName;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PhoneNumber);
                writer.Write(PhoneCodeHash);
                writer.Write(PhoneCode);
                writer.Write(FirstName);
                writer.Write(LastName);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AuthAuthorization>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AuthSignUpRequest PhoneNumber:{0} PhoneCodeHash:{1} PhoneCode:{2} FirstName:{3} LastName:{4})", PhoneNumber, PhoneCodeHash, PhoneCode, FirstName, LastName);
            }
        }

        public class AuthSignInRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthSignInRequest;

            public string PhoneNumber;
            public string PhoneCodeHash;
            public string PhoneCode;

            public AuthAuthorization Result;
            public override object GetResult() => Result;

            public AuthSignInRequest() { }

            public AuthSignInRequest(string PhoneNumber, string PhoneCodeHash, string PhoneCode)
            {
                this.PhoneNumber = PhoneNumber;
                this.PhoneCodeHash = PhoneCodeHash;
                this.PhoneCode = PhoneCode;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PhoneNumber);
                writer.Write(PhoneCodeHash);
                writer.Write(PhoneCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AuthAuthorization>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AuthSignInRequest PhoneNumber:{0} PhoneCodeHash:{1} PhoneCode:{2})", PhoneNumber, PhoneCodeHash, PhoneCode);
            }
        }

        public class AuthLogOutRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthLogOutRequest;

            public bool Result;
            public override object GetResult() => Result;

            public AuthLogOutRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(AuthLogOutRequest)";
            }
        }

        public class AuthResetAuthorizationsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthResetAuthorizationsRequest;

            public bool Result;
            public override object GetResult() => Result;

            public AuthResetAuthorizationsRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(AuthResetAuthorizationsRequest)";
            }
        }

        public class AuthSendInvitesRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthSendInvitesRequest;

            public List<string> PhoneNumbers;
            public string Message;

            public bool Result;
            public override object GetResult() => Result;

            public AuthSendInvitesRequest() { }

            public AuthSendInvitesRequest(List<string> PhoneNumbers, string Message)
            {
                this.PhoneNumbers = PhoneNumbers;
                this.Message = Message;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(PhoneNumbers.Count);
                foreach (string PhoneNumbersElement in PhoneNumbers)
                    writer.Write(PhoneNumbersElement);
                writer.Write(Message);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AuthSendInvitesRequest PhoneNumbers:{0} Message:{1})", PhoneNumbers, Message);
            }
        }

        public class AuthExportAuthorizationRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthExportAuthorizationRequest;

            public int DcId;

            public AuthExportedAuthorization Result;
            public override object GetResult() => Result;

            public AuthExportAuthorizationRequest() { }

            public AuthExportAuthorizationRequest(int DcId)
            {
                this.DcId = DcId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(DcId);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AuthExportedAuthorization>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AuthExportAuthorizationRequest DcId:{0})", DcId);
            }
        }

        public class AuthImportAuthorizationRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthImportAuthorizationRequest;

            public int Id;
            public byte[] Bytes;

            public AuthAuthorization Result;
            public override object GetResult() => Result;

            public AuthImportAuthorizationRequest() { }

            public AuthImportAuthorizationRequest(int Id, byte[] Bytes)
            {
                this.Id = Id;
                this.Bytes = Bytes;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(Bytes);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AuthAuthorization>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AuthImportAuthorizationRequest Id:{0} Bytes:{1})", Id, Bytes);
            }
        }

        public class AuthBindTempAuthKeyRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthBindTempAuthKeyRequest;

            public long PermAuthKeyId;
            public long Nonce;
            public int ExpiresAt;
            public byte[] EncryptedMessage;

            public bool Result;
            public override object GetResult() => Result;

            public AuthBindTempAuthKeyRequest() { }

            public AuthBindTempAuthKeyRequest(long PermAuthKeyId, long Nonce, int ExpiresAt, byte[] EncryptedMessage)
            {
                this.PermAuthKeyId = PermAuthKeyId;
                this.Nonce = Nonce;
                this.ExpiresAt = ExpiresAt;
                this.EncryptedMessage = EncryptedMessage;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PermAuthKeyId);
                writer.Write(Nonce);
                writer.Write(ExpiresAt);
                writer.Write(EncryptedMessage);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AuthBindTempAuthKeyRequest PermAuthKeyId:{0} Nonce:{1} ExpiresAt:{2} EncryptedMessage:{3})", PermAuthKeyId, Nonce, ExpiresAt, EncryptedMessage);
            }
        }

        public class AuthImportBotAuthorizationRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthImportBotAuthorizationRequest;

            public int Flags;
            public int ApiId;
            public string ApiHash;
            public string BotAuthToken;

            public AuthAuthorization Result;
            public override object GetResult() => Result;

            public AuthImportBotAuthorizationRequest() { }

            public AuthImportBotAuthorizationRequest(int Flags, int ApiId, string ApiHash, string BotAuthToken)
            {
                this.Flags = Flags;
                this.ApiId = ApiId;
                this.ApiHash = ApiHash;
                this.BotAuthToken = BotAuthToken;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Flags);
                writer.Write(ApiId);
                writer.Write(ApiHash);
                writer.Write(BotAuthToken);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AuthAuthorization>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AuthImportBotAuthorizationRequest Flags:{0} ApiId:{1} ApiHash:{2} BotAuthToken:{3})", Flags, ApiId, ApiHash, BotAuthToken);
            }
        }

        public class AuthCheckPasswordRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthCheckPasswordRequest;

            public byte[] PasswordHash;

            public AuthAuthorization Result;
            public override object GetResult() => Result;

            public AuthCheckPasswordRequest() { }

            public AuthCheckPasswordRequest(byte[] PasswordHash)
            {
                this.PasswordHash = PasswordHash;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PasswordHash);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AuthAuthorization>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AuthCheckPasswordRequest PasswordHash:{0})", PasswordHash);
            }
        }

        public class AuthRequestPasswordRecoveryRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthRequestPasswordRecoveryRequest;

            public AuthPasswordRecovery Result;
            public override object GetResult() => Result;

            public AuthRequestPasswordRecoveryRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AuthPasswordRecovery>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(AuthRequestPasswordRecoveryRequest)";
            }
        }

        public class AuthRecoverPasswordRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthRecoverPasswordRequest;

            public string Code;

            public AuthAuthorization Result;
            public override object GetResult() => Result;

            public AuthRecoverPasswordRequest() { }

            public AuthRecoverPasswordRequest(string Code)
            {
                this.Code = Code;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Code);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AuthAuthorization>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AuthRecoverPasswordRequest Code:{0})", Code);
            }
        }

        public class AuthResendCodeRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthResendCodeRequest;

            public string PhoneNumber;
            public string PhoneCodeHash;

            public AuthSentCode Result;
            public override object GetResult() => Result;

            public AuthResendCodeRequest() { }

            public AuthResendCodeRequest(string PhoneNumber, string PhoneCodeHash)
            {
                this.PhoneNumber = PhoneNumber;
                this.PhoneCodeHash = PhoneCodeHash;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PhoneNumber);
                writer.Write(PhoneCodeHash);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AuthSentCode>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AuthResendCodeRequest PhoneNumber:{0} PhoneCodeHash:{1})", PhoneNumber, PhoneCodeHash);
            }
        }

        public class AuthCancelCodeRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AuthCancelCodeRequest;

            public string PhoneNumber;
            public string PhoneCodeHash;

            public bool Result;
            public override object GetResult() => Result;

            public AuthCancelCodeRequest() { }

            public AuthCancelCodeRequest(string PhoneNumber, string PhoneCodeHash)
            {
                this.PhoneNumber = PhoneNumber;
                this.PhoneCodeHash = PhoneCodeHash;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PhoneNumber);
                writer.Write(PhoneCodeHash);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AuthCancelCodeRequest PhoneNumber:{0} PhoneCodeHash:{1})", PhoneNumber, PhoneCodeHash);
            }
        }

        public class AccountRegisterDeviceRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountRegisterDeviceRequest;

            public int TokenType;
            public string Token;

            public bool Result;
            public override object GetResult() => Result;

            public AccountRegisterDeviceRequest() { }

            public AccountRegisterDeviceRequest(int TokenType, string Token)
            {
                this.TokenType = TokenType;
                this.Token = Token;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(TokenType);
                writer.Write(Token);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountRegisterDeviceRequest TokenType:{0} Token:{1})", TokenType, Token);
            }
        }

        public class AccountUnregisterDeviceRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountUnregisterDeviceRequest;

            public int TokenType;
            public string Token;

            public bool Result;
            public override object GetResult() => Result;

            public AccountUnregisterDeviceRequest() { }

            public AccountUnregisterDeviceRequest(int TokenType, string Token)
            {
                this.TokenType = TokenType;
                this.Token = Token;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(TokenType);
                writer.Write(Token);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountUnregisterDeviceRequest TokenType:{0} Token:{1})", TokenType, Token);
            }
        }

        public class AccountUpdateNotifySettingsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountUpdateNotifySettingsRequest;

            public InputNotifyPeer Peer;
            public InputPeerNotifySettings Settings;

            public bool Result;
            public override object GetResult() => Result;

            public AccountUpdateNotifySettingsRequest() { }

            public AccountUpdateNotifySettingsRequest(InputNotifyPeer Peer, InputPeerNotifySettings Settings)
            {
                this.Peer = Peer;
                this.Settings = Settings;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                Settings.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountUpdateNotifySettingsRequest Peer:{0} Settings:{1})", Peer, Settings);
            }
        }

        public class AccountGetNotifySettingsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountGetNotifySettingsRequest;

            public InputNotifyPeer Peer;

            public PeerNotifySettings Result;
            public override object GetResult() => Result;

            public AccountGetNotifySettingsRequest() { }

            public AccountGetNotifySettingsRequest(InputNotifyPeer Peer)
            {
                this.Peer = Peer;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<PeerNotifySettings>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountGetNotifySettingsRequest Peer:{0})", Peer);
            }
        }

        public class AccountResetNotifySettingsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountResetNotifySettingsRequest;

            public bool Result;
            public override object GetResult() => Result;

            public AccountResetNotifySettingsRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(AccountResetNotifySettingsRequest)";
            }
        }

        public class AccountUpdateProfileRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountUpdateProfileRequest;

            public string FirstName;
            public string LastName;
            public string About;

            public User Result;
            public override object GetResult() => Result;

            public AccountUpdateProfileRequest() { }

            /// <summary>
            /// The following arguments can be null: FirstName, LastName, About
            /// </summary>
            /// <param name="FirstName">Can be null</param>
            /// <param name="LastName">Can be null</param>
            /// <param name="About">Can be null</param>
            public AccountUpdateProfileRequest(string FirstName, string LastName, string About)
            {
                this.FirstName = FirstName;
                this.LastName = LastName;
                this.About = About;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (FirstName != null ? 1 << 0 : 0) |
                    (LastName != null ? 1 << 1 : 0) |
                    (About != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (FirstName != null)
                {
                    writer.Write(FirstName);
                }

                if (LastName != null)
                {
                    writer.Write(LastName);
                }

                if (About != null)
                {
                    writer.Write(About);
                }

            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<User>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountUpdateProfileRequest FirstName:{0} LastName:{1} About:{2})", FirstName, LastName, About);
            }
        }

        public class AccountUpdateStatusRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountUpdateStatusRequest;

            public bool Offline;

            public bool Result;
            public override object GetResult() => Result;

            public AccountUpdateStatusRequest() { }

            public AccountUpdateStatusRequest(bool Offline)
            {
                this.Offline = Offline;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offline);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountUpdateStatusRequest Offline:{0})", Offline);
            }
        }

        public class AccountGetWallPapersRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountGetWallPapersRequest;

            public List<WallPaper> Result;
            public override object GetResult() => Result;

            public AccountGetWallPapersRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<List<WallPaper>>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(AccountGetWallPapersRequest)";
            }
        }

        public class AccountReportPeerRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountReportPeerRequest;

            public InputPeer Peer;
            public ReportReason Reason;

            public bool Result;
            public override object GetResult() => Result;

            public AccountReportPeerRequest() { }

            public AccountReportPeerRequest(InputPeer Peer, ReportReason Reason)
            {
                this.Peer = Peer;
                this.Reason = Reason;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                Reason.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountReportPeerRequest Peer:{0} Reason:{1})", Peer, Reason);
            }
        }

        public class AccountCheckUsernameRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountCheckUsernameRequest;

            public string Username;

            public bool Result;
            public override object GetResult() => Result;

            public AccountCheckUsernameRequest() { }

            public AccountCheckUsernameRequest(string Username)
            {
                this.Username = Username;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Username);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountCheckUsernameRequest Username:{0})", Username);
            }
        }

        public class AccountUpdateUsernameRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountUpdateUsernameRequest;

            public string Username;

            public User Result;
            public override object GetResult() => Result;

            public AccountUpdateUsernameRequest() { }

            public AccountUpdateUsernameRequest(string Username)
            {
                this.Username = Username;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Username);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<User>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountUpdateUsernameRequest Username:{0})", Username);
            }
        }

        public class AccountGetPrivacyRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountGetPrivacyRequest;

            public InputPrivacyKey Key;

            public AccountPrivacyRules Result;
            public override object GetResult() => Result;

            public AccountGetPrivacyRequest() { }

            public AccountGetPrivacyRequest(InputPrivacyKey Key)
            {
                this.Key = Key;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Key.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AccountPrivacyRules>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountGetPrivacyRequest Key:{0})", Key);
            }
        }

        public class AccountSetPrivacyRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountSetPrivacyRequest;

            public InputPrivacyKey Key;
            public List<InputPrivacyRule> Rules;

            public AccountPrivacyRules Result;
            public override object GetResult() => Result;

            public AccountSetPrivacyRequest() { }

            public AccountSetPrivacyRequest(InputPrivacyKey Key, List<InputPrivacyRule> Rules)
            {
                this.Key = Key;
                this.Rules = Rules;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Key.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Rules.Count);
                foreach (InputPrivacyRule RulesElement in Rules)
                    RulesElement.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AccountPrivacyRules>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountSetPrivacyRequest Key:{0} Rules:{1})", Key, Rules);
            }
        }

        public class AccountDeleteAccountRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountDeleteAccountRequest;

            public string Reason;

            public bool Result;
            public override object GetResult() => Result;

            public AccountDeleteAccountRequest() { }

            public AccountDeleteAccountRequest(string Reason)
            {
                this.Reason = Reason;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Reason);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountDeleteAccountRequest Reason:{0})", Reason);
            }
        }

        public class AccountGetAccountTTLRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountGetAccountTTLRequest;

            public AccountDaysTTL Result;
            public override object GetResult() => Result;

            public AccountGetAccountTTLRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AccountDaysTTL>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(AccountGetAccountTTLRequest)";
            }
        }

        public class AccountSetAccountTTLRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountSetAccountTTLRequest;

            public AccountDaysTTL Ttl;

            public bool Result;
            public override object GetResult() => Result;

            public AccountSetAccountTTLRequest() { }

            public AccountSetAccountTTLRequest(AccountDaysTTL Ttl)
            {
                this.Ttl = Ttl;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Ttl.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountSetAccountTTLRequest Ttl:{0})", Ttl);
            }
        }

        public class AccountSendChangePhoneCodeRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountSendChangePhoneCodeRequest;

            public True AllowFlashcall;
            public string PhoneNumber;
            public bool? CurrentNumber;

            public AuthSentCode Result;
            public override object GetResult() => Result;

            public AccountSendChangePhoneCodeRequest() { }

            /// <summary>
            /// The following arguments can be null: AllowFlashcall, CurrentNumber
            /// </summary>
            /// <param name="AllowFlashcall">Can be null</param>
            /// <param name="PhoneNumber">Can NOT be null</param>
            /// <param name="CurrentNumber">Can be null</param>
            public AccountSendChangePhoneCodeRequest(True AllowFlashcall, string PhoneNumber, bool? CurrentNumber)
            {
                this.AllowFlashcall = AllowFlashcall;
                this.PhoneNumber = PhoneNumber;
                this.CurrentNumber = CurrentNumber;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (AllowFlashcall != null ? 1 << 0 : 0) |
                    (CurrentNumber != null ? 1 << 0 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (AllowFlashcall != null)
                {

                }

                writer.Write(PhoneNumber);
                if (CurrentNumber != null)
                {
                    writer.Write(CurrentNumber.Value);
                }

            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AuthSentCode>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountSendChangePhoneCodeRequest AllowFlashcall:{0} PhoneNumber:{1} CurrentNumber:{2})", AllowFlashcall, PhoneNumber, CurrentNumber);
            }
        }

        public class AccountChangePhoneRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountChangePhoneRequest;

            public string PhoneNumber;
            public string PhoneCodeHash;
            public string PhoneCode;

            public User Result;
            public override object GetResult() => Result;

            public AccountChangePhoneRequest() { }

            public AccountChangePhoneRequest(string PhoneNumber, string PhoneCodeHash, string PhoneCode)
            {
                this.PhoneNumber = PhoneNumber;
                this.PhoneCodeHash = PhoneCodeHash;
                this.PhoneCode = PhoneCode;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PhoneNumber);
                writer.Write(PhoneCodeHash);
                writer.Write(PhoneCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<User>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountChangePhoneRequest PhoneNumber:{0} PhoneCodeHash:{1} PhoneCode:{2})", PhoneNumber, PhoneCodeHash, PhoneCode);
            }
        }

        public class AccountUpdateDeviceLockedRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountUpdateDeviceLockedRequest;

            public int Period;

            public bool Result;
            public override object GetResult() => Result;

            public AccountUpdateDeviceLockedRequest() { }

            public AccountUpdateDeviceLockedRequest(int Period)
            {
                this.Period = Period;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Period);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountUpdateDeviceLockedRequest Period:{0})", Period);
            }
        }

        public class AccountGetAuthorizationsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountGetAuthorizationsRequest;

            public AccountAuthorizations Result;
            public override object GetResult() => Result;

            public AccountGetAuthorizationsRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AccountAuthorizations>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(AccountGetAuthorizationsRequest)";
            }
        }

        public class AccountResetAuthorizationRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountResetAuthorizationRequest;

            public long Hash;

            public bool Result;
            public override object GetResult() => Result;

            public AccountResetAuthorizationRequest() { }

            public AccountResetAuthorizationRequest(long Hash)
            {
                this.Hash = Hash;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Hash);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountResetAuthorizationRequest Hash:{0})", Hash);
            }
        }

        public class AccountGetPasswordRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountGetPasswordRequest;

            public AccountPassword Result;
            public override object GetResult() => Result;

            public AccountGetPasswordRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AccountPassword>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(AccountGetPasswordRequest)";
            }
        }

        public class AccountGetPasswordSettingsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountGetPasswordSettingsRequest;

            public byte[] CurrentPasswordHash;

            public AccountPasswordSettings Result;
            public override object GetResult() => Result;

            public AccountGetPasswordSettingsRequest() { }

            public AccountGetPasswordSettingsRequest(byte[] CurrentPasswordHash)
            {
                this.CurrentPasswordHash = CurrentPasswordHash;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(CurrentPasswordHash);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<AccountPasswordSettings>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountGetPasswordSettingsRequest CurrentPasswordHash:{0})", CurrentPasswordHash);
            }
        }

        public class AccountUpdatePasswordSettingsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.AccountUpdatePasswordSettingsRequest;

            public byte[] CurrentPasswordHash;
            public AccountPasswordInputSettings NewSettings;

            public bool Result;
            public override object GetResult() => Result;

            public AccountUpdatePasswordSettingsRequest() { }

            public AccountUpdatePasswordSettingsRequest(byte[] CurrentPasswordHash, AccountPasswordInputSettings NewSettings)
            {
                this.CurrentPasswordHash = CurrentPasswordHash;
                this.NewSettings = NewSettings;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(CurrentPasswordHash);
                NewSettings.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(AccountUpdatePasswordSettingsRequest CurrentPasswordHash:{0} NewSettings:{1})", CurrentPasswordHash, NewSettings);
            }
        }

        public class UsersGetUsersRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.UsersGetUsersRequest;

            public List<InputUser> Id;

            public List<User> Result;
            public override object GetResult() => Result;

            public UsersGetUsersRequest() { }

            public UsersGetUsersRequest(List<InputUser> Id)
            {
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Id.Count);
                foreach (InputUser IdElement in Id)
                    IdElement.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<List<User>>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(UsersGetUsersRequest Id:{0})", Id);
            }
        }

        public class UsersGetFullUserRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.UsersGetFullUserRequest;

            public InputUser Id;

            public UserFull Result;
            public override object GetResult() => Result;

            public UsersGetFullUserRequest() { }

            public UsersGetFullUserRequest(InputUser Id)
            {
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Id.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<UserFull>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(UsersGetFullUserRequest Id:{0})", Id);
            }
        }

        public class ContactsGetStatusesRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ContactsGetStatusesRequest;

            public List<ContactStatus> Result;
            public override object GetResult() => Result;

            public ContactsGetStatusesRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<List<ContactStatus>>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(ContactsGetStatusesRequest)";
            }
        }

        public class ContactsGetContactsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ContactsGetContactsRequest;

            public string Hash;

            public ContactsContacts Result;
            public override object GetResult() => Result;

            public ContactsGetContactsRequest() { }

            public ContactsGetContactsRequest(string Hash)
            {
                this.Hash = Hash;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Hash);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<ContactsContacts>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ContactsGetContactsRequest Hash:{0})", Hash);
            }
        }

        public class ContactsImportContactsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ContactsImportContactsRequest;

            public List<InputContact> Contacts;
            public bool Replace;

            public ContactsImportedContacts Result;
            public override object GetResult() => Result;

            public ContactsImportContactsRequest() { }

            public ContactsImportContactsRequest(List<InputContact> Contacts, bool Replace)
            {
                this.Contacts = Contacts;
                this.Replace = Replace;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Contacts.Count);
                foreach (InputContact ContactsElement in Contacts)
                    ContactsElement.Write(writer);
                writer.Write(Replace);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<ContactsImportedContacts>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ContactsImportContactsRequest Contacts:{0} Replace:{1})", Contacts, Replace);
            }
        }

        public class ContactsDeleteContactRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ContactsDeleteContactRequest;

            public InputUser Id;

            public ContactsLink Result;
            public override object GetResult() => Result;

            public ContactsDeleteContactRequest() { }

            public ContactsDeleteContactRequest(InputUser Id)
            {
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Id.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<ContactsLink>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ContactsDeleteContactRequest Id:{0})", Id);
            }
        }

        public class ContactsDeleteContactsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ContactsDeleteContactsRequest;

            public List<InputUser> Id;

            public bool Result;
            public override object GetResult() => Result;

            public ContactsDeleteContactsRequest() { }

            public ContactsDeleteContactsRequest(List<InputUser> Id)
            {
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Id.Count);
                foreach (InputUser IdElement in Id)
                    IdElement.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ContactsDeleteContactsRequest Id:{0})", Id);
            }
        }

        public class ContactsBlockRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ContactsBlockRequest;

            public InputUser Id;

            public bool Result;
            public override object GetResult() => Result;

            public ContactsBlockRequest() { }

            public ContactsBlockRequest(InputUser Id)
            {
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Id.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ContactsBlockRequest Id:{0})", Id);
            }
        }

        public class ContactsUnblockRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ContactsUnblockRequest;

            public InputUser Id;

            public bool Result;
            public override object GetResult() => Result;

            public ContactsUnblockRequest() { }

            public ContactsUnblockRequest(InputUser Id)
            {
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Id.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ContactsUnblockRequest Id:{0})", Id);
            }
        }

        public class ContactsGetBlockedRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ContactsGetBlockedRequest;

            public int Offset;
            public int Limit;

            public ContactsBlocked Result;
            public override object GetResult() => Result;

            public ContactsGetBlockedRequest() { }

            public ContactsGetBlockedRequest(int Offset, int Limit)
            {
                this.Offset = Offset;
                this.Limit = Limit;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offset);
                writer.Write(Limit);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<ContactsBlocked>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ContactsGetBlockedRequest Offset:{0} Limit:{1})", Offset, Limit);
            }
        }

        public class ContactsExportCardRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ContactsExportCardRequest;

            public List<int> Result;
            public override object GetResult() => Result;

            public ContactsExportCardRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<List<int>>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(ContactsExportCardRequest)";
            }
        }

        public class ContactsImportCardRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ContactsImportCardRequest;

            public List<int> ExportCard;

            public User Result;
            public override object GetResult() => Result;

            public ContactsImportCardRequest() { }

            public ContactsImportCardRequest(List<int> ExportCard)
            {
                this.ExportCard = ExportCard;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(ExportCard.Count);
                foreach (int ExportCardElement in ExportCard)
                    writer.Write(ExportCardElement);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<User>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ContactsImportCardRequest ExportCard:{0})", ExportCard);
            }
        }

        public class ContactsSearchRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ContactsSearchRequest;

            public string Q;
            public int Limit;

            public ContactsFound Result;
            public override object GetResult() => Result;

            public ContactsSearchRequest() { }

            public ContactsSearchRequest(string Q, int Limit)
            {
                this.Q = Q;
                this.Limit = Limit;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Q);
                writer.Write(Limit);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<ContactsFound>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ContactsSearchRequest Q:{0} Limit:{1})", Q, Limit);
            }
        }

        public class ContactsResolveUsernameRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ContactsResolveUsernameRequest;

            public string Username;

            public ContactsResolvedPeer Result;
            public override object GetResult() => Result;

            public ContactsResolveUsernameRequest() { }

            public ContactsResolveUsernameRequest(string Username)
            {
                this.Username = Username;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Username);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<ContactsResolvedPeer>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ContactsResolveUsernameRequest Username:{0})", Username);
            }
        }

        public class ContactsGetTopPeersRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ContactsGetTopPeersRequest;

            public True Correspondents;
            public True BotsPm;
            public True BotsInline;
            public True Groups;
            public True Channels;
            public int Offset;
            public int Limit;
            public int Hash;

            public ContactsTopPeers Result;
            public override object GetResult() => Result;

            public ContactsGetTopPeersRequest() { }

            /// <summary>
            /// The following arguments can be null: Correspondents, BotsPm, BotsInline, Groups, Channels
            /// </summary>
            /// <param name="Correspondents">Can be null</param>
            /// <param name="BotsPm">Can be null</param>
            /// <param name="BotsInline">Can be null</param>
            /// <param name="Groups">Can be null</param>
            /// <param name="Channels">Can be null</param>
            /// <param name="Offset">Can NOT be null</param>
            /// <param name="Limit">Can NOT be null</param>
            /// <param name="Hash">Can NOT be null</param>
            public ContactsGetTopPeersRequest(True Correspondents, True BotsPm, True BotsInline, True Groups, True Channels, int Offset, int Limit, int Hash)
            {
                this.Correspondents = Correspondents;
                this.BotsPm = BotsPm;
                this.BotsInline = BotsInline;
                this.Groups = Groups;
                this.Channels = Channels;
                this.Offset = Offset;
                this.Limit = Limit;
                this.Hash = Hash;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (Correspondents != null ? 1 << 0 : 0) |
                    (BotsPm != null ? 1 << 1 : 0) |
                    (BotsInline != null ? 1 << 2 : 0) |
                    (Groups != null ? 1 << 10 : 0) |
                    (Channels != null ? 1 << 15 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Correspondents != null)
                {

                }

                if (BotsPm != null)
                {

                }

                if (BotsInline != null)
                {

                }

                if (Groups != null)
                {

                }

                if (Channels != null)
                {

                }

                writer.Write(Offset);
                writer.Write(Limit);
                writer.Write(Hash);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<ContactsTopPeers>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ContactsGetTopPeersRequest Correspondents:{0} BotsPm:{1} BotsInline:{2} Groups:{3} Channels:{4} Offset:{5} Limit:{6} Hash:{7})", Correspondents, BotsPm, BotsInline, Groups, Channels, Offset, Limit, Hash);
            }
        }

        public class ContactsResetTopPeerRatingRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ContactsResetTopPeerRatingRequest;

            public TopPeerCategory Category;
            public InputPeer Peer;

            public bool Result;
            public override object GetResult() => Result;

            public ContactsResetTopPeerRatingRequest() { }

            public ContactsResetTopPeerRatingRequest(TopPeerCategory Category, InputPeer Peer)
            {
                this.Category = Category;
                this.Peer = Peer;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Category.Write(writer);
                Peer.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ContactsResetTopPeerRatingRequest Category:{0} Peer:{1})", Category, Peer);
            }
        }

        public class MessagesGetMessagesRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetMessagesRequest;

            public List<int> Id;

            public MessagesMessages Result;
            public override object GetResult() => Result;

            public MessagesGetMessagesRequest() { }

            public MessagesGetMessagesRequest(List<int> Id)
            {
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Id.Count);
                foreach (int IdElement in Id)
                    writer.Write(IdElement);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesMessages>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetMessagesRequest Id:{0})", Id);
            }
        }

        public class MessagesGetDialogsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetDialogsRequest;

            public int OffsetDate;
            public int OffsetId;
            public InputPeer OffsetPeer;
            public int Limit;

            public MessagesDialogs Result;
            public override object GetResult() => Result;

            public MessagesGetDialogsRequest() { }

            public MessagesGetDialogsRequest(int OffsetDate, int OffsetId, InputPeer OffsetPeer, int Limit)
            {
                this.OffsetDate = OffsetDate;
                this.OffsetId = OffsetId;
                this.OffsetPeer = OffsetPeer;
                this.Limit = Limit;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(OffsetDate);
                writer.Write(OffsetId);
                OffsetPeer.Write(writer);
                writer.Write(Limit);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesDialogs>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetDialogsRequest OffsetDate:{0} OffsetId:{1} OffsetPeer:{2} Limit:{3})", OffsetDate, OffsetId, OffsetPeer, Limit);
            }
        }

        public class MessagesGetHistoryRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetHistoryRequest;

            public InputPeer Peer;
            public int OffsetId;
            public int OffsetDate;
            public int AddOffset;
            public int Limit;
            public int MaxId;
            public int MinId;

            public MessagesMessages Result;
            public override object GetResult() => Result;

            public MessagesGetHistoryRequest() { }

            public MessagesGetHistoryRequest(InputPeer Peer, int OffsetId, int OffsetDate, int AddOffset, int Limit, int MaxId, int MinId)
            {
                this.Peer = Peer;
                this.OffsetId = OffsetId;
                this.OffsetDate = OffsetDate;
                this.AddOffset = AddOffset;
                this.Limit = Limit;
                this.MaxId = MaxId;
                this.MinId = MinId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(OffsetId);
                writer.Write(OffsetDate);
                writer.Write(AddOffset);
                writer.Write(Limit);
                writer.Write(MaxId);
                writer.Write(MinId);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesMessages>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetHistoryRequest Peer:{0} OffsetId:{1} OffsetDate:{2} AddOffset:{3} Limit:{4} MaxId:{5} MinId:{6})", Peer, OffsetId, OffsetDate, AddOffset, Limit, MaxId, MinId);
            }
        }

        public class MessagesSearchRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSearchRequest;

            public InputPeer Peer;
            public string Q;
            public MessagesFilter Filter;
            public int MinDate;
            public int MaxDate;
            public int Offset;
            public int MaxId;
            public int Limit;

            public MessagesMessages Result;
            public override object GetResult() => Result;

            public MessagesSearchRequest() { }

            public MessagesSearchRequest(InputPeer Peer, string Q, MessagesFilter Filter, int MinDate, int MaxDate, int Offset, int MaxId, int Limit)
            {
                this.Peer = Peer;
                this.Q = Q;
                this.Filter = Filter;
                this.MinDate = MinDate;
                this.MaxDate = MaxDate;
                this.Offset = Offset;
                this.MaxId = MaxId;
                this.Limit = Limit;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(Q);
                Filter.Write(writer);
                writer.Write(MinDate);
                writer.Write(MaxDate);
                writer.Write(Offset);
                writer.Write(MaxId);
                writer.Write(Limit);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesMessages>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSearchRequest Peer:{0} Q:{1} Filter:{2} MinDate:{3} MaxDate:{4} Offset:{5} MaxId:{6} Limit:{7})", Peer, Q, Filter, MinDate, MaxDate, Offset, MaxId, Limit);
            }
        }

        public class MessagesReadHistoryRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesReadHistoryRequest;

            public InputPeer Peer;
            public int MaxId;

            public MessagesAffectedMessages Result;
            public override object GetResult() => Result;

            public MessagesReadHistoryRequest() { }

            public MessagesReadHistoryRequest(InputPeer Peer, int MaxId)
            {
                this.Peer = Peer;
                this.MaxId = MaxId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(MaxId);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesAffectedMessages>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesReadHistoryRequest Peer:{0} MaxId:{1})", Peer, MaxId);
            }
        }

        public class MessagesDeleteHistoryRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesDeleteHistoryRequest;

            public True JustClear;
            public InputPeer Peer;
            public int MaxId;

            public MessagesAffectedHistory Result;
            public override object GetResult() => Result;

            public MessagesDeleteHistoryRequest() { }

            /// <summary>
            /// The following arguments can be null: JustClear
            /// </summary>
            /// <param name="JustClear">Can be null</param>
            /// <param name="Peer">Can NOT be null</param>
            /// <param name="MaxId">Can NOT be null</param>
            public MessagesDeleteHistoryRequest(True JustClear, InputPeer Peer, int MaxId)
            {
                this.JustClear = JustClear;
                this.Peer = Peer;
                this.MaxId = MaxId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (JustClear != null ? 1 << 0 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (JustClear != null)
                {

                }

                Peer.Write(writer);
                writer.Write(MaxId);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesAffectedHistory>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesDeleteHistoryRequest JustClear:{0} Peer:{1} MaxId:{2})", JustClear, Peer, MaxId);
            }
        }

        public class MessagesDeleteMessagesRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesDeleteMessagesRequest;

            public List<int> Id;

            public MessagesAffectedMessages Result;
            public override object GetResult() => Result;

            public MessagesDeleteMessagesRequest() { }

            public MessagesDeleteMessagesRequest(List<int> Id)
            {
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Id.Count);
                foreach (int IdElement in Id)
                    writer.Write(IdElement);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesAffectedMessages>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesDeleteMessagesRequest Id:{0})", Id);
            }
        }

        public class MessagesReceivedMessagesRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesReceivedMessagesRequest;

            public int MaxId;

            public List<ReceivedNotifyMessage> Result;
            public override object GetResult() => Result;

            public MessagesReceivedMessagesRequest() { }

            public MessagesReceivedMessagesRequest(int MaxId)
            {
                this.MaxId = MaxId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(MaxId);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<List<ReceivedNotifyMessage>>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesReceivedMessagesRequest MaxId:{0})", MaxId);
            }
        }

        public class MessagesSetTypingRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSetTypingRequest;

            public InputPeer Peer;
            public SendMessageAction Action;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesSetTypingRequest() { }

            public MessagesSetTypingRequest(InputPeer Peer, SendMessageAction Action)
            {
                this.Peer = Peer;
                this.Action = Action;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                Action.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSetTypingRequest Peer:{0} Action:{1})", Peer, Action);
            }
        }

        public class MessagesSendMessageRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSendMessageRequest;

            public True NoWebpage;
            public True Silent;
            public True Background;
            public True ClearDraft;
            public InputPeer Peer;
            public int? ReplyToMsgId;
            public string Message;
            public long RandomId;
            public ReplyMarkup ReplyMarkup;
            public List<MessageEntity> Entities;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesSendMessageRequest() { }

            /// <summary>
            /// The following arguments can be null: NoWebpage, Silent, Background, ClearDraft, ReplyToMsgId, ReplyMarkup, Entities
            /// </summary>
            /// <param name="NoWebpage">Can be null</param>
            /// <param name="Silent">Can be null</param>
            /// <param name="Background">Can be null</param>
            /// <param name="ClearDraft">Can be null</param>
            /// <param name="Peer">Can NOT be null</param>
            /// <param name="ReplyToMsgId">Can be null</param>
            /// <param name="Message">Can NOT be null</param>
            /// <param name="RandomId">Can NOT be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            /// <param name="Entities">Can be null</param>
            public MessagesSendMessageRequest(True NoWebpage, True Silent, True Background, True ClearDraft, InputPeer Peer, int? ReplyToMsgId, string Message, long RandomId, ReplyMarkup ReplyMarkup, List<MessageEntity> Entities)
            {
                this.NoWebpage = NoWebpage;
                this.Silent = Silent;
                this.Background = Background;
                this.ClearDraft = ClearDraft;
                this.Peer = Peer;
                this.ReplyToMsgId = ReplyToMsgId;
                this.Message = Message;
                this.RandomId = RandomId;
                this.ReplyMarkup = ReplyMarkup;
                this.Entities = Entities;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (NoWebpage != null ? 1 << 1 : 0) |
                    (Silent != null ? 1 << 5 : 0) |
                    (Background != null ? 1 << 6 : 0) |
                    (ClearDraft != null ? 1 << 7 : 0) |
                    (ReplyToMsgId != null ? 1 << 0 : 0) |
                    (ReplyMarkup != null ? 1 << 2 : 0) |
                    (Entities != null ? 1 << 3 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (NoWebpage != null)
                {

                }

                if (Silent != null)
                {

                }

                if (Background != null)
                {

                }

                if (ClearDraft != null)
                {

                }

                Peer.Write(writer);
                if (ReplyToMsgId != null)
                {
                    writer.Write(ReplyToMsgId.Value);
                }

                writer.Write(Message);
                writer.Write(RandomId);
                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

                if (Entities != null)
                {
                    writer.Write(0x1cb5c415); // vector code
                    writer.Write(Entities.Count);
                    foreach (MessageEntity EntitiesElement in Entities)
                        EntitiesElement.Write(writer);
                }

            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSendMessageRequest NoWebpage:{0} Silent:{1} Background:{2} ClearDraft:{3} Peer:{4} ReplyToMsgId:{5} Message:{6} RandomId:{7} ReplyMarkup:{8} Entities:{9})", NoWebpage, Silent, Background, ClearDraft, Peer, ReplyToMsgId, Message, RandomId, ReplyMarkup, Entities);
            }
        }

        public class MessagesSendMediaRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSendMediaRequest;

            public True Silent;
            public True Background;
            public True ClearDraft;
            public InputPeer Peer;
            public int? ReplyToMsgId;
            public InputMedia Media;
            public long RandomId;
            public ReplyMarkup ReplyMarkup;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesSendMediaRequest() { }

            /// <summary>
            /// The following arguments can be null: Silent, Background, ClearDraft, ReplyToMsgId, ReplyMarkup
            /// </summary>
            /// <param name="Silent">Can be null</param>
            /// <param name="Background">Can be null</param>
            /// <param name="ClearDraft">Can be null</param>
            /// <param name="Peer">Can NOT be null</param>
            /// <param name="ReplyToMsgId">Can be null</param>
            /// <param name="Media">Can NOT be null</param>
            /// <param name="RandomId">Can NOT be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            public MessagesSendMediaRequest(True Silent, True Background, True ClearDraft, InputPeer Peer, int? ReplyToMsgId, InputMedia Media, long RandomId, ReplyMarkup ReplyMarkup)
            {
                this.Silent = Silent;
                this.Background = Background;
                this.ClearDraft = ClearDraft;
                this.Peer = Peer;
                this.ReplyToMsgId = ReplyToMsgId;
                this.Media = Media;
                this.RandomId = RandomId;
                this.ReplyMarkup = ReplyMarkup;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (Silent != null ? 1 << 5 : 0) |
                    (Background != null ? 1 << 6 : 0) |
                    (ClearDraft != null ? 1 << 7 : 0) |
                    (ReplyToMsgId != null ? 1 << 0 : 0) |
                    (ReplyMarkup != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Silent != null)
                {

                }

                if (Background != null)
                {

                }

                if (ClearDraft != null)
                {

                }

                Peer.Write(writer);
                if (ReplyToMsgId != null)
                {
                    writer.Write(ReplyToMsgId.Value);
                }

                Media.Write(writer);
                writer.Write(RandomId);
                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSendMediaRequest Silent:{0} Background:{1} ClearDraft:{2} Peer:{3} ReplyToMsgId:{4} Media:{5} RandomId:{6} ReplyMarkup:{7})", Silent, Background, ClearDraft, Peer, ReplyToMsgId, Media, RandomId, ReplyMarkup);
            }
        }

        public class MessagesForwardMessagesRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesForwardMessagesRequest;

            public True Silent;
            public True Background;
            public InputPeer FromPeer;
            public List<int> Id;
            public List<long> RandomId;
            public InputPeer ToPeer;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesForwardMessagesRequest() { }

            /// <summary>
            /// The following arguments can be null: Silent, Background
            /// </summary>
            /// <param name="Silent">Can be null</param>
            /// <param name="Background">Can be null</param>
            /// <param name="FromPeer">Can NOT be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="RandomId">Can NOT be null</param>
            /// <param name="ToPeer">Can NOT be null</param>
            public MessagesForwardMessagesRequest(True Silent, True Background, InputPeer FromPeer, List<int> Id, List<long> RandomId, InputPeer ToPeer)
            {
                this.Silent = Silent;
                this.Background = Background;
                this.FromPeer = FromPeer;
                this.Id = Id;
                this.RandomId = RandomId;
                this.ToPeer = ToPeer;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (Silent != null ? 1 << 5 : 0) |
                    (Background != null ? 1 << 6 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Silent != null)
                {

                }

                if (Background != null)
                {

                }

                FromPeer.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Id.Count);
                foreach (int IdElement in Id)
                    writer.Write(IdElement);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(RandomId.Count);
                foreach (long RandomIdElement in RandomId)
                    writer.Write(RandomIdElement);
                ToPeer.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesForwardMessagesRequest Silent:{0} Background:{1} FromPeer:{2} Id:{3} RandomId:{4} ToPeer:{5})", Silent, Background, FromPeer, Id, RandomId, ToPeer);
            }
        }

        public class MessagesReportSpamRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesReportSpamRequest;

            public InputPeer Peer;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesReportSpamRequest() { }

            public MessagesReportSpamRequest(InputPeer Peer)
            {
                this.Peer = Peer;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesReportSpamRequest Peer:{0})", Peer);
            }
        }

        public class MessagesHideReportSpamRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesHideReportSpamRequest;

            public InputPeer Peer;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesHideReportSpamRequest() { }

            public MessagesHideReportSpamRequest(InputPeer Peer)
            {
                this.Peer = Peer;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesHideReportSpamRequest Peer:{0})", Peer);
            }
        }

        public class MessagesGetPeerSettingsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetPeerSettingsRequest;

            public InputPeer Peer;

            public PeerSettings Result;
            public override object GetResult() => Result;

            public MessagesGetPeerSettingsRequest() { }

            public MessagesGetPeerSettingsRequest(InputPeer Peer)
            {
                this.Peer = Peer;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<PeerSettings>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetPeerSettingsRequest Peer:{0})", Peer);
            }
        }

        public class MessagesGetChatsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetChatsRequest;

            public List<int> Id;

            public MessagesChats Result;
            public override object GetResult() => Result;

            public MessagesGetChatsRequest() { }

            public MessagesGetChatsRequest(List<int> Id)
            {
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Id.Count);
                foreach (int IdElement in Id)
                    writer.Write(IdElement);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesChats>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetChatsRequest Id:{0})", Id);
            }
        }

        public class MessagesGetFullChatRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetFullChatRequest;

            public int ChatId;

            public MessagesChatFull Result;
            public override object GetResult() => Result;

            public MessagesGetFullChatRequest() { }

            public MessagesGetFullChatRequest(int ChatId)
            {
                this.ChatId = ChatId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesChatFull>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetFullChatRequest ChatId:{0})", ChatId);
            }
        }

        public class MessagesEditChatTitleRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesEditChatTitleRequest;

            public int ChatId;
            public string Title;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesEditChatTitleRequest() { }

            public MessagesEditChatTitleRequest(int ChatId, string Title)
            {
                this.ChatId = ChatId;
                this.Title = Title;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
                writer.Write(Title);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesEditChatTitleRequest ChatId:{0} Title:{1})", ChatId, Title);
            }
        }

        public class MessagesEditChatPhotoRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesEditChatPhotoRequest;

            public int ChatId;
            public InputChatPhoto Photo;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesEditChatPhotoRequest() { }

            public MessagesEditChatPhotoRequest(int ChatId, InputChatPhoto Photo)
            {
                this.ChatId = ChatId;
                this.Photo = Photo;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
                Photo.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesEditChatPhotoRequest ChatId:{0} Photo:{1})", ChatId, Photo);
            }
        }

        public class MessagesAddChatUserRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesAddChatUserRequest;

            public int ChatId;
            public InputUser UserId;
            public int FwdLimit;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesAddChatUserRequest() { }

            public MessagesAddChatUserRequest(int ChatId, InputUser UserId, int FwdLimit)
            {
                this.ChatId = ChatId;
                this.UserId = UserId;
                this.FwdLimit = FwdLimit;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
                UserId.Write(writer);
                writer.Write(FwdLimit);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesAddChatUserRequest ChatId:{0} UserId:{1} FwdLimit:{2})", ChatId, UserId, FwdLimit);
            }
        }

        public class MessagesDeleteChatUserRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesDeleteChatUserRequest;

            public int ChatId;
            public InputUser UserId;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesDeleteChatUserRequest() { }

            public MessagesDeleteChatUserRequest(int ChatId, InputUser UserId)
            {
                this.ChatId = ChatId;
                this.UserId = UserId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
                UserId.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesDeleteChatUserRequest ChatId:{0} UserId:{1})", ChatId, UserId);
            }
        }

        public class MessagesCreateChatRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesCreateChatRequest;

            public List<InputUser> Users;
            public string Title;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesCreateChatRequest() { }

            public MessagesCreateChatRequest(List<InputUser> Users, string Title)
            {
                this.Users = Users;
                this.Title = Title;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (InputUser UsersElement in Users)
                    UsersElement.Write(writer);
                writer.Write(Title);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesCreateChatRequest Users:{0} Title:{1})", Users, Title);
            }
        }

        public class MessagesForwardMessageRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesForwardMessageRequest;

            public InputPeer Peer;
            public int Id;
            public long RandomId;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesForwardMessageRequest() { }

            public MessagesForwardMessageRequest(InputPeer Peer, int Id, long RandomId)
            {
                this.Peer = Peer;
                this.Id = Id;
                this.RandomId = RandomId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(Id);
                writer.Write(RandomId);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesForwardMessageRequest Peer:{0} Id:{1} RandomId:{2})", Peer, Id, RandomId);
            }
        }

        public class MessagesSendBroadcastRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSendBroadcastRequest;

            public List<InputUser> Contacts;
            public List<long> RandomId;
            public string Message;
            public InputMedia Media;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesSendBroadcastRequest() { }

            public MessagesSendBroadcastRequest(List<InputUser> Contacts, List<long> RandomId, string Message, InputMedia Media)
            {
                this.Contacts = Contacts;
                this.RandomId = RandomId;
                this.Message = Message;
                this.Media = Media;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Contacts.Count);
                foreach (InputUser ContactsElement in Contacts)
                    ContactsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(RandomId.Count);
                foreach (long RandomIdElement in RandomId)
                    writer.Write(RandomIdElement);
                writer.Write(Message);
                Media.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSendBroadcastRequest Contacts:{0} RandomId:{1} Message:{2} Media:{3})", Contacts, RandomId, Message, Media);
            }
        }

        public class MessagesGetDhConfigRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetDhConfigRequest;

            public int Version;
            public int RandomLength;

            public MessagesDhConfig Result;
            public override object GetResult() => Result;

            public MessagesGetDhConfigRequest() { }

            public MessagesGetDhConfigRequest(int Version, int RandomLength)
            {
                this.Version = Version;
                this.RandomLength = RandomLength;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Version);
                writer.Write(RandomLength);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesDhConfig>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetDhConfigRequest Version:{0} RandomLength:{1})", Version, RandomLength);
            }
        }

        public class MessagesRequestEncryptionRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesRequestEncryptionRequest;

            public InputUser UserId;
            public int RandomId;
            public byte[] GA;

            public EncryptedChat Result;
            public override object GetResult() => Result;

            public MessagesRequestEncryptionRequest() { }

            public MessagesRequestEncryptionRequest(InputUser UserId, int RandomId, byte[] GA)
            {
                this.UserId = UserId;
                this.RandomId = RandomId;
                this.GA = GA;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                UserId.Write(writer);
                writer.Write(RandomId);
                writer.Write(GA);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<EncryptedChat>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesRequestEncryptionRequest UserId:{0} RandomId:{1} GA:{2})", UserId, RandomId, GA);
            }
        }

        public class MessagesAcceptEncryptionRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesAcceptEncryptionRequest;

            public InputEncryptedChat Peer;
            public byte[] GB;
            public long KeyFingerprint;

            public EncryptedChat Result;
            public override object GetResult() => Result;

            public MessagesAcceptEncryptionRequest() { }

            public MessagesAcceptEncryptionRequest(InputEncryptedChat Peer, byte[] GB, long KeyFingerprint)
            {
                this.Peer = Peer;
                this.GB = GB;
                this.KeyFingerprint = KeyFingerprint;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(GB);
                writer.Write(KeyFingerprint);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<EncryptedChat>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesAcceptEncryptionRequest Peer:{0} GB:{1} KeyFingerprint:{2})", Peer, GB, KeyFingerprint);
            }
        }

        public class MessagesDiscardEncryptionRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesDiscardEncryptionRequest;

            public int ChatId;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesDiscardEncryptionRequest() { }

            public MessagesDiscardEncryptionRequest(int ChatId)
            {
                this.ChatId = ChatId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesDiscardEncryptionRequest ChatId:{0})", ChatId);
            }
        }

        public class MessagesSetEncryptedTypingRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSetEncryptedTypingRequest;

            public InputEncryptedChat Peer;
            public bool Typing;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesSetEncryptedTypingRequest() { }

            public MessagesSetEncryptedTypingRequest(InputEncryptedChat Peer, bool Typing)
            {
                this.Peer = Peer;
                this.Typing = Typing;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(Typing);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSetEncryptedTypingRequest Peer:{0} Typing:{1})", Peer, Typing);
            }
        }

        public class MessagesReadEncryptedHistoryRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesReadEncryptedHistoryRequest;

            public InputEncryptedChat Peer;
            public int MaxDate;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesReadEncryptedHistoryRequest() { }

            public MessagesReadEncryptedHistoryRequest(InputEncryptedChat Peer, int MaxDate)
            {
                this.Peer = Peer;
                this.MaxDate = MaxDate;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(MaxDate);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesReadEncryptedHistoryRequest Peer:{0} MaxDate:{1})", Peer, MaxDate);
            }
        }

        public class MessagesSendEncryptedRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSendEncryptedRequest;

            public InputEncryptedChat Peer;
            public long RandomId;
            public byte[] Data;

            public MessagesSentEncryptedMessage Result;
            public override object GetResult() => Result;

            public MessagesSendEncryptedRequest() { }

            public MessagesSendEncryptedRequest(InputEncryptedChat Peer, long RandomId, byte[] Data)
            {
                this.Peer = Peer;
                this.RandomId = RandomId;
                this.Data = Data;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(RandomId);
                writer.Write(Data);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesSentEncryptedMessage>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSendEncryptedRequest Peer:{0} RandomId:{1} Data:{2})", Peer, RandomId, Data);
            }
        }

        public class MessagesSendEncryptedFileRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSendEncryptedFileRequest;

            public InputEncryptedChat Peer;
            public long RandomId;
            public byte[] Data;
            public InputEncryptedFile File;

            public MessagesSentEncryptedMessage Result;
            public override object GetResult() => Result;

            public MessagesSendEncryptedFileRequest() { }

            public MessagesSendEncryptedFileRequest(InputEncryptedChat Peer, long RandomId, byte[] Data, InputEncryptedFile File)
            {
                this.Peer = Peer;
                this.RandomId = RandomId;
                this.Data = Data;
                this.File = File;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(RandomId);
                writer.Write(Data);
                File.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesSentEncryptedMessage>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSendEncryptedFileRequest Peer:{0} RandomId:{1} Data:{2} File:{3})", Peer, RandomId, Data, File);
            }
        }

        public class MessagesSendEncryptedServiceRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSendEncryptedServiceRequest;

            public InputEncryptedChat Peer;
            public long RandomId;
            public byte[] Data;

            public MessagesSentEncryptedMessage Result;
            public override object GetResult() => Result;

            public MessagesSendEncryptedServiceRequest() { }

            public MessagesSendEncryptedServiceRequest(InputEncryptedChat Peer, long RandomId, byte[] Data)
            {
                this.Peer = Peer;
                this.RandomId = RandomId;
                this.Data = Data;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(RandomId);
                writer.Write(Data);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesSentEncryptedMessage>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSendEncryptedServiceRequest Peer:{0} RandomId:{1} Data:{2})", Peer, RandomId, Data);
            }
        }

        public class MessagesReceivedQueueRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesReceivedQueueRequest;

            public int MaxQts;

            public List<long> Result;
            public override object GetResult() => Result;

            public MessagesReceivedQueueRequest() { }

            public MessagesReceivedQueueRequest(int MaxQts)
            {
                this.MaxQts = MaxQts;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(MaxQts);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<List<long>>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesReceivedQueueRequest MaxQts:{0})", MaxQts);
            }
        }

        public class MessagesReadMessageContentsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesReadMessageContentsRequest;

            public List<int> Id;

            public MessagesAffectedMessages Result;
            public override object GetResult() => Result;

            public MessagesReadMessageContentsRequest() { }

            public MessagesReadMessageContentsRequest(List<int> Id)
            {
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Id.Count);
                foreach (int IdElement in Id)
                    writer.Write(IdElement);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesAffectedMessages>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesReadMessageContentsRequest Id:{0})", Id);
            }
        }

        public class MessagesGetStickersRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetStickersRequest;

            public string Emoticon;
            public string Hash;

            public MessagesStickers Result;
            public override object GetResult() => Result;

            public MessagesGetStickersRequest() { }

            public MessagesGetStickersRequest(string Emoticon, string Hash)
            {
                this.Emoticon = Emoticon;
                this.Hash = Hash;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Emoticon);
                writer.Write(Hash);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesStickers>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetStickersRequest Emoticon:{0} Hash:{1})", Emoticon, Hash);
            }
        }

        public class MessagesGetAllStickersRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetAllStickersRequest;

            public int Hash;

            public MessagesAllStickers Result;
            public override object GetResult() => Result;

            public MessagesGetAllStickersRequest() { }

            public MessagesGetAllStickersRequest(int Hash)
            {
                this.Hash = Hash;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Hash);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesAllStickers>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetAllStickersRequest Hash:{0})", Hash);
            }
        }

        public class MessagesGetWebPagePreviewRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetWebPagePreviewRequest;

            public string Message;

            public MessageMedia Result;
            public override object GetResult() => Result;

            public MessagesGetWebPagePreviewRequest() { }

            public MessagesGetWebPagePreviewRequest(string Message)
            {
                this.Message = Message;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Message);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessageMedia>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetWebPagePreviewRequest Message:{0})", Message);
            }
        }

        public class MessagesExportChatInviteRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesExportChatInviteRequest;

            public int ChatId;

            public ExportedChatInvite Result;
            public override object GetResult() => Result;

            public MessagesExportChatInviteRequest() { }

            public MessagesExportChatInviteRequest(int ChatId)
            {
                this.ChatId = ChatId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<ExportedChatInvite>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesExportChatInviteRequest ChatId:{0})", ChatId);
            }
        }

        public class MessagesCheckChatInviteRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesCheckChatInviteRequest;

            public string Hash;

            public ChatInvite Result;
            public override object GetResult() => Result;

            public MessagesCheckChatInviteRequest() { }

            public MessagesCheckChatInviteRequest(string Hash)
            {
                this.Hash = Hash;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Hash);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<ChatInvite>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesCheckChatInviteRequest Hash:{0})", Hash);
            }
        }

        public class MessagesImportChatInviteRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesImportChatInviteRequest;

            public string Hash;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesImportChatInviteRequest() { }

            public MessagesImportChatInviteRequest(string Hash)
            {
                this.Hash = Hash;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Hash);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesImportChatInviteRequest Hash:{0})", Hash);
            }
        }

        public class MessagesGetStickerSetRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetStickerSetRequest;

            public InputStickerSet Stickerset;

            public MessagesStickerSet Result;
            public override object GetResult() => Result;

            public MessagesGetStickerSetRequest() { }

            public MessagesGetStickerSetRequest(InputStickerSet Stickerset)
            {
                this.Stickerset = Stickerset;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Stickerset.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesStickerSet>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetStickerSetRequest Stickerset:{0})", Stickerset);
            }
        }

        public class MessagesInstallStickerSetRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesInstallStickerSetRequest;

            public InputStickerSet Stickerset;
            public bool Disabled;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesInstallStickerSetRequest() { }

            public MessagesInstallStickerSetRequest(InputStickerSet Stickerset, bool Disabled)
            {
                this.Stickerset = Stickerset;
                this.Disabled = Disabled;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Stickerset.Write(writer);
                writer.Write(Disabled);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesInstallStickerSetRequest Stickerset:{0} Disabled:{1})", Stickerset, Disabled);
            }
        }

        public class MessagesUninstallStickerSetRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesUninstallStickerSetRequest;

            public InputStickerSet Stickerset;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesUninstallStickerSetRequest() { }

            public MessagesUninstallStickerSetRequest(InputStickerSet Stickerset)
            {
                this.Stickerset = Stickerset;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Stickerset.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesUninstallStickerSetRequest Stickerset:{0})", Stickerset);
            }
        }

        public class MessagesStartBotRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesStartBotRequest;

            public InputUser Bot;
            public InputPeer Peer;
            public long RandomId;
            public string StartParam;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesStartBotRequest() { }

            public MessagesStartBotRequest(InputUser Bot, InputPeer Peer, long RandomId, string StartParam)
            {
                this.Bot = Bot;
                this.Peer = Peer;
                this.RandomId = RandomId;
                this.StartParam = StartParam;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Bot.Write(writer);
                Peer.Write(writer);
                writer.Write(RandomId);
                writer.Write(StartParam);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesStartBotRequest Bot:{0} Peer:{1} RandomId:{2} StartParam:{3})", Bot, Peer, RandomId, StartParam);
            }
        }

        public class MessagesGetMessagesViewsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetMessagesViewsRequest;

            public InputPeer Peer;
            public List<int> Id;
            public bool Increment;

            public List<int> Result;
            public override object GetResult() => Result;

            public MessagesGetMessagesViewsRequest() { }

            public MessagesGetMessagesViewsRequest(InputPeer Peer, List<int> Id, bool Increment)
            {
                this.Peer = Peer;
                this.Id = Id;
                this.Increment = Increment;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Id.Count);
                foreach (int IdElement in Id)
                    writer.Write(IdElement);
                writer.Write(Increment);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<List<int>>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetMessagesViewsRequest Peer:{0} Id:{1} Increment:{2})", Peer, Id, Increment);
            }
        }

        public class MessagesToggleChatAdminsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesToggleChatAdminsRequest;

            public int ChatId;
            public bool Enabled;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesToggleChatAdminsRequest() { }

            public MessagesToggleChatAdminsRequest(int ChatId, bool Enabled)
            {
                this.ChatId = ChatId;
                this.Enabled = Enabled;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
                writer.Write(Enabled);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesToggleChatAdminsRequest ChatId:{0} Enabled:{1})", ChatId, Enabled);
            }
        }

        public class MessagesEditChatAdminRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesEditChatAdminRequest;

            public int ChatId;
            public InputUser UserId;
            public bool IsAdmin;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesEditChatAdminRequest() { }

            public MessagesEditChatAdminRequest(int ChatId, InputUser UserId, bool IsAdmin)
            {
                this.ChatId = ChatId;
                this.UserId = UserId;
                this.IsAdmin = IsAdmin;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
                UserId.Write(writer);
                writer.Write(IsAdmin);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesEditChatAdminRequest ChatId:{0} UserId:{1} IsAdmin:{2})", ChatId, UserId, IsAdmin);
            }
        }

        public class MessagesMigrateChatRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesMigrateChatRequest;

            public int ChatId;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesMigrateChatRequest() { }

            public MessagesMigrateChatRequest(int ChatId)
            {
                this.ChatId = ChatId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesMigrateChatRequest ChatId:{0})", ChatId);
            }
        }

        public class MessagesSearchGlobalRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSearchGlobalRequest;

            public string Q;
            public int OffsetDate;
            public InputPeer OffsetPeer;
            public int OffsetId;
            public int Limit;

            public MessagesMessages Result;
            public override object GetResult() => Result;

            public MessagesSearchGlobalRequest() { }

            public MessagesSearchGlobalRequest(string Q, int OffsetDate, InputPeer OffsetPeer, int OffsetId, int Limit)
            {
                this.Q = Q;
                this.OffsetDate = OffsetDate;
                this.OffsetPeer = OffsetPeer;
                this.OffsetId = OffsetId;
                this.Limit = Limit;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Q);
                writer.Write(OffsetDate);
                OffsetPeer.Write(writer);
                writer.Write(OffsetId);
                writer.Write(Limit);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesMessages>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSearchGlobalRequest Q:{0} OffsetDate:{1} OffsetPeer:{2} OffsetId:{3} Limit:{4})", Q, OffsetDate, OffsetPeer, OffsetId, Limit);
            }
        }

        public class MessagesReorderStickerSetsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesReorderStickerSetsRequest;

            public List<long> Order;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesReorderStickerSetsRequest() { }

            public MessagesReorderStickerSetsRequest(List<long> Order)
            {
                this.Order = Order;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Order.Count);
                foreach (long OrderElement in Order)
                    writer.Write(OrderElement);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesReorderStickerSetsRequest Order:{0})", Order);
            }
        }

        public class MessagesGetDocumentByHashRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetDocumentByHashRequest;

            public byte[] Sha256;
            public int Size;
            public string MimeType;

            public Document Result;
            public override object GetResult() => Result;

            public MessagesGetDocumentByHashRequest() { }

            public MessagesGetDocumentByHashRequest(byte[] Sha256, int Size, string MimeType)
            {
                this.Sha256 = Sha256;
                this.Size = Size;
                this.MimeType = MimeType;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Sha256);
                writer.Write(Size);
                writer.Write(MimeType);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Document>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetDocumentByHashRequest Sha256:{0} Size:{1} MimeType:{2})", Sha256, Size, MimeType);
            }
        }

        public class MessagesSearchGifsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSearchGifsRequest;

            public string Q;
            public int Offset;

            public MessagesFoundGifs Result;
            public override object GetResult() => Result;

            public MessagesSearchGifsRequest() { }

            public MessagesSearchGifsRequest(string Q, int Offset)
            {
                this.Q = Q;
                this.Offset = Offset;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Q);
                writer.Write(Offset);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesFoundGifs>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSearchGifsRequest Q:{0} Offset:{1})", Q, Offset);
            }
        }

        public class MessagesGetSavedGifsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetSavedGifsRequest;

            public int Hash;

            public MessagesSavedGifs Result;
            public override object GetResult() => Result;

            public MessagesGetSavedGifsRequest() { }

            public MessagesGetSavedGifsRequest(int Hash)
            {
                this.Hash = Hash;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Hash);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesSavedGifs>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetSavedGifsRequest Hash:{0})", Hash);
            }
        }

        public class MessagesSaveGifRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSaveGifRequest;

            public InputDocument Id;
            public bool Unsave;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesSaveGifRequest() { }

            public MessagesSaveGifRequest(InputDocument Id, bool Unsave)
            {
                this.Id = Id;
                this.Unsave = Unsave;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Id.Write(writer);
                writer.Write(Unsave);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSaveGifRequest Id:{0} Unsave:{1})", Id, Unsave);
            }
        }

        public class MessagesGetInlineBotResultsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetInlineBotResultsRequest;

            public InputUser Bot;
            public InputPeer Peer;
            public InputGeoPoint GeoPoint;
            public string Query;
            public string Offset;

            public MessagesBotResults Result;
            public override object GetResult() => Result;

            public MessagesGetInlineBotResultsRequest() { }

            /// <summary>
            /// The following arguments can be null: GeoPoint
            /// </summary>
            /// <param name="Bot">Can NOT be null</param>
            /// <param name="Peer">Can NOT be null</param>
            /// <param name="GeoPoint">Can be null</param>
            /// <param name="Query">Can NOT be null</param>
            /// <param name="Offset">Can NOT be null</param>
            public MessagesGetInlineBotResultsRequest(InputUser Bot, InputPeer Peer, InputGeoPoint GeoPoint, string Query, string Offset)
            {
                this.Bot = Bot;
                this.Peer = Peer;
                this.GeoPoint = GeoPoint;
                this.Query = Query;
                this.Offset = Offset;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (GeoPoint != null ? 1 << 0 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                Bot.Write(writer);
                Peer.Write(writer);
                if (GeoPoint != null)
                {
                    GeoPoint.Write(writer);
                }

                writer.Write(Query);
                writer.Write(Offset);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesBotResults>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetInlineBotResultsRequest Bot:{0} Peer:{1} GeoPoint:{2} Query:{3} Offset:{4})", Bot, Peer, GeoPoint, Query, Offset);
            }
        }

        public class MessagesSetInlineBotResultsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSetInlineBotResultsRequest;

            public True Gallery;
            public True Private;
            public long QueryId;
            public List<InputBotInlineResult> Results;
            public int CacheTime;
            public string NextOffset;
            public InlineBotSwitchPM SwitchPm;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesSetInlineBotResultsRequest() { }

            /// <summary>
            /// The following arguments can be null: Gallery, Private, NextOffset, SwitchPm
            /// </summary>
            /// <param name="Gallery">Can be null</param>
            /// <param name="Private">Can be null</param>
            /// <param name="QueryId">Can NOT be null</param>
            /// <param name="Results">Can NOT be null</param>
            /// <param name="CacheTime">Can NOT be null</param>
            /// <param name="NextOffset">Can be null</param>
            /// <param name="SwitchPm">Can be null</param>
            public MessagesSetInlineBotResultsRequest(True Gallery, True Private, long QueryId, List<InputBotInlineResult> Results, int CacheTime, string NextOffset, InlineBotSwitchPM SwitchPm)
            {
                this.Gallery = Gallery;
                this.Private = Private;
                this.QueryId = QueryId;
                this.Results = Results;
                this.CacheTime = CacheTime;
                this.NextOffset = NextOffset;
                this.SwitchPm = SwitchPm;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (Gallery != null ? 1 << 0 : 0) |
                    (Private != null ? 1 << 1 : 0) |
                    (NextOffset != null ? 1 << 2 : 0) |
                    (SwitchPm != null ? 1 << 3 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Gallery != null)
                {

                }

                if (Private != null)
                {

                }

                writer.Write(QueryId);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Results.Count);
                foreach (InputBotInlineResult ResultsElement in Results)
                    ResultsElement.Write(writer);
                writer.Write(CacheTime);
                if (NextOffset != null)
                {
                    writer.Write(NextOffset);
                }

                if (SwitchPm != null)
                {
                    SwitchPm.Write(writer);
                }

            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSetInlineBotResultsRequest Gallery:{0} Private:{1} QueryId:{2} Results:{3} CacheTime:{4} NextOffset:{5} SwitchPm:{6})", Gallery, Private, QueryId, Results, CacheTime, NextOffset, SwitchPm);
            }
        }

        public class MessagesSendInlineBotResultRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSendInlineBotResultRequest;

            public True Silent;
            public True Background;
            public True ClearDraft;
            public InputPeer Peer;
            public int? ReplyToMsgId;
            public long RandomId;
            public long QueryId;
            public string Id;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesSendInlineBotResultRequest() { }

            /// <summary>
            /// The following arguments can be null: Silent, Background, ClearDraft, ReplyToMsgId
            /// </summary>
            /// <param name="Silent">Can be null</param>
            /// <param name="Background">Can be null</param>
            /// <param name="ClearDraft">Can be null</param>
            /// <param name="Peer">Can NOT be null</param>
            /// <param name="ReplyToMsgId">Can be null</param>
            /// <param name="RandomId">Can NOT be null</param>
            /// <param name="QueryId">Can NOT be null</param>
            /// <param name="Id">Can NOT be null</param>
            public MessagesSendInlineBotResultRequest(True Silent, True Background, True ClearDraft, InputPeer Peer, int? ReplyToMsgId, long RandomId, long QueryId, string Id)
            {
                this.Silent = Silent;
                this.Background = Background;
                this.ClearDraft = ClearDraft;
                this.Peer = Peer;
                this.ReplyToMsgId = ReplyToMsgId;
                this.RandomId = RandomId;
                this.QueryId = QueryId;
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (Silent != null ? 1 << 5 : 0) |
                    (Background != null ? 1 << 6 : 0) |
                    (ClearDraft != null ? 1 << 7 : 0) |
                    (ReplyToMsgId != null ? 1 << 0 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Silent != null)
                {

                }

                if (Background != null)
                {

                }

                if (ClearDraft != null)
                {

                }

                Peer.Write(writer);
                if (ReplyToMsgId != null)
                {
                    writer.Write(ReplyToMsgId.Value);
                }

                writer.Write(RandomId);
                writer.Write(QueryId);
                writer.Write(Id);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSendInlineBotResultRequest Silent:{0} Background:{1} ClearDraft:{2} Peer:{3} ReplyToMsgId:{4} RandomId:{5} QueryId:{6} Id:{7})", Silent, Background, ClearDraft, Peer, ReplyToMsgId, RandomId, QueryId, Id);
            }
        }

        public class MessagesGetMessageEditDataRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetMessageEditDataRequest;

            public InputPeer Peer;
            public int Id;

            public MessagesMessageEditData Result;
            public override object GetResult() => Result;

            public MessagesGetMessageEditDataRequest() { }

            public MessagesGetMessageEditDataRequest(InputPeer Peer, int Id)
            {
                this.Peer = Peer;
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(Id);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesMessageEditData>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetMessageEditDataRequest Peer:{0} Id:{1})", Peer, Id);
            }
        }

        public class MessagesEditMessageRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesEditMessageRequest;

            public True NoWebpage;
            public InputPeer Peer;
            public int Id;
            public string Message;
            public ReplyMarkup ReplyMarkup;
            public List<MessageEntity> Entities;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesEditMessageRequest() { }

            /// <summary>
            /// The following arguments can be null: NoWebpage, Message, ReplyMarkup, Entities
            /// </summary>
            /// <param name="NoWebpage">Can be null</param>
            /// <param name="Peer">Can NOT be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="Message">Can be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            /// <param name="Entities">Can be null</param>
            public MessagesEditMessageRequest(True NoWebpage, InputPeer Peer, int Id, string Message, ReplyMarkup ReplyMarkup, List<MessageEntity> Entities)
            {
                this.NoWebpage = NoWebpage;
                this.Peer = Peer;
                this.Id = Id;
                this.Message = Message;
                this.ReplyMarkup = ReplyMarkup;
                this.Entities = Entities;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (NoWebpage != null ? 1 << 1 : 0) |
                    (Message != null ? 1 << 11 : 0) |
                    (ReplyMarkup != null ? 1 << 2 : 0) |
                    (Entities != null ? 1 << 3 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (NoWebpage != null)
                {

                }

                Peer.Write(writer);
                writer.Write(Id);
                if (Message != null)
                {
                    writer.Write(Message);
                }

                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

                if (Entities != null)
                {
                    writer.Write(0x1cb5c415); // vector code
                    writer.Write(Entities.Count);
                    foreach (MessageEntity EntitiesElement in Entities)
                        EntitiesElement.Write(writer);
                }

            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesEditMessageRequest NoWebpage:{0} Peer:{1} Id:{2} Message:{3} ReplyMarkup:{4} Entities:{5})", NoWebpage, Peer, Id, Message, ReplyMarkup, Entities);
            }
        }

        public class MessagesEditInlineBotMessageRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesEditInlineBotMessageRequest;

            public True NoWebpage;
            public InputBotInlineMessageID Id;
            public string Message;
            public ReplyMarkup ReplyMarkup;
            public List<MessageEntity> Entities;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesEditInlineBotMessageRequest() { }

            /// <summary>
            /// The following arguments can be null: NoWebpage, Message, ReplyMarkup, Entities
            /// </summary>
            /// <param name="NoWebpage">Can be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="Message">Can be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            /// <param name="Entities">Can be null</param>
            public MessagesEditInlineBotMessageRequest(True NoWebpage, InputBotInlineMessageID Id, string Message, ReplyMarkup ReplyMarkup, List<MessageEntity> Entities)
            {
                this.NoWebpage = NoWebpage;
                this.Id = Id;
                this.Message = Message;
                this.ReplyMarkup = ReplyMarkup;
                this.Entities = Entities;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (NoWebpage != null ? 1 << 1 : 0) |
                    (Message != null ? 1 << 11 : 0) |
                    (ReplyMarkup != null ? 1 << 2 : 0) |
                    (Entities != null ? 1 << 3 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (NoWebpage != null)
                {

                }

                Id.Write(writer);
                if (Message != null)
                {
                    writer.Write(Message);
                }

                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

                if (Entities != null)
                {
                    writer.Write(0x1cb5c415); // vector code
                    writer.Write(Entities.Count);
                    foreach (MessageEntity EntitiesElement in Entities)
                        EntitiesElement.Write(writer);
                }

            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesEditInlineBotMessageRequest NoWebpage:{0} Id:{1} Message:{2} ReplyMarkup:{3} Entities:{4})", NoWebpage, Id, Message, ReplyMarkup, Entities);
            }
        }

        public class MessagesGetBotCallbackAnswerRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetBotCallbackAnswerRequest;

            public InputPeer Peer;
            public int MsgId;
            public byte[] Data;

            public MessagesBotCallbackAnswer Result;
            public override object GetResult() => Result;

            public MessagesGetBotCallbackAnswerRequest() { }

            public MessagesGetBotCallbackAnswerRequest(InputPeer Peer, int MsgId, byte[] Data)
            {
                this.Peer = Peer;
                this.MsgId = MsgId;
                this.Data = Data;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(MsgId);
                writer.Write(Data);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesBotCallbackAnswer>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetBotCallbackAnswerRequest Peer:{0} MsgId:{1} Data:{2})", Peer, MsgId, Data);
            }
        }

        public class MessagesSetBotCallbackAnswerRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSetBotCallbackAnswerRequest;

            public True Alert;
            public long QueryId;
            public string Message;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesSetBotCallbackAnswerRequest() { }

            /// <summary>
            /// The following arguments can be null: Alert, Message
            /// </summary>
            /// <param name="Alert">Can be null</param>
            /// <param name="QueryId">Can NOT be null</param>
            /// <param name="Message">Can be null</param>
            public MessagesSetBotCallbackAnswerRequest(True Alert, long QueryId, string Message)
            {
                this.Alert = Alert;
                this.QueryId = QueryId;
                this.Message = Message;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (Alert != null ? 1 << 1 : 0) |
                    (Message != null ? 1 << 0 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Alert != null)
                {

                }

                writer.Write(QueryId);
                if (Message != null)
                {
                    writer.Write(Message);
                }

            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSetBotCallbackAnswerRequest Alert:{0} QueryId:{1} Message:{2})", Alert, QueryId, Message);
            }
        }

        public class MessagesGetPeerDialogsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetPeerDialogsRequest;

            public List<InputPeer> Peers;

            public MessagesPeerDialogs Result;
            public override object GetResult() => Result;

            public MessagesGetPeerDialogsRequest() { }

            public MessagesGetPeerDialogsRequest(List<InputPeer> Peers)
            {
                this.Peers = Peers;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Peers.Count);
                foreach (InputPeer PeersElement in Peers)
                    PeersElement.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesPeerDialogs>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesGetPeerDialogsRequest Peers:{0})", Peers);
            }
        }

        public class MessagesSaveDraftRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesSaveDraftRequest;

            public True NoWebpage;
            public int? ReplyToMsgId;
            public InputPeer Peer;
            public string Message;
            public List<MessageEntity> Entities;

            public bool Result;
            public override object GetResult() => Result;

            public MessagesSaveDraftRequest() { }

            /// <summary>
            /// The following arguments can be null: NoWebpage, ReplyToMsgId, Entities
            /// </summary>
            /// <param name="NoWebpage">Can be null</param>
            /// <param name="ReplyToMsgId">Can be null</param>
            /// <param name="Peer">Can NOT be null</param>
            /// <param name="Message">Can NOT be null</param>
            /// <param name="Entities">Can be null</param>
            public MessagesSaveDraftRequest(True NoWebpage, int? ReplyToMsgId, InputPeer Peer, string Message, List<MessageEntity> Entities)
            {
                this.NoWebpage = NoWebpage;
                this.ReplyToMsgId = ReplyToMsgId;
                this.Peer = Peer;
                this.Message = Message;
                this.Entities = Entities;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (NoWebpage != null ? 1 << 1 : 0) |
                    (ReplyToMsgId != null ? 1 << 0 : 0) |
                    (Entities != null ? 1 << 3 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (NoWebpage != null)
                {

                }

                if (ReplyToMsgId != null)
                {
                    writer.Write(ReplyToMsgId.Value);
                }

                Peer.Write(writer);
                writer.Write(Message);
                if (Entities != null)
                {
                    writer.Write(0x1cb5c415); // vector code
                    writer.Write(Entities.Count);
                    foreach (MessageEntity EntitiesElement in Entities)
                        EntitiesElement.Write(writer);
                }

            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(MessagesSaveDraftRequest NoWebpage:{0} ReplyToMsgId:{1} Peer:{2} Message:{3} Entities:{4})", NoWebpage, ReplyToMsgId, Peer, Message, Entities);
            }
        }

        public class MessagesGetAllDraftsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.MessagesGetAllDraftsRequest;

            public Updates Result;
            public override object GetResult() => Result;

            public MessagesGetAllDraftsRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(MessagesGetAllDraftsRequest)";
            }
        }

        public class UpdatesGetStateRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.UpdatesGetStateRequest;

            public UpdatesState Result;
            public override object GetResult() => Result;

            public UpdatesGetStateRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<UpdatesState>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(UpdatesGetStateRequest)";
            }
        }

        public class UpdatesGetDifferenceRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.UpdatesGetDifferenceRequest;

            public int Pts;
            public int Date;
            public int Qts;

            public UpdatesDifference Result;
            public override object GetResult() => Result;

            public UpdatesGetDifferenceRequest() { }

            public UpdatesGetDifferenceRequest(int Pts, int Date, int Qts)
            {
                this.Pts = Pts;
                this.Date = Date;
                this.Qts = Qts;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Pts);
                writer.Write(Date);
                writer.Write(Qts);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<UpdatesDifference>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(UpdatesGetDifferenceRequest Pts:{0} Date:{1} Qts:{2})", Pts, Date, Qts);
            }
        }

        public class UpdatesGetChannelDifferenceRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.UpdatesGetChannelDifferenceRequest;

            public InputChannel Channel;
            public ChannelMessagesFilter Filter;
            public int Pts;
            public int Limit;

            public UpdatesChannelDifference Result;
            public override object GetResult() => Result;

            public UpdatesGetChannelDifferenceRequest() { }

            public UpdatesGetChannelDifferenceRequest(InputChannel Channel, ChannelMessagesFilter Filter, int Pts, int Limit)
            {
                this.Channel = Channel;
                this.Filter = Filter;
                this.Pts = Pts;
                this.Limit = Limit;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                Filter.Write(writer);
                writer.Write(Pts);
                writer.Write(Limit);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<UpdatesChannelDifference>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(UpdatesGetChannelDifferenceRequest Channel:{0} Filter:{1} Pts:{2} Limit:{3})", Channel, Filter, Pts, Limit);
            }
        }

        public class PhotosUpdateProfilePhotoRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.PhotosUpdateProfilePhotoRequest;

            public InputPhoto Id;
            public InputPhotoCrop Crop;

            public UserProfilePhoto Result;
            public override object GetResult() => Result;

            public PhotosUpdateProfilePhotoRequest() { }

            public PhotosUpdateProfilePhotoRequest(InputPhoto Id, InputPhotoCrop Crop)
            {
                this.Id = Id;
                this.Crop = Crop;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Id.Write(writer);
                Crop.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<UserProfilePhoto>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(PhotosUpdateProfilePhotoRequest Id:{0} Crop:{1})", Id, Crop);
            }
        }

        public class PhotosUploadProfilePhotoRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.PhotosUploadProfilePhotoRequest;

            public InputFile File;
            public string Caption;
            public InputGeoPoint GeoPoint;
            public InputPhotoCrop Crop;

            public PhotosPhoto Result;
            public override object GetResult() => Result;

            public PhotosUploadProfilePhotoRequest() { }

            public PhotosUploadProfilePhotoRequest(InputFile File, string Caption, InputGeoPoint GeoPoint, InputPhotoCrop Crop)
            {
                this.File = File;
                this.Caption = Caption;
                this.GeoPoint = GeoPoint;
                this.Crop = Crop;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                File.Write(writer);
                writer.Write(Caption);
                GeoPoint.Write(writer);
                Crop.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<PhotosPhoto>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(PhotosUploadProfilePhotoRequest File:{0} Caption:{1} GeoPoint:{2} Crop:{3})", File, Caption, GeoPoint, Crop);
            }
        }

        public class PhotosDeletePhotosRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.PhotosDeletePhotosRequest;

            public List<InputPhoto> Id;

            public List<long> Result;
            public override object GetResult() => Result;

            public PhotosDeletePhotosRequest() { }

            public PhotosDeletePhotosRequest(List<InputPhoto> Id)
            {
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Id.Count);
                foreach (InputPhoto IdElement in Id)
                    IdElement.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<List<long>>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(PhotosDeletePhotosRequest Id:{0})", Id);
            }
        }

        public class PhotosGetUserPhotosRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.PhotosGetUserPhotosRequest;

            public InputUser UserId;
            public int Offset;
            public long MaxId;
            public int Limit;

            public PhotosPhotos Result;
            public override object GetResult() => Result;

            public PhotosGetUserPhotosRequest() { }

            public PhotosGetUserPhotosRequest(InputUser UserId, int Offset, long MaxId, int Limit)
            {
                this.UserId = UserId;
                this.Offset = Offset;
                this.MaxId = MaxId;
                this.Limit = Limit;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                UserId.Write(writer);
                writer.Write(Offset);
                writer.Write(MaxId);
                writer.Write(Limit);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<PhotosPhotos>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(PhotosGetUserPhotosRequest UserId:{0} Offset:{1} MaxId:{2} Limit:{3})", UserId, Offset, MaxId, Limit);
            }
        }

        public class UploadSaveFilePartRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.UploadSaveFilePartRequest;

            public long FileId;
            public int FilePart;
            public byte[] Bytes;

            public bool Result;
            public override object GetResult() => Result;

            public UploadSaveFilePartRequest() { }

            public UploadSaveFilePartRequest(long FileId, int FilePart, byte[] Bytes)
            {
                this.FileId = FileId;
                this.FilePart = FilePart;
                this.Bytes = Bytes;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(FileId);
                writer.Write(FilePart);
                writer.Write(Bytes);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(UploadSaveFilePartRequest FileId:{0} FilePart:{1} Bytes:{2})", FileId, FilePart, Bytes);
            }
        }

        public class UploadGetFileRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.UploadGetFileRequest;

            public InputFileLocation Location;
            public int Offset;
            public int Limit;

            public UploadFile Result;
            public override object GetResult() => Result;

            public UploadGetFileRequest() { }

            public UploadGetFileRequest(InputFileLocation Location, int Offset, int Limit)
            {
                this.Location = Location;
                this.Offset = Offset;
                this.Limit = Limit;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Location.Write(writer);
                writer.Write(Offset);
                writer.Write(Limit);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<UploadFile>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(UploadGetFileRequest Location:{0} Offset:{1} Limit:{2})", Location, Offset, Limit);
            }
        }

        public class UploadSaveBigFilePartRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.UploadSaveBigFilePartRequest;

            public long FileId;
            public int FilePart;
            public int FileTotalParts;
            public byte[] Bytes;

            public bool Result;
            public override object GetResult() => Result;

            public UploadSaveBigFilePartRequest() { }

            public UploadSaveBigFilePartRequest(long FileId, int FilePart, int FileTotalParts, byte[] Bytes)
            {
                this.FileId = FileId;
                this.FilePart = FilePart;
                this.FileTotalParts = FileTotalParts;
                this.Bytes = Bytes;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(FileId);
                writer.Write(FilePart);
                writer.Write(FileTotalParts);
                writer.Write(Bytes);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(UploadSaveBigFilePartRequest FileId:{0} FilePart:{1} FileTotalParts:{2} Bytes:{3})", FileId, FilePart, FileTotalParts, Bytes);
            }
        }

        public class HelpGetConfigRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.HelpGetConfigRequest;

            public Config Result;
            public override object GetResult() => Result;

            public HelpGetConfigRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Config>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(HelpGetConfigRequest)";
            }
        }

        public class HelpGetNearestDcRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.HelpGetNearestDcRequest;

            public NearestDc Result;
            public override object GetResult() => Result;

            public HelpGetNearestDcRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<NearestDc>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(HelpGetNearestDcRequest)";
            }
        }

        public class HelpGetAppUpdateRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.HelpGetAppUpdateRequest;

            public HelpAppUpdate Result;
            public override object GetResult() => Result;

            public HelpGetAppUpdateRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<HelpAppUpdate>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(HelpGetAppUpdateRequest)";
            }
        }

        public class HelpSaveAppLogRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.HelpSaveAppLogRequest;

            public List<InputAppEvent> Events;

            public bool Result;
            public override object GetResult() => Result;

            public HelpSaveAppLogRequest() { }

            public HelpSaveAppLogRequest(List<InputAppEvent> Events)
            {
                this.Events = Events;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Events.Count);
                foreach (InputAppEvent EventsElement in Events)
                    EventsElement.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(HelpSaveAppLogRequest Events:{0})", Events);
            }
        }

        public class HelpGetInviteTextRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.HelpGetInviteTextRequest;

            public HelpInviteText Result;
            public override object GetResult() => Result;

            public HelpGetInviteTextRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<HelpInviteText>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(HelpGetInviteTextRequest)";
            }
        }

        public class HelpGetSupportRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.HelpGetSupportRequest;

            public HelpSupport Result;
            public override object GetResult() => Result;

            public HelpGetSupportRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<HelpSupport>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(HelpGetSupportRequest)";
            }
        }

        public class HelpGetAppChangelogRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.HelpGetAppChangelogRequest;

            public HelpAppChangelog Result;
            public override object GetResult() => Result;

            public HelpGetAppChangelogRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<HelpAppChangelog>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(HelpGetAppChangelogRequest)";
            }
        }

        public class HelpGetTermsOfServiceRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.HelpGetTermsOfServiceRequest;

            public HelpTermsOfService Result;
            public override object GetResult() => Result;

            public HelpGetTermsOfServiceRequest() { }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<HelpTermsOfService>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return "(HelpGetTermsOfServiceRequest)";
            }
        }

        public class ChannelsReadHistoryRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsReadHistoryRequest;

            public InputChannel Channel;
            public int MaxId;

            public bool Result;
            public override object GetResult() => Result;

            public ChannelsReadHistoryRequest() { }

            public ChannelsReadHistoryRequest(InputChannel Channel, int MaxId)
            {
                this.Channel = Channel;
                this.MaxId = MaxId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                writer.Write(MaxId);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsReadHistoryRequest Channel:{0} MaxId:{1})", Channel, MaxId);
            }
        }

        public class ChannelsDeleteMessagesRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsDeleteMessagesRequest;

            public InputChannel Channel;
            public List<int> Id;

            public MessagesAffectedMessages Result;
            public override object GetResult() => Result;

            public ChannelsDeleteMessagesRequest() { }

            public ChannelsDeleteMessagesRequest(InputChannel Channel, List<int> Id)
            {
                this.Channel = Channel;
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Id.Count);
                foreach (int IdElement in Id)
                    writer.Write(IdElement);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesAffectedMessages>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsDeleteMessagesRequest Channel:{0} Id:{1})", Channel, Id);
            }
        }

        public class ChannelsDeleteUserHistoryRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsDeleteUserHistoryRequest;

            public InputChannel Channel;
            public InputUser UserId;

            public MessagesAffectedHistory Result;
            public override object GetResult() => Result;

            public ChannelsDeleteUserHistoryRequest() { }

            public ChannelsDeleteUserHistoryRequest(InputChannel Channel, InputUser UserId)
            {
                this.Channel = Channel;
                this.UserId = UserId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                UserId.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesAffectedHistory>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsDeleteUserHistoryRequest Channel:{0} UserId:{1})", Channel, UserId);
            }
        }

        public class ChannelsReportSpamRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsReportSpamRequest;

            public InputChannel Channel;
            public InputUser UserId;
            public List<int> Id;

            public bool Result;
            public override object GetResult() => Result;

            public ChannelsReportSpamRequest() { }

            public ChannelsReportSpamRequest(InputChannel Channel, InputUser UserId, List<int> Id)
            {
                this.Channel = Channel;
                this.UserId = UserId;
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                UserId.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Id.Count);
                foreach (int IdElement in Id)
                    writer.Write(IdElement);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsReportSpamRequest Channel:{0} UserId:{1} Id:{2})", Channel, UserId, Id);
            }
        }

        public class ChannelsGetMessagesRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsGetMessagesRequest;

            public InputChannel Channel;
            public List<int> Id;

            public MessagesMessages Result;
            public override object GetResult() => Result;

            public ChannelsGetMessagesRequest() { }

            public ChannelsGetMessagesRequest(InputChannel Channel, List<int> Id)
            {
                this.Channel = Channel;
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Id.Count);
                foreach (int IdElement in Id)
                    writer.Write(IdElement);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesMessages>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsGetMessagesRequest Channel:{0} Id:{1})", Channel, Id);
            }
        }

        public class ChannelsGetParticipantsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsGetParticipantsRequest;

            public InputChannel Channel;
            public ChannelParticipantsFilter Filter;
            public int Offset;
            public int Limit;

            public ChannelsChannelParticipants Result;
            public override object GetResult() => Result;

            public ChannelsGetParticipantsRequest() { }

            public ChannelsGetParticipantsRequest(InputChannel Channel, ChannelParticipantsFilter Filter, int Offset, int Limit)
            {
                this.Channel = Channel;
                this.Filter = Filter;
                this.Offset = Offset;
                this.Limit = Limit;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                Filter.Write(writer);
                writer.Write(Offset);
                writer.Write(Limit);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<ChannelsChannelParticipants>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsGetParticipantsRequest Channel:{0} Filter:{1} Offset:{2} Limit:{3})", Channel, Filter, Offset, Limit);
            }
        }

        public class ChannelsGetParticipantRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsGetParticipantRequest;

            public InputChannel Channel;
            public InputUser UserId;

            public ChannelsChannelParticipant Result;
            public override object GetResult() => Result;

            public ChannelsGetParticipantRequest() { }

            public ChannelsGetParticipantRequest(InputChannel Channel, InputUser UserId)
            {
                this.Channel = Channel;
                this.UserId = UserId;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                UserId.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<ChannelsChannelParticipant>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsGetParticipantRequest Channel:{0} UserId:{1})", Channel, UserId);
            }
        }

        public class ChannelsGetChannelsRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsGetChannelsRequest;

            public List<InputChannel> Id;

            public MessagesChats Result;
            public override object GetResult() => Result;

            public ChannelsGetChannelsRequest() { }

            public ChannelsGetChannelsRequest(List<InputChannel> Id)
            {
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Id.Count);
                foreach (InputChannel IdElement in Id)
                    IdElement.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesChats>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsGetChannelsRequest Id:{0})", Id);
            }
        }

        public class ChannelsGetFullChannelRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsGetFullChannelRequest;

            public InputChannel Channel;

            public MessagesChatFull Result;
            public override object GetResult() => Result;

            public ChannelsGetFullChannelRequest() { }

            public ChannelsGetFullChannelRequest(InputChannel Channel)
            {
                this.Channel = Channel;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<MessagesChatFull>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsGetFullChannelRequest Channel:{0})", Channel);
            }
        }

        public class ChannelsCreateChannelRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsCreateChannelRequest;

            public True Broadcast;
            public True Megagroup;
            public string Title;
            public string About;

            public Updates Result;
            public override object GetResult() => Result;

            public ChannelsCreateChannelRequest() { }

            /// <summary>
            /// The following arguments can be null: Broadcast, Megagroup
            /// </summary>
            /// <param name="Broadcast">Can be null</param>
            /// <param name="Megagroup">Can be null</param>
            /// <param name="Title">Can NOT be null</param>
            /// <param name="About">Can NOT be null</param>
            public ChannelsCreateChannelRequest(True Broadcast, True Megagroup, string Title, string About)
            {
                this.Broadcast = Broadcast;
                this.Megagroup = Megagroup;
                this.Title = Title;
                this.About = About;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (Broadcast != null ? 1 << 0 : 0) |
                    (Megagroup != null ? 1 << 1 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Broadcast != null)
                {

                }

                if (Megagroup != null)
                {

                }

                writer.Write(Title);
                writer.Write(About);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsCreateChannelRequest Broadcast:{0} Megagroup:{1} Title:{2} About:{3})", Broadcast, Megagroup, Title, About);
            }
        }

        public class ChannelsEditAboutRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsEditAboutRequest;

            public InputChannel Channel;
            public string About;

            public bool Result;
            public override object GetResult() => Result;

            public ChannelsEditAboutRequest() { }

            public ChannelsEditAboutRequest(InputChannel Channel, string About)
            {
                this.Channel = Channel;
                this.About = About;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                writer.Write(About);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsEditAboutRequest Channel:{0} About:{1})", Channel, About);
            }
        }

        public class ChannelsEditAdminRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsEditAdminRequest;

            public InputChannel Channel;
            public InputUser UserId;
            public ChannelParticipantRole Role;

            public Updates Result;
            public override object GetResult() => Result;

            public ChannelsEditAdminRequest() { }

            public ChannelsEditAdminRequest(InputChannel Channel, InputUser UserId, ChannelParticipantRole Role)
            {
                this.Channel = Channel;
                this.UserId = UserId;
                this.Role = Role;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                UserId.Write(writer);
                Role.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsEditAdminRequest Channel:{0} UserId:{1} Role:{2})", Channel, UserId, Role);
            }
        }

        public class ChannelsEditTitleRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsEditTitleRequest;

            public InputChannel Channel;
            public string Title;

            public Updates Result;
            public override object GetResult() => Result;

            public ChannelsEditTitleRequest() { }

            public ChannelsEditTitleRequest(InputChannel Channel, string Title)
            {
                this.Channel = Channel;
                this.Title = Title;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                writer.Write(Title);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsEditTitleRequest Channel:{0} Title:{1})", Channel, Title);
            }
        }

        public class ChannelsEditPhotoRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsEditPhotoRequest;

            public InputChannel Channel;
            public InputChatPhoto Photo;

            public Updates Result;
            public override object GetResult() => Result;

            public ChannelsEditPhotoRequest() { }

            public ChannelsEditPhotoRequest(InputChannel Channel, InputChatPhoto Photo)
            {
                this.Channel = Channel;
                this.Photo = Photo;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                Photo.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsEditPhotoRequest Channel:{0} Photo:{1})", Channel, Photo);
            }
        }

        public class ChannelsCheckUsernameRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsCheckUsernameRequest;

            public InputChannel Channel;
            public string Username;

            public bool Result;
            public override object GetResult() => Result;

            public ChannelsCheckUsernameRequest() { }

            public ChannelsCheckUsernameRequest(InputChannel Channel, string Username)
            {
                this.Channel = Channel;
                this.Username = Username;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                writer.Write(Username);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsCheckUsernameRequest Channel:{0} Username:{1})", Channel, Username);
            }
        }

        public class ChannelsUpdateUsernameRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsUpdateUsernameRequest;

            public InputChannel Channel;
            public string Username;

            public bool Result;
            public override object GetResult() => Result;

            public ChannelsUpdateUsernameRequest() { }

            public ChannelsUpdateUsernameRequest(InputChannel Channel, string Username)
            {
                this.Channel = Channel;
                this.Username = Username;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                writer.Write(Username);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.ReadBoolean();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsUpdateUsernameRequest Channel:{0} Username:{1})", Channel, Username);
            }
        }

        public class ChannelsJoinChannelRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsJoinChannelRequest;

            public InputChannel Channel;

            public Updates Result;
            public override object GetResult() => Result;

            public ChannelsJoinChannelRequest() { }

            public ChannelsJoinChannelRequest(InputChannel Channel)
            {
                this.Channel = Channel;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsJoinChannelRequest Channel:{0})", Channel);
            }
        }

        public class ChannelsLeaveChannelRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsLeaveChannelRequest;

            public InputChannel Channel;

            public Updates Result;
            public override object GetResult() => Result;

            public ChannelsLeaveChannelRequest() { }

            public ChannelsLeaveChannelRequest(InputChannel Channel)
            {
                this.Channel = Channel;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsLeaveChannelRequest Channel:{0})", Channel);
            }
        }

        public class ChannelsInviteToChannelRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsInviteToChannelRequest;

            public InputChannel Channel;
            public List<InputUser> Users;

            public Updates Result;
            public override object GetResult() => Result;

            public ChannelsInviteToChannelRequest() { }

            public ChannelsInviteToChannelRequest(InputChannel Channel, List<InputUser> Users)
            {
                this.Channel = Channel;
                this.Users = Users;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (InputUser UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsInviteToChannelRequest Channel:{0} Users:{1})", Channel, Users);
            }
        }

        public class ChannelsKickFromChannelRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsKickFromChannelRequest;

            public InputChannel Channel;
            public InputUser UserId;
            public bool Kicked;

            public Updates Result;
            public override object GetResult() => Result;

            public ChannelsKickFromChannelRequest() { }

            public ChannelsKickFromChannelRequest(InputChannel Channel, InputUser UserId, bool Kicked)
            {
                this.Channel = Channel;
                this.UserId = UserId;
                this.Kicked = Kicked;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                UserId.Write(writer);
                writer.Write(Kicked);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsKickFromChannelRequest Channel:{0} UserId:{1} Kicked:{2})", Channel, UserId, Kicked);
            }
        }

        public class ChannelsExportInviteRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsExportInviteRequest;

            public InputChannel Channel;

            public ExportedChatInvite Result;
            public override object GetResult() => Result;

            public ChannelsExportInviteRequest() { }

            public ChannelsExportInviteRequest(InputChannel Channel)
            {
                this.Channel = Channel;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<ExportedChatInvite>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsExportInviteRequest Channel:{0})", Channel);
            }
        }

        public class ChannelsDeleteChannelRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsDeleteChannelRequest;

            public InputChannel Channel;

            public Updates Result;
            public override object GetResult() => Result;

            public ChannelsDeleteChannelRequest() { }

            public ChannelsDeleteChannelRequest(InputChannel Channel)
            {
                this.Channel = Channel;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsDeleteChannelRequest Channel:{0})", Channel);
            }
        }

        public class ChannelsToggleInvitesRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsToggleInvitesRequest;

            public InputChannel Channel;
            public bool Enabled;

            public Updates Result;
            public override object GetResult() => Result;

            public ChannelsToggleInvitesRequest() { }

            public ChannelsToggleInvitesRequest(InputChannel Channel, bool Enabled)
            {
                this.Channel = Channel;
                this.Enabled = Enabled;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                writer.Write(Enabled);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsToggleInvitesRequest Channel:{0} Enabled:{1})", Channel, Enabled);
            }
        }

        public class ChannelsExportMessageLinkRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsExportMessageLinkRequest;

            public InputChannel Channel;
            public int Id;

            public ExportedMessageLink Result;
            public override object GetResult() => Result;

            public ChannelsExportMessageLinkRequest() { }

            public ChannelsExportMessageLinkRequest(InputChannel Channel, int Id)
            {
                this.Channel = Channel;
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                writer.Write(Id);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<ExportedMessageLink>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsExportMessageLinkRequest Channel:{0} Id:{1})", Channel, Id);
            }
        }

        public class ChannelsToggleSignaturesRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsToggleSignaturesRequest;

            public InputChannel Channel;
            public bool Enabled;

            public Updates Result;
            public override object GetResult() => Result;

            public ChannelsToggleSignaturesRequest() { }

            public ChannelsToggleSignaturesRequest(InputChannel Channel, bool Enabled)
            {
                this.Channel = Channel;
                this.Enabled = Enabled;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Channel.Write(writer);
                writer.Write(Enabled);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsToggleSignaturesRequest Channel:{0} Enabled:{1})", Channel, Enabled);
            }
        }

        public class ChannelsUpdatePinnedMessageRequest : MTProtoRequest
        {
            public override Types ConstructorCode => Types.ChannelsUpdatePinnedMessageRequest;

            public True Silent;
            public InputChannel Channel;
            public int Id;

            public Updates Result;
            public override object GetResult() => Result;

            public ChannelsUpdatePinnedMessageRequest() { }

            /// <summary>
            /// The following arguments can be null: Silent
            /// </summary>
            /// <param name="Silent">Can be null</param>
            /// <param name="Channel">Can NOT be null</param>
            /// <param name="Id">Can NOT be null</param>
            public ChannelsUpdatePinnedMessageRequest(True Silent, InputChannel Channel, int Id)
            {
                this.Silent = Silent;
                this.Channel = Channel;
                this.Id = Id;
            }

            public override void OnSend(TBinaryWriter writer)
            {
                int flags =
                    (Silent != null ? 1 << 0 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Silent != null)
                {

                }

                Channel.Write(writer);
                writer.Write(Id);
            }

            public override void OnResponse(TBinaryReader reader)
            {
                Result = reader.Read<Updates>();
            }

            public override void OnException(Exception exception)
            {
                throw exception;
            }

            public override bool Confirmed => true;
            public override bool Responded { get; }

            public override string ToString()
            {
                return string.Format("(ChannelsUpdatePinnedMessageRequest Silent:{0} Channel:{1} Id:{2})", Silent, Channel, Id);
            }
        }

        #endregion

        #region Types

        public class MsgsAckType : MsgsAck
        {
            public override Types ConstructorCode => Types.MsgsAckType;

            public List<long> MsgIds;

            public MsgsAckType() { }

            public MsgsAckType(List<long> MsgIds)
            {
                this.MsgIds = MsgIds;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(MsgIds.Count);
                foreach (long MsgIdsElement in MsgIds)
                    writer.Write(MsgIdsElement);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int MsgIdsLength = reader.ReadInt32();
                MsgIds = new List<long>(MsgIdsLength);
                for (int MsgIdsIndex = 0; MsgIdsIndex < MsgIdsLength; MsgIdsIndex++)
                    MsgIds.Add(reader.ReadInt64());
            }

            public override string ToString()
            {
                return string.Format("(MsgsAckType MsgIds:{0})", MsgIds);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "MsgIds": return MsgIds;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "MsgIds": return true;
                    default: return false;
                }
            }
        }

        public class BadMsgNotificationType : BadMsgNotification
        {
            public override Types ConstructorCode => Types.BadMsgNotificationType;

            public long BadMsgId;
            public int BadMsgSeqno;
            public int ErrorCode;

            public BadMsgNotificationType() { }

            public BadMsgNotificationType(long BadMsgId, int BadMsgSeqno, int ErrorCode)
            {
                this.BadMsgId = BadMsgId;
                this.BadMsgSeqno = BadMsgSeqno;
                this.ErrorCode = ErrorCode;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(BadMsgId);
                writer.Write(BadMsgSeqno);
                writer.Write(ErrorCode);
            }

            public override void Read(TBinaryReader reader)
            {
                BadMsgId = reader.ReadInt64();
                BadMsgSeqno = reader.ReadInt32();
                ErrorCode = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(BadMsgNotificationType BadMsgId:{0} BadMsgSeqno:{1} ErrorCode:{2})", BadMsgId, BadMsgSeqno, ErrorCode);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "BadMsgId": return BadMsgId;
                        case "BadMsgSeqno": return BadMsgSeqno;
                        case "ErrorCode": return ErrorCode;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "BadMsgId":
                    case "BadMsgSeqno":
                    case "ErrorCode": return true;
                    default: return false;
                }
            }
        }

        public class BadServerSaltType : BadMsgNotification
        {
            public override Types ConstructorCode => Types.BadServerSaltType;

            public long BadMsgId;
            public int BadMsgSeqno;
            public int ErrorCode;
            public long NewServerSalt;

            public BadServerSaltType() { }

            public BadServerSaltType(long BadMsgId, int BadMsgSeqno, int ErrorCode, long NewServerSalt)
            {
                this.BadMsgId = BadMsgId;
                this.BadMsgSeqno = BadMsgSeqno;
                this.ErrorCode = ErrorCode;
                this.NewServerSalt = NewServerSalt;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(BadMsgId);
                writer.Write(BadMsgSeqno);
                writer.Write(ErrorCode);
                writer.Write(NewServerSalt);
            }

            public override void Read(TBinaryReader reader)
            {
                BadMsgId = reader.ReadInt64();
                BadMsgSeqno = reader.ReadInt32();
                ErrorCode = reader.ReadInt32();
                NewServerSalt = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(BadServerSaltType BadMsgId:{0} BadMsgSeqno:{1} ErrorCode:{2} NewServerSalt:{3})", BadMsgId, BadMsgSeqno, ErrorCode, NewServerSalt);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "BadMsgId": return BadMsgId;
                        case "BadMsgSeqno": return BadMsgSeqno;
                        case "ErrorCode": return ErrorCode;
                        case "NewServerSalt": return NewServerSalt;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "BadMsgId":
                    case "BadMsgSeqno":
                    case "ErrorCode":
                    case "NewServerSalt": return true;
                    default: return false;
                }
            }
        }

        public class MsgsStateReqType : MsgsStateReq
        {
            public override Types ConstructorCode => Types.MsgsStateReqType;

            public List<long> MsgIds;

            public MsgsStateReqType() { }

            public MsgsStateReqType(List<long> MsgIds)
            {
                this.MsgIds = MsgIds;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(MsgIds.Count);
                foreach (long MsgIdsElement in MsgIds)
                    writer.Write(MsgIdsElement);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int MsgIdsLength = reader.ReadInt32();
                MsgIds = new List<long>(MsgIdsLength);
                for (int MsgIdsIndex = 0; MsgIdsIndex < MsgIdsLength; MsgIdsIndex++)
                    MsgIds.Add(reader.ReadInt64());
            }

            public override string ToString()
            {
                return string.Format("(MsgsStateReqType MsgIds:{0})", MsgIds);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "MsgIds": return MsgIds;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "MsgIds": return true;
                    default: return false;
                }
            }
        }

        public class MsgsStateInfoType : MsgsStateInfo
        {
            public override Types ConstructorCode => Types.MsgsStateInfoType;

            public long ReqMsgId;
            public string Info;

            public MsgsStateInfoType() { }

            public MsgsStateInfoType(long ReqMsgId, string Info)
            {
                this.ReqMsgId = ReqMsgId;
                this.Info = Info;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ReqMsgId);
                writer.Write(Info);
            }

            public override void Read(TBinaryReader reader)
            {
                ReqMsgId = reader.ReadInt64();
                Info = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(MsgsStateInfoType ReqMsgId:{0} Info:{1})", ReqMsgId, Info);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ReqMsgId": return ReqMsgId;
                        case "Info": return Info;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ReqMsgId":
                    case "Info": return true;
                    default: return false;
                }
            }
        }

        public class MsgsAllInfoType : MsgsAllInfo
        {
            public override Types ConstructorCode => Types.MsgsAllInfoType;

            public List<long> MsgIds;
            public string Info;

            public MsgsAllInfoType() { }

            public MsgsAllInfoType(List<long> MsgIds, string Info)
            {
                this.MsgIds = MsgIds;
                this.Info = Info;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(MsgIds.Count);
                foreach (long MsgIdsElement in MsgIds)
                    writer.Write(MsgIdsElement);
                writer.Write(Info);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int MsgIdsLength = reader.ReadInt32();
                MsgIds = new List<long>(MsgIdsLength);
                for (int MsgIdsIndex = 0; MsgIdsIndex < MsgIdsLength; MsgIdsIndex++)
                    MsgIds.Add(reader.ReadInt64());
                Info = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(MsgsAllInfoType MsgIds:{0} Info:{1})", MsgIds, Info);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "MsgIds": return MsgIds;
                        case "Info": return Info;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "MsgIds":
                    case "Info": return true;
                    default: return false;
                }
            }
        }

        public class MsgDetailedInfoType : MsgDetailedInfo
        {
            public override Types ConstructorCode => Types.MsgDetailedInfoType;

            public long MsgId;
            public long AnswerMsgId;
            public int Bytes;
            public int Status;

            public MsgDetailedInfoType() { }

            public MsgDetailedInfoType(long MsgId, long AnswerMsgId, int Bytes, int Status)
            {
                this.MsgId = MsgId;
                this.AnswerMsgId = AnswerMsgId;
                this.Bytes = Bytes;
                this.Status = Status;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(MsgId);
                writer.Write(AnswerMsgId);
                writer.Write(Bytes);
                writer.Write(Status);
            }

            public override void Read(TBinaryReader reader)
            {
                MsgId = reader.ReadInt64();
                AnswerMsgId = reader.ReadInt64();
                Bytes = reader.ReadInt32();
                Status = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MsgDetailedInfoType MsgId:{0} AnswerMsgId:{1} Bytes:{2} Status:{3})", MsgId, AnswerMsgId, Bytes, Status);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "MsgId": return MsgId;
                        case "AnswerMsgId": return AnswerMsgId;
                        case "Bytes": return Bytes;
                        case "Status": return Status;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "MsgId":
                    case "AnswerMsgId":
                    case "Bytes":
                    case "Status": return true;
                    default: return false;
                }
            }
        }

        public class MsgNewDetailedInfoType : MsgDetailedInfo
        {
            public override Types ConstructorCode => Types.MsgNewDetailedInfoType;

            public long AnswerMsgId;
            public int Bytes;
            public int Status;

            public MsgNewDetailedInfoType() { }

            public MsgNewDetailedInfoType(long AnswerMsgId, int Bytes, int Status)
            {
                this.AnswerMsgId = AnswerMsgId;
                this.Bytes = Bytes;
                this.Status = Status;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(AnswerMsgId);
                writer.Write(Bytes);
                writer.Write(Status);
            }

            public override void Read(TBinaryReader reader)
            {
                AnswerMsgId = reader.ReadInt64();
                Bytes = reader.ReadInt32();
                Status = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MsgNewDetailedInfoType AnswerMsgId:{0} Bytes:{1} Status:{2})", AnswerMsgId, Bytes, Status);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "AnswerMsgId": return AnswerMsgId;
                        case "Bytes": return Bytes;
                        case "Status": return Status;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "AnswerMsgId":
                    case "Bytes":
                    case "Status": return true;
                    default: return false;
                }
            }
        }

        public class MsgResendReqType : MsgResendReq
        {
            public override Types ConstructorCode => Types.MsgResendReqType;

            public List<long> MsgIds;

            public MsgResendReqType() { }

            public MsgResendReqType(List<long> MsgIds)
            {
                this.MsgIds = MsgIds;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(MsgIds.Count);
                foreach (long MsgIdsElement in MsgIds)
                    writer.Write(MsgIdsElement);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int MsgIdsLength = reader.ReadInt32();
                MsgIds = new List<long>(MsgIdsLength);
                for (int MsgIdsIndex = 0; MsgIdsIndex < MsgIdsLength; MsgIdsIndex++)
                    MsgIds.Add(reader.ReadInt64());
            }

            public override string ToString()
            {
                return string.Format("(MsgResendReqType MsgIds:{0})", MsgIds);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "MsgIds": return MsgIds;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "MsgIds": return true;
                    default: return false;
                }
            }
        }

        public class RpcErrorType : RpcError
        {
            public override Types ConstructorCode => Types.RpcErrorType;

            public int ErrorCode;
            public string ErrorMessage;

            public RpcErrorType() { }

            public RpcErrorType(int ErrorCode, string ErrorMessage)
            {
                this.ErrorCode = ErrorCode;
                this.ErrorMessage = ErrorMessage;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ErrorCode);
                writer.Write(ErrorMessage);
            }

            public override void Read(TBinaryReader reader)
            {
                ErrorCode = reader.ReadInt32();
                ErrorMessage = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(RpcErrorType ErrorCode:{0} ErrorMessage:{1})", ErrorCode, ErrorMessage);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ErrorCode": return ErrorCode;
                        case "ErrorMessage": return ErrorMessage;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ErrorCode":
                    case "ErrorMessage": return true;
                    default: return false;
                }
            }
        }

        public class RpcAnswerUnknownType : RpcDropAnswer
        {
            public override Types ConstructorCode => Types.RpcAnswerUnknownType;

            public RpcAnswerUnknownType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(RpcAnswerUnknownType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class RpcAnswerDroppedRunningType : RpcDropAnswer
        {
            public override Types ConstructorCode => Types.RpcAnswerDroppedRunningType;

            public RpcAnswerDroppedRunningType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(RpcAnswerDroppedRunningType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class RpcAnswerDroppedType : RpcDropAnswer
        {
            public override Types ConstructorCode => Types.RpcAnswerDroppedType;

            public long MsgId;
            public int SeqNo;
            public int Bytes;

            public RpcAnswerDroppedType() { }

            public RpcAnswerDroppedType(long MsgId, int SeqNo, int Bytes)
            {
                this.MsgId = MsgId;
                this.SeqNo = SeqNo;
                this.Bytes = Bytes;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(MsgId);
                writer.Write(SeqNo);
                writer.Write(Bytes);
            }

            public override void Read(TBinaryReader reader)
            {
                MsgId = reader.ReadInt64();
                SeqNo = reader.ReadInt32();
                Bytes = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(RpcAnswerDroppedType MsgId:{0} SeqNo:{1} Bytes:{2})", MsgId, SeqNo, Bytes);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "MsgId": return MsgId;
                        case "SeqNo": return SeqNo;
                        case "Bytes": return Bytes;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "MsgId":
                    case "SeqNo":
                    case "Bytes": return true;
                    default: return false;
                }
            }
        }

        public class FutureSaltType : FutureSalt
        {
            public override Types ConstructorCode => Types.FutureSaltType;

            public int ValidSince;
            public int ValidUntil;
            public long Salt;

            public FutureSaltType() { }

            public FutureSaltType(int ValidSince, int ValidUntil, long Salt)
            {
                this.ValidSince = ValidSince;
                this.ValidUntil = ValidUntil;
                this.Salt = Salt;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ValidSince);
                writer.Write(ValidUntil);
                writer.Write(Salt);
            }

            public override void Read(TBinaryReader reader)
            {
                ValidSince = reader.ReadInt32();
                ValidUntil = reader.ReadInt32();
                Salt = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(FutureSaltType ValidSince:{0} ValidUntil:{1} Salt:{2})", ValidSince, ValidUntil, Salt);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ValidSince": return ValidSince;
                        case "ValidUntil": return ValidUntil;
                        case "Salt": return Salt;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ValidSince":
                    case "ValidUntil":
                    case "Salt": return true;
                    default: return false;
                }
            }
        }

        public class FutureSaltsType : FutureSalts
        {
            public override Types ConstructorCode => Types.FutureSaltsType;

            public long ReqMsgId;
            public int Now;
            public List<FutureSalt> Salts;

            public FutureSaltsType() { }

            public FutureSaltsType(long ReqMsgId, int Now, List<FutureSalt> Salts)
            {
                this.ReqMsgId = ReqMsgId;
                this.Now = Now;
                this.Salts = Salts;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ReqMsgId);
                writer.Write(Now);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Salts.Count);
                foreach (FutureSalt SaltsElement in Salts)
                    SaltsElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                ReqMsgId = reader.ReadInt64();
                Now = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int SaltsLength = reader.ReadInt32();
                Salts = new List<FutureSalt>(SaltsLength);
                for (int SaltsIndex = 0; SaltsIndex < SaltsLength; SaltsIndex++)
                    Salts.Add(reader.Read<FutureSalt>());
            }

            public override string ToString()
            {
                return string.Format("(FutureSaltsType ReqMsgId:{0} Now:{1} Salts:{2})", ReqMsgId, Now, Salts);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ReqMsgId": return ReqMsgId;
                        case "Now": return Now;
                        case "Salts": return Salts;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ReqMsgId":
                    case "Now":
                    case "Salts": return true;
                    default: return false;
                }
            }
        }

        public class PongType : Pong
        {
            public override Types ConstructorCode => Types.PongType;

            public long MsgId;
            public long PingId;

            public PongType() { }

            public PongType(long MsgId, long PingId)
            {
                this.MsgId = MsgId;
                this.PingId = PingId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(MsgId);
                writer.Write(PingId);
            }

            public override void Read(TBinaryReader reader)
            {
                MsgId = reader.ReadInt64();
                PingId = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(PongType MsgId:{0} PingId:{1})", MsgId, PingId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "MsgId": return MsgId;
                        case "PingId": return PingId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "MsgId":
                    case "PingId": return true;
                    default: return false;
                }
            }
        }

        public class DestroySessionOkType : DestroySessionRes
        {
            public override Types ConstructorCode => Types.DestroySessionOkType;

            public long SessionId;

            public DestroySessionOkType() { }

            public DestroySessionOkType(long SessionId)
            {
                this.SessionId = SessionId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(SessionId);
            }

            public override void Read(TBinaryReader reader)
            {
                SessionId = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(DestroySessionOkType SessionId:{0})", SessionId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "SessionId": return SessionId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "SessionId": return true;
                    default: return false;
                }
            }
        }

        public class DestroySessionNoneType : DestroySessionRes
        {
            public override Types ConstructorCode => Types.DestroySessionNoneType;

            public long SessionId;

            public DestroySessionNoneType() { }

            public DestroySessionNoneType(long SessionId)
            {
                this.SessionId = SessionId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(SessionId);
            }

            public override void Read(TBinaryReader reader)
            {
                SessionId = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(DestroySessionNoneType SessionId:{0})", SessionId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "SessionId": return SessionId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "SessionId": return true;
                    default: return false;
                }
            }
        }

        public class NewSessionCreatedType : NewSession
        {
            public override Types ConstructorCode => Types.NewSessionCreatedType;

            public long FirstMsgId;
            public long UniqueId;
            public long ServerSalt;

            public NewSessionCreatedType() { }

            public NewSessionCreatedType(long FirstMsgId, long UniqueId, long ServerSalt)
            {
                this.FirstMsgId = FirstMsgId;
                this.UniqueId = UniqueId;
                this.ServerSalt = ServerSalt;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(FirstMsgId);
                writer.Write(UniqueId);
                writer.Write(ServerSalt);
            }

            public override void Read(TBinaryReader reader)
            {
                FirstMsgId = reader.ReadInt64();
                UniqueId = reader.ReadInt64();
                ServerSalt = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(NewSessionCreatedType FirstMsgId:{0} UniqueId:{1} ServerSalt:{2})", FirstMsgId, UniqueId, ServerSalt);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "FirstMsgId": return FirstMsgId;
                        case "UniqueId": return UniqueId;
                        case "ServerSalt": return ServerSalt;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "FirstMsgId":
                    case "UniqueId":
                    case "ServerSalt": return true;
                    default: return false;
                }
            }
        }

        public class HttpWaitType : HttpWait
        {
            public override Types ConstructorCode => Types.HttpWaitType;

            public int MaxDelay;
            public int WaitAfter;
            public int MaxWait;

            public HttpWaitType() { }

            public HttpWaitType(int MaxDelay, int WaitAfter, int MaxWait)
            {
                this.MaxDelay = MaxDelay;
                this.WaitAfter = WaitAfter;
                this.MaxWait = MaxWait;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(MaxDelay);
                writer.Write(WaitAfter);
                writer.Write(MaxWait);
            }

            public override void Read(TBinaryReader reader)
            {
                MaxDelay = reader.ReadInt32();
                WaitAfter = reader.ReadInt32();
                MaxWait = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(HttpWaitType MaxDelay:{0} WaitAfter:{1} MaxWait:{2})", MaxDelay, WaitAfter, MaxWait);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "MaxDelay": return MaxDelay;
                        case "WaitAfter": return WaitAfter;
                        case "MaxWait": return MaxWait;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "MaxDelay":
                    case "WaitAfter":
                    case "MaxWait": return true;
                    default: return false;
                }
            }
        }

        public class BoolFalseType : Bool
        {
            public override Types ConstructorCode => Types.BoolFalseType;

            public BoolFalseType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(BoolFalseType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class BoolTrueType : Bool
        {
            public override Types ConstructorCode => Types.BoolTrueType;

            public BoolTrueType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(BoolTrueType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class TrueType : True
        {
            public override Types ConstructorCode => Types.TrueType;

            public TrueType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(TrueType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ErrorType : Error
        {
            public override Types ConstructorCode => Types.ErrorType;

            public int Code;
            public string Text;

            public ErrorType() { }

            public ErrorType(int Code, string Text)
            {
                this.Code = Code;
                this.Text = Text;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Code);
                writer.Write(Text);
            }

            public override void Read(TBinaryReader reader)
            {
                Code = reader.ReadInt32();
                Text = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(ErrorType Code:{0} Text:{1})", Code, Text);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Code": return Code;
                        case "Text": return Text;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Code":
                    case "Text": return true;
                    default: return false;
                }
            }
        }

        public class NullType : Null
        {
            public override Types ConstructorCode => Types.NullType;

            public NullType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(NullType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputPeerEmptyType : InputPeer
        {
            public override Types ConstructorCode => Types.InputPeerEmptyType;

            public InputPeerEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputPeerEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputPeerSelfType : InputPeer
        {
            public override Types ConstructorCode => Types.InputPeerSelfType;

            public InputPeerSelfType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputPeerSelfType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputPeerChatType : InputPeer
        {
            public override Types ConstructorCode => Types.InputPeerChatType;

            public int ChatId;

            public InputPeerChatType() { }

            public InputPeerChatType(int ChatId)
            {
                this.ChatId = ChatId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
            }

            public override void Read(TBinaryReader reader)
            {
                ChatId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(InputPeerChatType ChatId:{0})", ChatId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChatId": return ChatId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChatId": return true;
                    default: return false;
                }
            }
        }

        public class InputPeerUserType : InputPeer
        {
            public override Types ConstructorCode => Types.InputPeerUserType;

            public int UserId;
            public long AccessHash;

            public InputPeerUserType() { }

            public InputPeerUserType(int UserId, long AccessHash)
            {
                this.UserId = UserId;
                this.AccessHash = AccessHash;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(AccessHash);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                AccessHash = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(InputPeerUserType UserId:{0} AccessHash:{1})", UserId, AccessHash);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "AccessHash": return AccessHash;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "AccessHash": return true;
                    default: return false;
                }
            }
        }

        public class InputPeerChannelType : InputPeer
        {
            public override Types ConstructorCode => Types.InputPeerChannelType;

            public int ChannelId;
            public long AccessHash;

            public InputPeerChannelType() { }

            public InputPeerChannelType(int ChannelId, long AccessHash)
            {
                this.ChannelId = ChannelId;
                this.AccessHash = AccessHash;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChannelId);
                writer.Write(AccessHash);
            }

            public override void Read(TBinaryReader reader)
            {
                ChannelId = reader.ReadInt32();
                AccessHash = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(InputPeerChannelType ChannelId:{0} AccessHash:{1})", ChannelId, AccessHash);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChannelId": return ChannelId;
                        case "AccessHash": return AccessHash;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChannelId":
                    case "AccessHash": return true;
                    default: return false;
                }
            }
        }

        public class InputUserEmptyType : InputUser
        {
            public override Types ConstructorCode => Types.InputUserEmptyType;

            public InputUserEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputUserEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputUserSelfType : InputUser
        {
            public override Types ConstructorCode => Types.InputUserSelfType;

            public InputUserSelfType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputUserSelfType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputUserType : InputUser
        {
            public override Types ConstructorCode => Types.InputUserType;

            public int UserId;
            public long AccessHash;

            public InputUserType() { }

            public InputUserType(int UserId, long AccessHash)
            {
                this.UserId = UserId;
                this.AccessHash = AccessHash;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(AccessHash);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                AccessHash = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(InputUserType UserId:{0} AccessHash:{1})", UserId, AccessHash);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "AccessHash": return AccessHash;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "AccessHash": return true;
                    default: return false;
                }
            }
        }

        public class InputPhoneContactType : InputContact
        {
            public override Types ConstructorCode => Types.InputPhoneContactType;

            public long ClientId;
            public string Phone;
            public string FirstName;
            public string LastName;

            public InputPhoneContactType() { }

            public InputPhoneContactType(long ClientId, string Phone, string FirstName, string LastName)
            {
                this.ClientId = ClientId;
                this.Phone = Phone;
                this.FirstName = FirstName;
                this.LastName = LastName;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ClientId);
                writer.Write(Phone);
                writer.Write(FirstName);
                writer.Write(LastName);
            }

            public override void Read(TBinaryReader reader)
            {
                ClientId = reader.ReadInt64();
                Phone = reader.ReadString();
                FirstName = reader.ReadString();
                LastName = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputPhoneContactType ClientId:{0} Phone:{1} FirstName:{2} LastName:{3})", ClientId, Phone, FirstName, LastName);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ClientId": return ClientId;
                        case "Phone": return Phone;
                        case "FirstName": return FirstName;
                        case "LastName": return LastName;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ClientId":
                    case "Phone":
                    case "FirstName":
                    case "LastName": return true;
                    default: return false;
                }
            }
        }

        public class InputFileType : InputFile
        {
            public override Types ConstructorCode => Types.InputFileType;

            public long Id;
            public int Parts;
            public string Name;
            public string Md5Checksum;

            public InputFileType() { }

            public InputFileType(long Id, int Parts, string Name, string Md5Checksum)
            {
                this.Id = Id;
                this.Parts = Parts;
                this.Name = Name;
                this.Md5Checksum = Md5Checksum;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(Parts);
                writer.Write(Name);
                writer.Write(Md5Checksum);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
                Parts = reader.ReadInt32();
                Name = reader.ReadString();
                Md5Checksum = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputFileType Id:{0} Parts:{1} Name:{2} Md5Checksum:{3})", Id, Parts, Name, Md5Checksum);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Parts": return Parts;
                        case "Name": return Name;
                        case "Md5Checksum": return Md5Checksum;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Parts":
                    case "Name":
                    case "Md5Checksum": return true;
                    default: return false;
                }
            }
        }

        public class InputFileBigType : InputFile
        {
            public override Types ConstructorCode => Types.InputFileBigType;

            public long Id;
            public int Parts;
            public string Name;

            public InputFileBigType() { }

            public InputFileBigType(long Id, int Parts, string Name)
            {
                this.Id = Id;
                this.Parts = Parts;
                this.Name = Name;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(Parts);
                writer.Write(Name);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
                Parts = reader.ReadInt32();
                Name = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputFileBigType Id:{0} Parts:{1} Name:{2})", Id, Parts, Name);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Parts": return Parts;
                        case "Name": return Name;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Parts":
                    case "Name": return true;
                    default: return false;
                }
            }
        }

        public class InputMediaEmptyType : InputMedia
        {
            public override Types ConstructorCode => Types.InputMediaEmptyType;

            public InputMediaEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputMediaEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputMediaUploadedPhotoType : InputMedia
        {
            public override Types ConstructorCode => Types.InputMediaUploadedPhotoType;

            public InputFile File;
            public string Caption;

            public InputMediaUploadedPhotoType() { }

            public InputMediaUploadedPhotoType(InputFile File, string Caption)
            {
                this.File = File;
                this.Caption = Caption;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                File.Write(writer);
                writer.Write(Caption);
            }

            public override void Read(TBinaryReader reader)
            {
                File = reader.Read<InputFile>();
                Caption = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputMediaUploadedPhotoType File:{0} Caption:{1})", File, Caption);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "File": return File;
                        case "Caption": return Caption;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "File":
                    case "Caption": return true;
                    default: return false;
                }
            }
        }

        public class InputMediaPhotoType : InputMedia
        {
            public override Types ConstructorCode => Types.InputMediaPhotoType;

            public InputPhoto Id;
            public string Caption;

            public InputMediaPhotoType() { }

            public InputMediaPhotoType(InputPhoto Id, string Caption)
            {
                this.Id = Id;
                this.Caption = Caption;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Id.Write(writer);
                writer.Write(Caption);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.Read<InputPhoto>();
                Caption = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputMediaPhotoType Id:{0} Caption:{1})", Id, Caption);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Caption": return Caption;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Caption": return true;
                    default: return false;
                }
            }
        }

        public class InputMediaGeoPointType : InputMedia
        {
            public override Types ConstructorCode => Types.InputMediaGeoPointType;

            public InputGeoPoint GeoPoint;

            public InputMediaGeoPointType() { }

            public InputMediaGeoPointType(InputGeoPoint GeoPoint)
            {
                this.GeoPoint = GeoPoint;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                GeoPoint.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                GeoPoint = reader.Read<InputGeoPoint>();
            }

            public override string ToString()
            {
                return string.Format("(InputMediaGeoPointType GeoPoint:{0})", GeoPoint);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "GeoPoint": return GeoPoint;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "GeoPoint": return true;
                    default: return false;
                }
            }
        }

        public class InputMediaContactType : InputMedia
        {
            public override Types ConstructorCode => Types.InputMediaContactType;

            public string PhoneNumber;
            public string FirstName;
            public string LastName;

            public InputMediaContactType() { }

            public InputMediaContactType(string PhoneNumber, string FirstName, string LastName)
            {
                this.PhoneNumber = PhoneNumber;
                this.FirstName = FirstName;
                this.LastName = LastName;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PhoneNumber);
                writer.Write(FirstName);
                writer.Write(LastName);
            }

            public override void Read(TBinaryReader reader)
            {
                PhoneNumber = reader.ReadString();
                FirstName = reader.ReadString();
                LastName = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputMediaContactType PhoneNumber:{0} FirstName:{1} LastName:{2})", PhoneNumber, FirstName, LastName);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "PhoneNumber": return PhoneNumber;
                        case "FirstName": return FirstName;
                        case "LastName": return LastName;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "PhoneNumber":
                    case "FirstName":
                    case "LastName": return true;
                    default: return false;
                }
            }
        }

        public class InputMediaUploadedDocumentType : InputMedia
        {
            public override Types ConstructorCode => Types.InputMediaUploadedDocumentType;

            public InputFile File;
            public string MimeType;
            public List<DocumentAttribute> Attributes;
            public string Caption;

            public InputMediaUploadedDocumentType() { }

            public InputMediaUploadedDocumentType(InputFile File, string MimeType, List<DocumentAttribute> Attributes, string Caption)
            {
                this.File = File;
                this.MimeType = MimeType;
                this.Attributes = Attributes;
                this.Caption = Caption;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                File.Write(writer);
                writer.Write(MimeType);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Attributes.Count);
                foreach (DocumentAttribute AttributesElement in Attributes)
                    AttributesElement.Write(writer);
                writer.Write(Caption);
            }

            public override void Read(TBinaryReader reader)
            {
                File = reader.Read<InputFile>();
                MimeType = reader.ReadString();
                reader.ReadInt32(); // vector code
                int AttributesLength = reader.ReadInt32();
                Attributes = new List<DocumentAttribute>(AttributesLength);
                for (int AttributesIndex = 0; AttributesIndex < AttributesLength; AttributesIndex++)
                    Attributes.Add(reader.Read<DocumentAttribute>());
                Caption = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputMediaUploadedDocumentType File:{0} MimeType:{1} Attributes:{2} Caption:{3})", File, MimeType, Attributes, Caption);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "File": return File;
                        case "MimeType": return MimeType;
                        case "Attributes": return Attributes;
                        case "Caption": return Caption;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "File":
                    case "MimeType":
                    case "Attributes":
                    case "Caption": return true;
                    default: return false;
                }
            }
        }

        public class InputMediaUploadedThumbDocumentType : InputMedia
        {
            public override Types ConstructorCode => Types.InputMediaUploadedThumbDocumentType;

            public InputFile File;
            public InputFile Thumb;
            public string MimeType;
            public List<DocumentAttribute> Attributes;
            public string Caption;

            public InputMediaUploadedThumbDocumentType() { }

            public InputMediaUploadedThumbDocumentType(InputFile File, InputFile Thumb, string MimeType, List<DocumentAttribute> Attributes, string Caption)
            {
                this.File = File;
                this.Thumb = Thumb;
                this.MimeType = MimeType;
                this.Attributes = Attributes;
                this.Caption = Caption;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                File.Write(writer);
                Thumb.Write(writer);
                writer.Write(MimeType);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Attributes.Count);
                foreach (DocumentAttribute AttributesElement in Attributes)
                    AttributesElement.Write(writer);
                writer.Write(Caption);
            }

            public override void Read(TBinaryReader reader)
            {
                File = reader.Read<InputFile>();
                Thumb = reader.Read<InputFile>();
                MimeType = reader.ReadString();
                reader.ReadInt32(); // vector code
                int AttributesLength = reader.ReadInt32();
                Attributes = new List<DocumentAttribute>(AttributesLength);
                for (int AttributesIndex = 0; AttributesIndex < AttributesLength; AttributesIndex++)
                    Attributes.Add(reader.Read<DocumentAttribute>());
                Caption = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputMediaUploadedThumbDocumentType File:{0} Thumb:{1} MimeType:{2} Attributes:{3} Caption:{4})", File, Thumb, MimeType, Attributes, Caption);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "File": return File;
                        case "Thumb": return Thumb;
                        case "MimeType": return MimeType;
                        case "Attributes": return Attributes;
                        case "Caption": return Caption;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "File":
                    case "Thumb":
                    case "MimeType":
                    case "Attributes":
                    case "Caption": return true;
                    default: return false;
                }
            }
        }

        public class InputMediaDocumentType : InputMedia
        {
            public override Types ConstructorCode => Types.InputMediaDocumentType;

            public InputDocument Id;
            public string Caption;

            public InputMediaDocumentType() { }

            public InputMediaDocumentType(InputDocument Id, string Caption)
            {
                this.Id = Id;
                this.Caption = Caption;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Id.Write(writer);
                writer.Write(Caption);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.Read<InputDocument>();
                Caption = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputMediaDocumentType Id:{0} Caption:{1})", Id, Caption);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Caption": return Caption;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Caption": return true;
                    default: return false;
                }
            }
        }

        public class InputMediaVenueType : InputMedia
        {
            public override Types ConstructorCode => Types.InputMediaVenueType;

            public InputGeoPoint GeoPoint;
            public string Title;
            public string Address;
            public string Provider;
            public string VenueId;

            public InputMediaVenueType() { }

            public InputMediaVenueType(InputGeoPoint GeoPoint, string Title, string Address, string Provider, string VenueId)
            {
                this.GeoPoint = GeoPoint;
                this.Title = Title;
                this.Address = Address;
                this.Provider = Provider;
                this.VenueId = VenueId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                GeoPoint.Write(writer);
                writer.Write(Title);
                writer.Write(Address);
                writer.Write(Provider);
                writer.Write(VenueId);
            }

            public override void Read(TBinaryReader reader)
            {
                GeoPoint = reader.Read<InputGeoPoint>();
                Title = reader.ReadString();
                Address = reader.ReadString();
                Provider = reader.ReadString();
                VenueId = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputMediaVenueType GeoPoint:{0} Title:{1} Address:{2} Provider:{3} VenueId:{4})", GeoPoint, Title, Address, Provider, VenueId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "GeoPoint": return GeoPoint;
                        case "Title": return Title;
                        case "Address": return Address;
                        case "Provider": return Provider;
                        case "VenueId": return VenueId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "GeoPoint":
                    case "Title":
                    case "Address":
                    case "Provider":
                    case "VenueId": return true;
                    default: return false;
                }
            }
        }

        public class InputMediaGifExternalType : InputMedia
        {
            public override Types ConstructorCode => Types.InputMediaGifExternalType;

            public string Url;
            public string Q;

            public InputMediaGifExternalType() { }

            public InputMediaGifExternalType(string Url, string Q)
            {
                this.Url = Url;
                this.Q = Q;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Url);
                writer.Write(Q);
            }

            public override void Read(TBinaryReader reader)
            {
                Url = reader.ReadString();
                Q = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputMediaGifExternalType Url:{0} Q:{1})", Url, Q);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Url": return Url;
                        case "Q": return Q;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Url":
                    case "Q": return true;
                    default: return false;
                }
            }
        }

        public class InputChatPhotoEmptyType : InputChatPhoto
        {
            public override Types ConstructorCode => Types.InputChatPhotoEmptyType;

            public InputChatPhotoEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputChatPhotoEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputChatUploadedPhotoType : InputChatPhoto
        {
            public override Types ConstructorCode => Types.InputChatUploadedPhotoType;

            public InputFile File;
            public InputPhotoCrop Crop;

            public InputChatUploadedPhotoType() { }

            public InputChatUploadedPhotoType(InputFile File, InputPhotoCrop Crop)
            {
                this.File = File;
                this.Crop = Crop;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                File.Write(writer);
                Crop.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                File = reader.Read<InputFile>();
                Crop = reader.Read<InputPhotoCrop>();
            }

            public override string ToString()
            {
                return string.Format("(InputChatUploadedPhotoType File:{0} Crop:{1})", File, Crop);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "File": return File;
                        case "Crop": return Crop;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "File":
                    case "Crop": return true;
                    default: return false;
                }
            }
        }

        public class InputChatPhotoType : InputChatPhoto
        {
            public override Types ConstructorCode => Types.InputChatPhotoType;

            public InputPhoto Id;
            public InputPhotoCrop Crop;

            public InputChatPhotoType() { }

            public InputChatPhotoType(InputPhoto Id, InputPhotoCrop Crop)
            {
                this.Id = Id;
                this.Crop = Crop;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Id.Write(writer);
                Crop.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.Read<InputPhoto>();
                Crop = reader.Read<InputPhotoCrop>();
            }

            public override string ToString()
            {
                return string.Format("(InputChatPhotoType Id:{0} Crop:{1})", Id, Crop);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Crop": return Crop;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Crop": return true;
                    default: return false;
                }
            }
        }

        public class InputGeoPointEmptyType : InputGeoPoint
        {
            public override Types ConstructorCode => Types.InputGeoPointEmptyType;

            public InputGeoPointEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputGeoPointEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputGeoPointType : InputGeoPoint
        {
            public override Types ConstructorCode => Types.InputGeoPointType;

            public double Lat;
            public double Long;

            public InputGeoPointType() { }

            public InputGeoPointType(double Lat, double Long)
            {
                this.Lat = Lat;
                this.Long = Long;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Lat);
                writer.Write(Long);
            }

            public override void Read(TBinaryReader reader)
            {
                Lat = reader.ReadDouble();
                Long = reader.ReadDouble();
            }

            public override string ToString()
            {
                return string.Format("(InputGeoPointType Lat:{0} Long:{1})", Lat, Long);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Lat": return Lat;
                        case "Long": return Long;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Lat":
                    case "Long": return true;
                    default: return false;
                }
            }
        }

        public class InputPhotoEmptyType : InputPhoto
        {
            public override Types ConstructorCode => Types.InputPhotoEmptyType;

            public InputPhotoEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputPhotoEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputPhotoType : InputPhoto
        {
            public override Types ConstructorCode => Types.InputPhotoType;

            public long Id;
            public long AccessHash;

            public InputPhotoType() { }

            public InputPhotoType(long Id, long AccessHash)
            {
                this.Id = Id;
                this.AccessHash = AccessHash;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(AccessHash);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
                AccessHash = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(InputPhotoType Id:{0} AccessHash:{1})", Id, AccessHash);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "AccessHash": return true;
                    default: return false;
                }
            }
        }

        public class InputFileLocationType : InputFileLocation
        {
            public override Types ConstructorCode => Types.InputFileLocationType;

            public long VolumeId;
            public int LocalId;
            public long Secret;

            public InputFileLocationType() { }

            public InputFileLocationType(long VolumeId, int LocalId, long Secret)
            {
                this.VolumeId = VolumeId;
                this.LocalId = LocalId;
                this.Secret = Secret;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(VolumeId);
                writer.Write(LocalId);
                writer.Write(Secret);
            }

            public override void Read(TBinaryReader reader)
            {
                VolumeId = reader.ReadInt64();
                LocalId = reader.ReadInt32();
                Secret = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(InputFileLocationType VolumeId:{0} LocalId:{1} Secret:{2})", VolumeId, LocalId, Secret);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "VolumeId": return VolumeId;
                        case "LocalId": return LocalId;
                        case "Secret": return Secret;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "VolumeId":
                    case "LocalId":
                    case "Secret": return true;
                    default: return false;
                }
            }
        }

        public class InputEncryptedFileLocationType : InputFileLocation
        {
            public override Types ConstructorCode => Types.InputEncryptedFileLocationType;

            public long Id;
            public long AccessHash;

            public InputEncryptedFileLocationType() { }

            public InputEncryptedFileLocationType(long Id, long AccessHash)
            {
                this.Id = Id;
                this.AccessHash = AccessHash;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(AccessHash);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
                AccessHash = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(InputEncryptedFileLocationType Id:{0} AccessHash:{1})", Id, AccessHash);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "AccessHash": return true;
                    default: return false;
                }
            }
        }

        public class InputDocumentFileLocationType : InputFileLocation
        {
            public override Types ConstructorCode => Types.InputDocumentFileLocationType;

            public long Id;
            public long AccessHash;

            public InputDocumentFileLocationType() { }

            public InputDocumentFileLocationType(long Id, long AccessHash)
            {
                this.Id = Id;
                this.AccessHash = AccessHash;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(AccessHash);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
                AccessHash = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(InputDocumentFileLocationType Id:{0} AccessHash:{1})", Id, AccessHash);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "AccessHash": return true;
                    default: return false;
                }
            }
        }

        public class InputPhotoCropAutoType : InputPhotoCrop
        {
            public override Types ConstructorCode => Types.InputPhotoCropAutoType;

            public InputPhotoCropAutoType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputPhotoCropAutoType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputPhotoCropType : InputPhotoCrop
        {
            public override Types ConstructorCode => Types.InputPhotoCropType;

            public double CropLeft;
            public double CropTop;
            public double CropWidth;

            public InputPhotoCropType() { }

            public InputPhotoCropType(double CropLeft, double CropTop, double CropWidth)
            {
                this.CropLeft = CropLeft;
                this.CropTop = CropTop;
                this.CropWidth = CropWidth;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(CropLeft);
                writer.Write(CropTop);
                writer.Write(CropWidth);
            }

            public override void Read(TBinaryReader reader)
            {
                CropLeft = reader.ReadDouble();
                CropTop = reader.ReadDouble();
                CropWidth = reader.ReadDouble();
            }

            public override string ToString()
            {
                return string.Format("(InputPhotoCropType CropLeft:{0} CropTop:{1} CropWidth:{2})", CropLeft, CropTop, CropWidth);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "CropLeft": return CropLeft;
                        case "CropTop": return CropTop;
                        case "CropWidth": return CropWidth;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "CropLeft":
                    case "CropTop":
                    case "CropWidth": return true;
                    default: return false;
                }
            }
        }

        public class InputAppEventType : InputAppEvent
        {
            public override Types ConstructorCode => Types.InputAppEventType;

            public double Time;
            public string Type;
            public long Peer;
            public string Data;

            public InputAppEventType() { }

            public InputAppEventType(double Time, string Type, long Peer, string Data)
            {
                this.Time = Time;
                this.Type = Type;
                this.Peer = Peer;
                this.Data = Data;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Time);
                writer.Write(Type);
                writer.Write(Peer);
                writer.Write(Data);
            }

            public override void Read(TBinaryReader reader)
            {
                Time = reader.ReadDouble();
                Type = reader.ReadString();
                Peer = reader.ReadInt64();
                Data = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputAppEventType Time:{0} Type:{1} Peer:{2} Data:{3})", Time, Type, Peer, Data);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Time": return Time;
                        case "Type": return Type;
                        case "Peer": return Peer;
                        case "Data": return Data;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Time":
                    case "Type":
                    case "Peer":
                    case "Data": return true;
                    default: return false;
                }
            }
        }

        public class PeerUserType : Peer
        {
            public override Types ConstructorCode => Types.PeerUserType;

            public int UserId;

            public PeerUserType() { }

            public PeerUserType(int UserId)
            {
                this.UserId = UserId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(PeerUserType UserId:{0})", UserId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId": return true;
                    default: return false;
                }
            }
        }

        public class PeerChatType : Peer
        {
            public override Types ConstructorCode => Types.PeerChatType;

            public int ChatId;

            public PeerChatType() { }

            public PeerChatType(int ChatId)
            {
                this.ChatId = ChatId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
            }

            public override void Read(TBinaryReader reader)
            {
                ChatId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(PeerChatType ChatId:{0})", ChatId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChatId": return ChatId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChatId": return true;
                    default: return false;
                }
            }
        }

        public class PeerChannelType : Peer
        {
            public override Types ConstructorCode => Types.PeerChannelType;

            public int ChannelId;

            public PeerChannelType() { }

            public PeerChannelType(int ChannelId)
            {
                this.ChannelId = ChannelId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChannelId);
            }

            public override void Read(TBinaryReader reader)
            {
                ChannelId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(PeerChannelType ChannelId:{0})", ChannelId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChannelId": return ChannelId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChannelId": return true;
                    default: return false;
                }
            }
        }

        public class StorageFileUnknownType : StorageFileType
        {
            public override Types ConstructorCode => Types.StorageFileUnknownType;

            public StorageFileUnknownType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(StorageFileUnknownType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class StorageFileJpegType : StorageFileType
        {
            public override Types ConstructorCode => Types.StorageFileJpegType;

            public StorageFileJpegType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(StorageFileJpegType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class StorageFileGifType : StorageFileType
        {
            public override Types ConstructorCode => Types.StorageFileGifType;

            public StorageFileGifType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(StorageFileGifType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class StorageFilePngType : StorageFileType
        {
            public override Types ConstructorCode => Types.StorageFilePngType;

            public StorageFilePngType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(StorageFilePngType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class StorageFilePdfType : StorageFileType
        {
            public override Types ConstructorCode => Types.StorageFilePdfType;

            public StorageFilePdfType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(StorageFilePdfType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class StorageFileMp3Type : StorageFileType
        {
            public override Types ConstructorCode => Types.StorageFileMp3Type;

            public StorageFileMp3Type() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(StorageFileMp3Type)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class StorageFileMovType : StorageFileType
        {
            public override Types ConstructorCode => Types.StorageFileMovType;

            public StorageFileMovType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(StorageFileMovType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class StorageFilePartialType : StorageFileType
        {
            public override Types ConstructorCode => Types.StorageFilePartialType;

            public StorageFilePartialType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(StorageFilePartialType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class StorageFileMp4Type : StorageFileType
        {
            public override Types ConstructorCode => Types.StorageFileMp4Type;

            public StorageFileMp4Type() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(StorageFileMp4Type)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class StorageFileWebpType : StorageFileType
        {
            public override Types ConstructorCode => Types.StorageFileWebpType;

            public StorageFileWebpType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(StorageFileWebpType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class FileLocationUnavailableType : FileLocation
        {
            public override Types ConstructorCode => Types.FileLocationUnavailableType;

            public long VolumeId;
            public int LocalId;
            public long Secret;

            public FileLocationUnavailableType() { }

            public FileLocationUnavailableType(long VolumeId, int LocalId, long Secret)
            {
                this.VolumeId = VolumeId;
                this.LocalId = LocalId;
                this.Secret = Secret;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(VolumeId);
                writer.Write(LocalId);
                writer.Write(Secret);
            }

            public override void Read(TBinaryReader reader)
            {
                VolumeId = reader.ReadInt64();
                LocalId = reader.ReadInt32();
                Secret = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(FileLocationUnavailableType VolumeId:{0} LocalId:{1} Secret:{2})", VolumeId, LocalId, Secret);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "VolumeId": return VolumeId;
                        case "LocalId": return LocalId;
                        case "Secret": return Secret;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "VolumeId":
                    case "LocalId":
                    case "Secret": return true;
                    default: return false;
                }
            }
        }

        public class FileLocationType : FileLocation
        {
            public override Types ConstructorCode => Types.FileLocationType;

            public int DcId;
            public long VolumeId;
            public int LocalId;
            public long Secret;

            public FileLocationType() { }

            public FileLocationType(int DcId, long VolumeId, int LocalId, long Secret)
            {
                this.DcId = DcId;
                this.VolumeId = VolumeId;
                this.LocalId = LocalId;
                this.Secret = Secret;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(DcId);
                writer.Write(VolumeId);
                writer.Write(LocalId);
                writer.Write(Secret);
            }

            public override void Read(TBinaryReader reader)
            {
                DcId = reader.ReadInt32();
                VolumeId = reader.ReadInt64();
                LocalId = reader.ReadInt32();
                Secret = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(FileLocationType DcId:{0} VolumeId:{1} LocalId:{2} Secret:{3})", DcId, VolumeId, LocalId, Secret);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "DcId": return DcId;
                        case "VolumeId": return VolumeId;
                        case "LocalId": return LocalId;
                        case "Secret": return Secret;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "DcId":
                    case "VolumeId":
                    case "LocalId":
                    case "Secret": return true;
                    default: return false;
                }
            }
        }

        public class UserEmptyType : User
        {
            public override Types ConstructorCode => Types.UserEmptyType;

            public int Id;

            public UserEmptyType() { }

            public UserEmptyType(int Id)
            {
                this.Id = Id;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UserEmptyType Id:{0})", Id);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id": return true;
                    default: return false;
                }
            }
        }

        public class UserType : User
        {
            public override Types ConstructorCode => Types.UserType;

            public True Self;
            public True Contact;
            public True MutualContact;
            public True Deleted;
            public True Bot;
            public True BotChatHistory;
            public True BotNochats;
            public True Verified;
            public True Restricted;
            public True Min;
            public True BotInlineGeo;
            public int Id;
            public long? AccessHash;
            public string FirstName;
            public string LastName;
            public string Username;
            public string Phone;
            public UserProfilePhoto Photo;
            public UserStatus Status;
            public int? BotInfoVersion;
            public string RestrictionReason;
            public string BotInlinePlaceholder;

            public UserType() { }

            /// <summary>
            /// The following arguments can be null: Self, Contact, MutualContact, Deleted, Bot, BotChatHistory, BotNochats, Verified, Restricted, Min, BotInlineGeo, AccessHash, FirstName, LastName, Username, Phone, Photo, Status, BotInfoVersion, RestrictionReason, BotInlinePlaceholder
            /// </summary>
            /// <param name="Self">Can be null</param>
            /// <param name="Contact">Can be null</param>
            /// <param name="MutualContact">Can be null</param>
            /// <param name="Deleted">Can be null</param>
            /// <param name="Bot">Can be null</param>
            /// <param name="BotChatHistory">Can be null</param>
            /// <param name="BotNochats">Can be null</param>
            /// <param name="Verified">Can be null</param>
            /// <param name="Restricted">Can be null</param>
            /// <param name="Min">Can be null</param>
            /// <param name="BotInlineGeo">Can be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="AccessHash">Can be null</param>
            /// <param name="FirstName">Can be null</param>
            /// <param name="LastName">Can be null</param>
            /// <param name="Username">Can be null</param>
            /// <param name="Phone">Can be null</param>
            /// <param name="Photo">Can be null</param>
            /// <param name="Status">Can be null</param>
            /// <param name="BotInfoVersion">Can be null</param>
            /// <param name="RestrictionReason">Can be null</param>
            /// <param name="BotInlinePlaceholder">Can be null</param>
            public UserType(True Self, True Contact, True MutualContact, True Deleted, True Bot, True BotChatHistory, True BotNochats, True Verified, True Restricted, True Min, True BotInlineGeo, int Id, long? AccessHash, string FirstName, string LastName, string Username, string Phone, UserProfilePhoto Photo, UserStatus Status, int? BotInfoVersion, string RestrictionReason, string BotInlinePlaceholder)
            {
                this.Self = Self;
                this.Contact = Contact;
                this.MutualContact = MutualContact;
                this.Deleted = Deleted;
                this.Bot = Bot;
                this.BotChatHistory = BotChatHistory;
                this.BotNochats = BotNochats;
                this.Verified = Verified;
                this.Restricted = Restricted;
                this.Min = Min;
                this.BotInlineGeo = BotInlineGeo;
                this.Id = Id;
                this.AccessHash = AccessHash;
                this.FirstName = FirstName;
                this.LastName = LastName;
                this.Username = Username;
                this.Phone = Phone;
                this.Photo = Photo;
                this.Status = Status;
                this.BotInfoVersion = BotInfoVersion;
                this.RestrictionReason = RestrictionReason;
                this.BotInlinePlaceholder = BotInlinePlaceholder;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Self != null ? 1 << 10 : 0) |
                    (Contact != null ? 1 << 11 : 0) |
                    (MutualContact != null ? 1 << 12 : 0) |
                    (Deleted != null ? 1 << 13 : 0) |
                    (Bot != null ? 1 << 14 : 0) |
                    (BotChatHistory != null ? 1 << 15 : 0) |
                    (BotNochats != null ? 1 << 16 : 0) |
                    (Verified != null ? 1 << 17 : 0) |
                    (Restricted != null ? 1 << 18 : 0) |
                    (Min != null ? 1 << 20 : 0) |
                    (BotInlineGeo != null ? 1 << 21 : 0) |
                    (AccessHash != null ? 1 << 0 : 0) |
                    (FirstName != null ? 1 << 1 : 0) |
                    (LastName != null ? 1 << 2 : 0) |
                    (Username != null ? 1 << 3 : 0) |
                    (Phone != null ? 1 << 4 : 0) |
                    (Photo != null ? 1 << 5 : 0) |
                    (Status != null ? 1 << 6 : 0) |
                    (BotInfoVersion != null ? 1 << 14 : 0) |
                    (RestrictionReason != null ? 1 << 18 : 0) |
                    (BotInlinePlaceholder != null ? 1 << 19 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Self != null)
                {

                }

                if (Contact != null)
                {

                }

                if (MutualContact != null)
                {

                }

                if (Deleted != null)
                {

                }

                if (Bot != null)
                {

                }

                if (BotChatHistory != null)
                {

                }

                if (BotNochats != null)
                {

                }

                if (Verified != null)
                {

                }

                if (Restricted != null)
                {

                }

                if (Min != null)
                {

                }

                if (BotInlineGeo != null)
                {

                }

                writer.Write(Id);
                if (AccessHash != null)
                {
                    writer.Write(AccessHash.Value);
                }

                if (FirstName != null)
                {
                    writer.Write(FirstName);
                }

                if (LastName != null)
                {
                    writer.Write(LastName);
                }

                if (Username != null)
                {
                    writer.Write(Username);
                }

                if (Phone != null)
                {
                    writer.Write(Phone);
                }

                if (Photo != null)
                {
                    Photo.Write(writer);
                }

                if (Status != null)
                {
                    Status.Write(writer);
                }

                if (BotInfoVersion != null)
                {
                    writer.Write(BotInfoVersion.Value);
                }

                if (RestrictionReason != null)
                {
                    writer.Write(RestrictionReason);
                }

                if (BotInlinePlaceholder != null)
                {
                    writer.Write(BotInlinePlaceholder);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 10)) != 0)
                {
                    Self = reader.ReadTrue();
                }

                if ((flags & (1 << 11)) != 0)
                {
                    Contact = reader.ReadTrue();
                }

                if ((flags & (1 << 12)) != 0)
                {
                    MutualContact = reader.ReadTrue();
                }

                if ((flags & (1 << 13)) != 0)
                {
                    Deleted = reader.ReadTrue();
                }

                if ((flags & (1 << 14)) != 0)
                {
                    Bot = reader.ReadTrue();
                }

                if ((flags & (1 << 15)) != 0)
                {
                    BotChatHistory = reader.ReadTrue();
                }

                if ((flags & (1 << 16)) != 0)
                {
                    BotNochats = reader.ReadTrue();
                }

                if ((flags & (1 << 17)) != 0)
                {
                    Verified = reader.ReadTrue();
                }

                if ((flags & (1 << 18)) != 0)
                {
                    Restricted = reader.ReadTrue();
                }

                if ((flags & (1 << 20)) != 0)
                {
                    Min = reader.ReadTrue();
                }

                if ((flags & (1 << 21)) != 0)
                {
                    BotInlineGeo = reader.ReadTrue();
                }

                Id = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    AccessHash = reader.ReadInt64();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    FirstName = reader.ReadString();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    LastName = reader.ReadString();
                }

                if ((flags & (1 << 3)) != 0)
                {
                    Username = reader.ReadString();
                }

                if ((flags & (1 << 4)) != 0)
                {
                    Phone = reader.ReadString();
                }

                if ((flags & (1 << 5)) != 0)
                {
                    Photo = reader.Read<UserProfilePhoto>();
                }

                if ((flags & (1 << 6)) != 0)
                {
                    Status = reader.Read<UserStatus>();
                }

                if ((flags & (1 << 14)) != 0)
                {
                    BotInfoVersion = reader.ReadInt32();
                }

                if ((flags & (1 << 18)) != 0)
                {
                    RestrictionReason = reader.ReadString();
                }

                if ((flags & (1 << 19)) != 0)
                {
                    BotInlinePlaceholder = reader.ReadString();
                }

            }

            public override string ToString()
            {
                return string.Format("(UserType Self:{0} Contact:{1} MutualContact:{2} Deleted:{3} Bot:{4} BotChatHistory:{5} BotNochats:{6} Verified:{7} Restricted:{8} Min:{9} BotInlineGeo:{10} Id:{11} AccessHash:{12} FirstName:{13} LastName:{14} Username:{15} Phone:{16} Photo:{17} Status:{18} BotInfoVersion:{19} RestrictionReason:{20} BotInlinePlaceholder:{21})", Self, Contact, MutualContact, Deleted, Bot, BotChatHistory, BotNochats, Verified, Restricted, Min, BotInlineGeo, Id, AccessHash, FirstName, LastName, Username, Phone, Photo, Status, BotInfoVersion, RestrictionReason, BotInlinePlaceholder);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Self": return Self;
                        case "Contact": return Contact;
                        case "MutualContact": return MutualContact;
                        case "Deleted": return Deleted;
                        case "Bot": return Bot;
                        case "BotChatHistory": return BotChatHistory;
                        case "BotNochats": return BotNochats;
                        case "Verified": return Verified;
                        case "Restricted": return Restricted;
                        case "Min": return Min;
                        case "BotInlineGeo": return BotInlineGeo;
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        case "FirstName": return FirstName;
                        case "LastName": return LastName;
                        case "Username": return Username;
                        case "Phone": return Phone;
                        case "Photo": return Photo;
                        case "Status": return Status;
                        case "BotInfoVersion": return BotInfoVersion;
                        case "RestrictionReason": return RestrictionReason;
                        case "BotInlinePlaceholder": return BotInlinePlaceholder;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Self":
                    case "Contact":
                    case "MutualContact":
                    case "Deleted":
                    case "Bot":
                    case "BotChatHistory":
                    case "BotNochats":
                    case "Verified":
                    case "Restricted":
                    case "Min":
                    case "BotInlineGeo":
                    case "Id":
                    case "AccessHash":
                    case "FirstName":
                    case "LastName":
                    case "Username":
                    case "Phone":
                    case "Photo":
                    case "Status":
                    case "BotInfoVersion":
                    case "RestrictionReason":
                    case "BotInlinePlaceholder": return true;
                    default: return false;
                }
            }
        }

        public class UserProfilePhotoEmptyType : UserProfilePhoto
        {
            public override Types ConstructorCode => Types.UserProfilePhotoEmptyType;

            public UserProfilePhotoEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(UserProfilePhotoEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class UserProfilePhotoType : UserProfilePhoto
        {
            public override Types ConstructorCode => Types.UserProfilePhotoType;

            public long PhotoId;
            public FileLocation PhotoSmall;
            public FileLocation PhotoBig;

            public UserProfilePhotoType() { }

            public UserProfilePhotoType(long PhotoId, FileLocation PhotoSmall, FileLocation PhotoBig)
            {
                this.PhotoId = PhotoId;
                this.PhotoSmall = PhotoSmall;
                this.PhotoBig = PhotoBig;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PhotoId);
                PhotoSmall.Write(writer);
                PhotoBig.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                PhotoId = reader.ReadInt64();
                PhotoSmall = reader.Read<FileLocation>();
                PhotoBig = reader.Read<FileLocation>();
            }

            public override string ToString()
            {
                return string.Format("(UserProfilePhotoType PhotoId:{0} PhotoSmall:{1} PhotoBig:{2})", PhotoId, PhotoSmall, PhotoBig);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "PhotoId": return PhotoId;
                        case "PhotoSmall": return PhotoSmall;
                        case "PhotoBig": return PhotoBig;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "PhotoId":
                    case "PhotoSmall":
                    case "PhotoBig": return true;
                    default: return false;
                }
            }
        }

        public class UserStatusEmptyType : UserStatus
        {
            public override Types ConstructorCode => Types.UserStatusEmptyType;

            public UserStatusEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(UserStatusEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class UserStatusOnlineType : UserStatus
        {
            public override Types ConstructorCode => Types.UserStatusOnlineType;

            public int Expires;

            public UserStatusOnlineType() { }

            public UserStatusOnlineType(int Expires)
            {
                this.Expires = Expires;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Expires);
            }

            public override void Read(TBinaryReader reader)
            {
                Expires = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UserStatusOnlineType Expires:{0})", Expires);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Expires": return Expires;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Expires": return true;
                    default: return false;
                }
            }
        }

        public class UserStatusOfflineType : UserStatus
        {
            public override Types ConstructorCode => Types.UserStatusOfflineType;

            public int WasOnline;

            public UserStatusOfflineType() { }

            public UserStatusOfflineType(int WasOnline)
            {
                this.WasOnline = WasOnline;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(WasOnline);
            }

            public override void Read(TBinaryReader reader)
            {
                WasOnline = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UserStatusOfflineType WasOnline:{0})", WasOnline);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "WasOnline": return WasOnline;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "WasOnline": return true;
                    default: return false;
                }
            }
        }

        public class UserStatusRecentlyType : UserStatus
        {
            public override Types ConstructorCode => Types.UserStatusRecentlyType;

            public UserStatusRecentlyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(UserStatusRecentlyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class UserStatusLastWeekType : UserStatus
        {
            public override Types ConstructorCode => Types.UserStatusLastWeekType;

            public UserStatusLastWeekType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(UserStatusLastWeekType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class UserStatusLastMonthType : UserStatus
        {
            public override Types ConstructorCode => Types.UserStatusLastMonthType;

            public UserStatusLastMonthType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(UserStatusLastMonthType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ChatEmptyType : Chat
        {
            public override Types ConstructorCode => Types.ChatEmptyType;

            public int Id;

            public ChatEmptyType() { }

            public ChatEmptyType(int Id)
            {
                this.Id = Id;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(ChatEmptyType Id:{0})", Id);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id": return true;
                    default: return false;
                }
            }
        }

        public class ChatType : Chat
        {
            public override Types ConstructorCode => Types.ChatType;

            public True Creator;
            public True Kicked;
            public True Left;
            public True AdminsEnabled;
            public True Admin;
            public True Deactivated;
            public int Id;
            public string Title;
            public ChatPhoto Photo;
            public int ParticipantsCount;
            public int Date;
            public int Version;
            public InputChannel MigratedTo;

            public ChatType() { }

            /// <summary>
            /// The following arguments can be null: Creator, Kicked, Left, AdminsEnabled, Admin, Deactivated, MigratedTo
            /// </summary>
            /// <param name="Creator">Can be null</param>
            /// <param name="Kicked">Can be null</param>
            /// <param name="Left">Can be null</param>
            /// <param name="AdminsEnabled">Can be null</param>
            /// <param name="Admin">Can be null</param>
            /// <param name="Deactivated">Can be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="Title">Can NOT be null</param>
            /// <param name="Photo">Can NOT be null</param>
            /// <param name="ParticipantsCount">Can NOT be null</param>
            /// <param name="Date">Can NOT be null</param>
            /// <param name="Version">Can NOT be null</param>
            /// <param name="MigratedTo">Can be null</param>
            public ChatType(True Creator, True Kicked, True Left, True AdminsEnabled, True Admin, True Deactivated, int Id, string Title, ChatPhoto Photo, int ParticipantsCount, int Date, int Version, InputChannel MigratedTo)
            {
                this.Creator = Creator;
                this.Kicked = Kicked;
                this.Left = Left;
                this.AdminsEnabled = AdminsEnabled;
                this.Admin = Admin;
                this.Deactivated = Deactivated;
                this.Id = Id;
                this.Title = Title;
                this.Photo = Photo;
                this.ParticipantsCount = ParticipantsCount;
                this.Date = Date;
                this.Version = Version;
                this.MigratedTo = MigratedTo;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Creator != null ? 1 << 0 : 0) |
                    (Kicked != null ? 1 << 1 : 0) |
                    (Left != null ? 1 << 2 : 0) |
                    (AdminsEnabled != null ? 1 << 3 : 0) |
                    (Admin != null ? 1 << 4 : 0) |
                    (Deactivated != null ? 1 << 5 : 0) |
                    (MigratedTo != null ? 1 << 6 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Creator != null)
                {

                }

                if (Kicked != null)
                {

                }

                if (Left != null)
                {

                }

                if (AdminsEnabled != null)
                {

                }

                if (Admin != null)
                {

                }

                if (Deactivated != null)
                {

                }

                writer.Write(Id);
                writer.Write(Title);
                Photo.Write(writer);
                writer.Write(ParticipantsCount);
                writer.Write(Date);
                writer.Write(Version);
                if (MigratedTo != null)
                {
                    MigratedTo.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    Creator = reader.ReadTrue();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    Kicked = reader.ReadTrue();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    Left = reader.ReadTrue();
                }

                if ((flags & (1 << 3)) != 0)
                {
                    AdminsEnabled = reader.ReadTrue();
                }

                if ((flags & (1 << 4)) != 0)
                {
                    Admin = reader.ReadTrue();
                }

                if ((flags & (1 << 5)) != 0)
                {
                    Deactivated = reader.ReadTrue();
                }

                Id = reader.ReadInt32();
                Title = reader.ReadString();
                Photo = reader.Read<ChatPhoto>();
                ParticipantsCount = reader.ReadInt32();
                Date = reader.ReadInt32();
                Version = reader.ReadInt32();
                if ((flags & (1 << 6)) != 0)
                {
                    MigratedTo = reader.Read<InputChannel>();
                }

            }

            public override string ToString()
            {
                return string.Format("(ChatType Creator:{0} Kicked:{1} Left:{2} AdminsEnabled:{3} Admin:{4} Deactivated:{5} Id:{6} Title:{7} Photo:{8} ParticipantsCount:{9} Date:{10} Version:{11} MigratedTo:{12})", Creator, Kicked, Left, AdminsEnabled, Admin, Deactivated, Id, Title, Photo, ParticipantsCount, Date, Version, MigratedTo);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Creator": return Creator;
                        case "Kicked": return Kicked;
                        case "Left": return Left;
                        case "AdminsEnabled": return AdminsEnabled;
                        case "Admin": return Admin;
                        case "Deactivated": return Deactivated;
                        case "Id": return Id;
                        case "Title": return Title;
                        case "Photo": return Photo;
                        case "ParticipantsCount": return ParticipantsCount;
                        case "Date": return Date;
                        case "Version": return Version;
                        case "MigratedTo": return MigratedTo;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Creator":
                    case "Kicked":
                    case "Left":
                    case "AdminsEnabled":
                    case "Admin":
                    case "Deactivated":
                    case "Id":
                    case "Title":
                    case "Photo":
                    case "ParticipantsCount":
                    case "Date":
                    case "Version":
                    case "MigratedTo": return true;
                    default: return false;
                }
            }
        }

        public class ChatForbiddenType : Chat
        {
            public override Types ConstructorCode => Types.ChatForbiddenType;

            public int Id;
            public string Title;

            public ChatForbiddenType() { }

            public ChatForbiddenType(int Id, string Title)
            {
                this.Id = Id;
                this.Title = Title;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(Title);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
                Title = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(ChatForbiddenType Id:{0} Title:{1})", Id, Title);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Title": return Title;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Title": return true;
                    default: return false;
                }
            }
        }

        public class ChannelType : Chat
        {
            public override Types ConstructorCode => Types.ChannelType;

            public True Creator;
            public True Kicked;
            public True Left;
            public True Editor;
            public True Moderator;
            public True Broadcast;
            public True Verified;
            public True Megagroup;
            public True Restricted;
            public True Democracy;
            public True Signatures;
            public True Min;
            public int Id;
            public long? AccessHash;
            public string Title;
            public string Username;
            public ChatPhoto Photo;
            public int Date;
            public int Version;
            public string RestrictionReason;

            public ChannelType() { }

            /// <summary>
            /// The following arguments can be null: Creator, Kicked, Left, Editor, Moderator, Broadcast, Verified, Megagroup, Restricted, Democracy, Signatures, Min, AccessHash, Username, RestrictionReason
            /// </summary>
            /// <param name="Creator">Can be null</param>
            /// <param name="Kicked">Can be null</param>
            /// <param name="Left">Can be null</param>
            /// <param name="Editor">Can be null</param>
            /// <param name="Moderator">Can be null</param>
            /// <param name="Broadcast">Can be null</param>
            /// <param name="Verified">Can be null</param>
            /// <param name="Megagroup">Can be null</param>
            /// <param name="Restricted">Can be null</param>
            /// <param name="Democracy">Can be null</param>
            /// <param name="Signatures">Can be null</param>
            /// <param name="Min">Can be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="AccessHash">Can be null</param>
            /// <param name="Title">Can NOT be null</param>
            /// <param name="Username">Can be null</param>
            /// <param name="Photo">Can NOT be null</param>
            /// <param name="Date">Can NOT be null</param>
            /// <param name="Version">Can NOT be null</param>
            /// <param name="RestrictionReason">Can be null</param>
            public ChannelType(True Creator, True Kicked, True Left, True Editor, True Moderator, True Broadcast, True Verified, True Megagroup, True Restricted, True Democracy, True Signatures, True Min, int Id, long? AccessHash, string Title, string Username, ChatPhoto Photo, int Date, int Version, string RestrictionReason)
            {
                this.Creator = Creator;
                this.Kicked = Kicked;
                this.Left = Left;
                this.Editor = Editor;
                this.Moderator = Moderator;
                this.Broadcast = Broadcast;
                this.Verified = Verified;
                this.Megagroup = Megagroup;
                this.Restricted = Restricted;
                this.Democracy = Democracy;
                this.Signatures = Signatures;
                this.Min = Min;
                this.Id = Id;
                this.AccessHash = AccessHash;
                this.Title = Title;
                this.Username = Username;
                this.Photo = Photo;
                this.Date = Date;
                this.Version = Version;
                this.RestrictionReason = RestrictionReason;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Creator != null ? 1 << 0 : 0) |
                    (Kicked != null ? 1 << 1 : 0) |
                    (Left != null ? 1 << 2 : 0) |
                    (Editor != null ? 1 << 3 : 0) |
                    (Moderator != null ? 1 << 4 : 0) |
                    (Broadcast != null ? 1 << 5 : 0) |
                    (Verified != null ? 1 << 7 : 0) |
                    (Megagroup != null ? 1 << 8 : 0) |
                    (Restricted != null ? 1 << 9 : 0) |
                    (Democracy != null ? 1 << 10 : 0) |
                    (Signatures != null ? 1 << 11 : 0) |
                    (Min != null ? 1 << 12 : 0) |
                    (AccessHash != null ? 1 << 13 : 0) |
                    (Username != null ? 1 << 6 : 0) |
                    (RestrictionReason != null ? 1 << 9 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Creator != null)
                {

                }

                if (Kicked != null)
                {

                }

                if (Left != null)
                {

                }

                if (Editor != null)
                {

                }

                if (Moderator != null)
                {

                }

                if (Broadcast != null)
                {

                }

                if (Verified != null)
                {

                }

                if (Megagroup != null)
                {

                }

                if (Restricted != null)
                {

                }

                if (Democracy != null)
                {

                }

                if (Signatures != null)
                {

                }

                if (Min != null)
                {

                }

                writer.Write(Id);
                if (AccessHash != null)
                {
                    writer.Write(AccessHash.Value);
                }

                writer.Write(Title);
                if (Username != null)
                {
                    writer.Write(Username);
                }

                Photo.Write(writer);
                writer.Write(Date);
                writer.Write(Version);
                if (RestrictionReason != null)
                {
                    writer.Write(RestrictionReason);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    Creator = reader.ReadTrue();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    Kicked = reader.ReadTrue();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    Left = reader.ReadTrue();
                }

                if ((flags & (1 << 3)) != 0)
                {
                    Editor = reader.ReadTrue();
                }

                if ((flags & (1 << 4)) != 0)
                {
                    Moderator = reader.ReadTrue();
                }

                if ((flags & (1 << 5)) != 0)
                {
                    Broadcast = reader.ReadTrue();
                }

                if ((flags & (1 << 7)) != 0)
                {
                    Verified = reader.ReadTrue();
                }

                if ((flags & (1 << 8)) != 0)
                {
                    Megagroup = reader.ReadTrue();
                }

                if ((flags & (1 << 9)) != 0)
                {
                    Restricted = reader.ReadTrue();
                }

                if ((flags & (1 << 10)) != 0)
                {
                    Democracy = reader.ReadTrue();
                }

                if ((flags & (1 << 11)) != 0)
                {
                    Signatures = reader.ReadTrue();
                }

                if ((flags & (1 << 12)) != 0)
                {
                    Min = reader.ReadTrue();
                }

                Id = reader.ReadInt32();
                if ((flags & (1 << 13)) != 0)
                {
                    AccessHash = reader.ReadInt64();
                }

                Title = reader.ReadString();
                if ((flags & (1 << 6)) != 0)
                {
                    Username = reader.ReadString();
                }

                Photo = reader.Read<ChatPhoto>();
                Date = reader.ReadInt32();
                Version = reader.ReadInt32();
                if ((flags & (1 << 9)) != 0)
                {
                    RestrictionReason = reader.ReadString();
                }

            }

            public override string ToString()
            {
                return string.Format("(ChannelType Creator:{0} Kicked:{1} Left:{2} Editor:{3} Moderator:{4} Broadcast:{5} Verified:{6} Megagroup:{7} Restricted:{8} Democracy:{9} Signatures:{10} Min:{11} Id:{12} AccessHash:{13} Title:{14} Username:{15} Photo:{16} Date:{17} Version:{18} RestrictionReason:{19})", Creator, Kicked, Left, Editor, Moderator, Broadcast, Verified, Megagroup, Restricted, Democracy, Signatures, Min, Id, AccessHash, Title, Username, Photo, Date, Version, RestrictionReason);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Creator": return Creator;
                        case "Kicked": return Kicked;
                        case "Left": return Left;
                        case "Editor": return Editor;
                        case "Moderator": return Moderator;
                        case "Broadcast": return Broadcast;
                        case "Verified": return Verified;
                        case "Megagroup": return Megagroup;
                        case "Restricted": return Restricted;
                        case "Democracy": return Democracy;
                        case "Signatures": return Signatures;
                        case "Min": return Min;
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        case "Title": return Title;
                        case "Username": return Username;
                        case "Photo": return Photo;
                        case "Date": return Date;
                        case "Version": return Version;
                        case "RestrictionReason": return RestrictionReason;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Creator":
                    case "Kicked":
                    case "Left":
                    case "Editor":
                    case "Moderator":
                    case "Broadcast":
                    case "Verified":
                    case "Megagroup":
                    case "Restricted":
                    case "Democracy":
                    case "Signatures":
                    case "Min":
                    case "Id":
                    case "AccessHash":
                    case "Title":
                    case "Username":
                    case "Photo":
                    case "Date":
                    case "Version":
                    case "RestrictionReason": return true;
                    default: return false;
                }
            }
        }

        public class ChannelForbiddenType : Chat
        {
            public override Types ConstructorCode => Types.ChannelForbiddenType;

            public True Broadcast;
            public True Megagroup;
            public int Id;
            public long AccessHash;
            public string Title;

            public ChannelForbiddenType() { }

            /// <summary>
            /// The following arguments can be null: Broadcast, Megagroup
            /// </summary>
            /// <param name="Broadcast">Can be null</param>
            /// <param name="Megagroup">Can be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="AccessHash">Can NOT be null</param>
            /// <param name="Title">Can NOT be null</param>
            public ChannelForbiddenType(True Broadcast, True Megagroup, int Id, long AccessHash, string Title)
            {
                this.Broadcast = Broadcast;
                this.Megagroup = Megagroup;
                this.Id = Id;
                this.AccessHash = AccessHash;
                this.Title = Title;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Broadcast != null ? 1 << 5 : 0) |
                    (Megagroup != null ? 1 << 8 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Broadcast != null)
                {

                }

                if (Megagroup != null)
                {

                }

                writer.Write(Id);
                writer.Write(AccessHash);
                writer.Write(Title);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 5)) != 0)
                {
                    Broadcast = reader.ReadTrue();
                }

                if ((flags & (1 << 8)) != 0)
                {
                    Megagroup = reader.ReadTrue();
                }

                Id = reader.ReadInt32();
                AccessHash = reader.ReadInt64();
                Title = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(ChannelForbiddenType Broadcast:{0} Megagroup:{1} Id:{2} AccessHash:{3} Title:{4})", Broadcast, Megagroup, Id, AccessHash, Title);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Broadcast": return Broadcast;
                        case "Megagroup": return Megagroup;
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        case "Title": return Title;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Broadcast":
                    case "Megagroup":
                    case "Id":
                    case "AccessHash":
                    case "Title": return true;
                    default: return false;
                }
            }
        }

        public class ChatFullType : ChatFull
        {
            public override Types ConstructorCode => Types.ChatFullType;

            public int Id;
            public ChatParticipants Participants;
            public Photo ChatPhoto;
            public PeerNotifySettings NotifySettings;
            public ExportedChatInvite ExportedInvite;
            public List<BotInfo> BotInfo;

            public ChatFullType() { }

            public ChatFullType(int Id, ChatParticipants Participants, Photo ChatPhoto, PeerNotifySettings NotifySettings, ExportedChatInvite ExportedInvite, List<BotInfo> BotInfo)
            {
                this.Id = Id;
                this.Participants = Participants;
                this.ChatPhoto = ChatPhoto;
                this.NotifySettings = NotifySettings;
                this.ExportedInvite = ExportedInvite;
                this.BotInfo = BotInfo;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                Participants.Write(writer);
                ChatPhoto.Write(writer);
                NotifySettings.Write(writer);
                ExportedInvite.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(BotInfo.Count);
                foreach (BotInfo BotInfoElement in BotInfo)
                    BotInfoElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
                Participants = reader.Read<ChatParticipants>();
                ChatPhoto = reader.Read<Photo>();
                NotifySettings = reader.Read<PeerNotifySettings>();
                ExportedInvite = reader.Read<ExportedChatInvite>();
                reader.ReadInt32(); // vector code
                int BotInfoLength = reader.ReadInt32();
                BotInfo = new List<BotInfo>(BotInfoLength);
                for (int BotInfoIndex = 0; BotInfoIndex < BotInfoLength; BotInfoIndex++)
                    BotInfo.Add(reader.Read<BotInfo>());
            }

            public override string ToString()
            {
                return string.Format("(ChatFullType Id:{0} Participants:{1} ChatPhoto:{2} NotifySettings:{3} ExportedInvite:{4} BotInfo:{5})", Id, Participants, ChatPhoto, NotifySettings, ExportedInvite, BotInfo);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Participants": return Participants;
                        case "ChatPhoto": return ChatPhoto;
                        case "NotifySettings": return NotifySettings;
                        case "ExportedInvite": return ExportedInvite;
                        case "BotInfo": return BotInfo;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Participants":
                    case "ChatPhoto":
                    case "NotifySettings":
                    case "ExportedInvite":
                    case "BotInfo": return true;
                    default: return false;
                }
            }
        }

        public class ChannelFullType : ChatFull
        {
            public override Types ConstructorCode => Types.ChannelFullType;

            public True CanViewParticipants;
            public True CanSetUsername;
            public int Id;
            public string About;
            public int? ParticipantsCount;
            public int? AdminsCount;
            public int? KickedCount;
            public int ReadInboxMaxId;
            public int ReadOutboxMaxId;
            public int UnreadCount;
            public Photo ChatPhoto;
            public PeerNotifySettings NotifySettings;
            public ExportedChatInvite ExportedInvite;
            public List<BotInfo> BotInfo;
            public int? MigratedFromChatId;
            public int? MigratedFromMaxId;
            public int? PinnedMsgId;

            public ChannelFullType() { }

            /// <summary>
            /// The following arguments can be null: CanViewParticipants, CanSetUsername, ParticipantsCount, AdminsCount, KickedCount, MigratedFromChatId, MigratedFromMaxId, PinnedMsgId
            /// </summary>
            /// <param name="CanViewParticipants">Can be null</param>
            /// <param name="CanSetUsername">Can be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="About">Can NOT be null</param>
            /// <param name="ParticipantsCount">Can be null</param>
            /// <param name="AdminsCount">Can be null</param>
            /// <param name="KickedCount">Can be null</param>
            /// <param name="ReadInboxMaxId">Can NOT be null</param>
            /// <param name="ReadOutboxMaxId">Can NOT be null</param>
            /// <param name="UnreadCount">Can NOT be null</param>
            /// <param name="ChatPhoto">Can NOT be null</param>
            /// <param name="NotifySettings">Can NOT be null</param>
            /// <param name="ExportedInvite">Can NOT be null</param>
            /// <param name="BotInfo">Can NOT be null</param>
            /// <param name="MigratedFromChatId">Can be null</param>
            /// <param name="MigratedFromMaxId">Can be null</param>
            /// <param name="PinnedMsgId">Can be null</param>
            public ChannelFullType(True CanViewParticipants, True CanSetUsername, int Id, string About, int? ParticipantsCount, int? AdminsCount, int? KickedCount, int ReadInboxMaxId, int ReadOutboxMaxId, int UnreadCount, Photo ChatPhoto, PeerNotifySettings NotifySettings, ExportedChatInvite ExportedInvite, List<BotInfo> BotInfo, int? MigratedFromChatId, int? MigratedFromMaxId, int? PinnedMsgId)
            {
                this.CanViewParticipants = CanViewParticipants;
                this.CanSetUsername = CanSetUsername;
                this.Id = Id;
                this.About = About;
                this.ParticipantsCount = ParticipantsCount;
                this.AdminsCount = AdminsCount;
                this.KickedCount = KickedCount;
                this.ReadInboxMaxId = ReadInboxMaxId;
                this.ReadOutboxMaxId = ReadOutboxMaxId;
                this.UnreadCount = UnreadCount;
                this.ChatPhoto = ChatPhoto;
                this.NotifySettings = NotifySettings;
                this.ExportedInvite = ExportedInvite;
                this.BotInfo = BotInfo;
                this.MigratedFromChatId = MigratedFromChatId;
                this.MigratedFromMaxId = MigratedFromMaxId;
                this.PinnedMsgId = PinnedMsgId;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (CanViewParticipants != null ? 1 << 3 : 0) |
                    (CanSetUsername != null ? 1 << 6 : 0) |
                    (ParticipantsCount != null ? 1 << 0 : 0) |
                    (AdminsCount != null ? 1 << 1 : 0) |
                    (KickedCount != null ? 1 << 2 : 0) |
                    (MigratedFromChatId != null ? 1 << 4 : 0) |
                    (MigratedFromMaxId != null ? 1 << 4 : 0) |
                    (PinnedMsgId != null ? 1 << 5 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (CanViewParticipants != null)
                {

                }

                if (CanSetUsername != null)
                {

                }

                writer.Write(Id);
                writer.Write(About);
                if (ParticipantsCount != null)
                {
                    writer.Write(ParticipantsCount.Value);
                }

                if (AdminsCount != null)
                {
                    writer.Write(AdminsCount.Value);
                }

                if (KickedCount != null)
                {
                    writer.Write(KickedCount.Value);
                }

                writer.Write(ReadInboxMaxId);
                writer.Write(ReadOutboxMaxId);
                writer.Write(UnreadCount);
                ChatPhoto.Write(writer);
                NotifySettings.Write(writer);
                ExportedInvite.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(BotInfo.Count);
                foreach (BotInfo BotInfoElement in BotInfo)
                    BotInfoElement.Write(writer);
                if (MigratedFromChatId != null)
                {
                    writer.Write(MigratedFromChatId.Value);
                }

                if (MigratedFromMaxId != null)
                {
                    writer.Write(MigratedFromMaxId.Value);
                }

                if (PinnedMsgId != null)
                {
                    writer.Write(PinnedMsgId.Value);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 3)) != 0)
                {
                    CanViewParticipants = reader.ReadTrue();
                }

                if ((flags & (1 << 6)) != 0)
                {
                    CanSetUsername = reader.ReadTrue();
                }

                Id = reader.ReadInt32();
                About = reader.ReadString();
                if ((flags & (1 << 0)) != 0)
                {
                    ParticipantsCount = reader.ReadInt32();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    AdminsCount = reader.ReadInt32();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    KickedCount = reader.ReadInt32();
                }

                ReadInboxMaxId = reader.ReadInt32();
                ReadOutboxMaxId = reader.ReadInt32();
                UnreadCount = reader.ReadInt32();
                ChatPhoto = reader.Read<Photo>();
                NotifySettings = reader.Read<PeerNotifySettings>();
                ExportedInvite = reader.Read<ExportedChatInvite>();
                reader.ReadInt32(); // vector code
                int BotInfoLength = reader.ReadInt32();
                BotInfo = new List<BotInfo>(BotInfoLength);
                for (int BotInfoIndex = 0; BotInfoIndex < BotInfoLength; BotInfoIndex++)
                    BotInfo.Add(reader.Read<BotInfo>());
                if ((flags & (1 << 4)) != 0)
                {
                    MigratedFromChatId = reader.ReadInt32();
                }

                if ((flags & (1 << 4)) != 0)
                {
                    MigratedFromMaxId = reader.ReadInt32();
                }

                if ((flags & (1 << 5)) != 0)
                {
                    PinnedMsgId = reader.ReadInt32();
                }

            }

            public override string ToString()
            {
                return string.Format("(ChannelFullType CanViewParticipants:{0} CanSetUsername:{1} Id:{2} About:{3} ParticipantsCount:{4} AdminsCount:{5} KickedCount:{6} ReadInboxMaxId:{7} ReadOutboxMaxId:{8} UnreadCount:{9} ChatPhoto:{10} NotifySettings:{11} ExportedInvite:{12} BotInfo:{13} MigratedFromChatId:{14} MigratedFromMaxId:{15} PinnedMsgId:{16})", CanViewParticipants, CanSetUsername, Id, About, ParticipantsCount, AdminsCount, KickedCount, ReadInboxMaxId, ReadOutboxMaxId, UnreadCount, ChatPhoto, NotifySettings, ExportedInvite, BotInfo, MigratedFromChatId, MigratedFromMaxId, PinnedMsgId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "CanViewParticipants": return CanViewParticipants;
                        case "CanSetUsername": return CanSetUsername;
                        case "Id": return Id;
                        case "About": return About;
                        case "ParticipantsCount": return ParticipantsCount;
                        case "AdminsCount": return AdminsCount;
                        case "KickedCount": return KickedCount;
                        case "ReadInboxMaxId": return ReadInboxMaxId;
                        case "ReadOutboxMaxId": return ReadOutboxMaxId;
                        case "UnreadCount": return UnreadCount;
                        case "ChatPhoto": return ChatPhoto;
                        case "NotifySettings": return NotifySettings;
                        case "ExportedInvite": return ExportedInvite;
                        case "BotInfo": return BotInfo;
                        case "MigratedFromChatId": return MigratedFromChatId;
                        case "MigratedFromMaxId": return MigratedFromMaxId;
                        case "PinnedMsgId": return PinnedMsgId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "CanViewParticipants":
                    case "CanSetUsername":
                    case "Id":
                    case "About":
                    case "ParticipantsCount":
                    case "AdminsCount":
                    case "KickedCount":
                    case "ReadInboxMaxId":
                    case "ReadOutboxMaxId":
                    case "UnreadCount":
                    case "ChatPhoto":
                    case "NotifySettings":
                    case "ExportedInvite":
                    case "BotInfo":
                    case "MigratedFromChatId":
                    case "MigratedFromMaxId":
                    case "PinnedMsgId": return true;
                    default: return false;
                }
            }
        }

        public class ChatParticipantType : ChatParticipant
        {
            public override Types ConstructorCode => Types.ChatParticipantType;

            public int UserId;
            public int InviterId;
            public int Date;

            public ChatParticipantType() { }

            public ChatParticipantType(int UserId, int InviterId, int Date)
            {
                this.UserId = UserId;
                this.InviterId = InviterId;
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(InviterId);
                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                InviterId = reader.ReadInt32();
                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(ChatParticipantType UserId:{0} InviterId:{1} Date:{2})", UserId, InviterId, Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "InviterId": return InviterId;
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "InviterId":
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        public class ChatParticipantCreatorType : ChatParticipant
        {
            public override Types ConstructorCode => Types.ChatParticipantCreatorType;

            public int UserId;

            public ChatParticipantCreatorType() { }

            public ChatParticipantCreatorType(int UserId)
            {
                this.UserId = UserId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(ChatParticipantCreatorType UserId:{0})", UserId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId": return true;
                    default: return false;
                }
            }
        }

        public class ChatParticipantAdminType : ChatParticipant
        {
            public override Types ConstructorCode => Types.ChatParticipantAdminType;

            public int UserId;
            public int InviterId;
            public int Date;

            public ChatParticipantAdminType() { }

            public ChatParticipantAdminType(int UserId, int InviterId, int Date)
            {
                this.UserId = UserId;
                this.InviterId = InviterId;
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(InviterId);
                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                InviterId = reader.ReadInt32();
                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(ChatParticipantAdminType UserId:{0} InviterId:{1} Date:{2})", UserId, InviterId, Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "InviterId": return InviterId;
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "InviterId":
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        public class ChatParticipantsForbiddenType : ChatParticipants
        {
            public override Types ConstructorCode => Types.ChatParticipantsForbiddenType;

            public int ChatId;
            public ChatParticipant SelfParticipant;

            public ChatParticipantsForbiddenType() { }

            /// <summary>
            /// The following arguments can be null: SelfParticipant
            /// </summary>
            /// <param name="ChatId">Can NOT be null</param>
            /// <param name="SelfParticipant">Can be null</param>
            public ChatParticipantsForbiddenType(int ChatId, ChatParticipant SelfParticipant)
            {
                this.ChatId = ChatId;
                this.SelfParticipant = SelfParticipant;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (SelfParticipant != null ? 1 << 0 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                writer.Write(ChatId);
                if (SelfParticipant != null)
                {
                    SelfParticipant.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                ChatId = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    SelfParticipant = reader.Read<ChatParticipant>();
                }

            }

            public override string ToString()
            {
                return string.Format("(ChatParticipantsForbiddenType ChatId:{0} SelfParticipant:{1})", ChatId, SelfParticipant);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChatId": return ChatId;
                        case "SelfParticipant": return SelfParticipant;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChatId":
                    case "SelfParticipant": return true;
                    default: return false;
                }
            }
        }

        public class ChatParticipantsType : ChatParticipants
        {
            public override Types ConstructorCode => Types.ChatParticipantsType;

            public int ChatId;
            public List<ChatParticipant> Participants;
            public int Version;

            public ChatParticipantsType() { }

            public ChatParticipantsType(int ChatId, List<ChatParticipant> Participants, int Version)
            {
                this.ChatId = ChatId;
                this.Participants = Participants;
                this.Version = Version;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Participants.Count);
                foreach (ChatParticipant ParticipantsElement in Participants)
                    ParticipantsElement.Write(writer);
                writer.Write(Version);
            }

            public override void Read(TBinaryReader reader)
            {
                ChatId = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int ParticipantsLength = reader.ReadInt32();
                Participants = new List<ChatParticipant>(ParticipantsLength);
                for (int ParticipantsIndex = 0; ParticipantsIndex < ParticipantsLength; ParticipantsIndex++)
                    Participants.Add(reader.Read<ChatParticipant>());
                Version = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(ChatParticipantsType ChatId:{0} Participants:{1} Version:{2})", ChatId, Participants, Version);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChatId": return ChatId;
                        case "Participants": return Participants;
                        case "Version": return Version;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChatId":
                    case "Participants":
                    case "Version": return true;
                    default: return false;
                }
            }
        }

        public class ChatPhotoEmptyType : ChatPhoto
        {
            public override Types ConstructorCode => Types.ChatPhotoEmptyType;

            public ChatPhotoEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ChatPhotoEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ChatPhotoType : ChatPhoto
        {
            public override Types ConstructorCode => Types.ChatPhotoType;

            public FileLocation PhotoSmall;
            public FileLocation PhotoBig;

            public ChatPhotoType() { }

            public ChatPhotoType(FileLocation PhotoSmall, FileLocation PhotoBig)
            {
                this.PhotoSmall = PhotoSmall;
                this.PhotoBig = PhotoBig;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                PhotoSmall.Write(writer);
                PhotoBig.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                PhotoSmall = reader.Read<FileLocation>();
                PhotoBig = reader.Read<FileLocation>();
            }

            public override string ToString()
            {
                return string.Format("(ChatPhotoType PhotoSmall:{0} PhotoBig:{1})", PhotoSmall, PhotoBig);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "PhotoSmall": return PhotoSmall;
                        case "PhotoBig": return PhotoBig;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "PhotoSmall":
                    case "PhotoBig": return true;
                    default: return false;
                }
            }
        }

        public class MessageEmptyType : Message
        {
            public override Types ConstructorCode => Types.MessageEmptyType;

            public int Id;

            public MessageEmptyType() { }

            public MessageEmptyType(int Id)
            {
                this.Id = Id;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageEmptyType Id:{0})", Id);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id": return true;
                    default: return false;
                }
            }
        }

        public class MessageType : Message
        {
            public override Types ConstructorCode => Types.MessageType;

            public True Out;
            public True Mentioned;
            public True MediaUnread;
            public True Silent;
            public True Post;
            public int Id;
            public int? FromId;
            public Peer ToId;
            public MessageFwdHeader FwdFrom;
            public int? ViaBotId;
            public int? ReplyToMsgId;
            public int Date;
            public string Message;
            public MessageMedia Media;
            public ReplyMarkup ReplyMarkup;
            public List<MessageEntity> Entities;
            public int? Views;
            public int? EditDate;

            public MessageType() { }

            /// <summary>
            /// The following arguments can be null: Out, Mentioned, MediaUnread, Silent, Post, FromId, FwdFrom, ViaBotId, ReplyToMsgId, Media, ReplyMarkup, Entities, Views, EditDate
            /// </summary>
            /// <param name="Out">Can be null</param>
            /// <param name="Mentioned">Can be null</param>
            /// <param name="MediaUnread">Can be null</param>
            /// <param name="Silent">Can be null</param>
            /// <param name="Post">Can be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="FromId">Can be null</param>
            /// <param name="ToId">Can NOT be null</param>
            /// <param name="FwdFrom">Can be null</param>
            /// <param name="ViaBotId">Can be null</param>
            /// <param name="ReplyToMsgId">Can be null</param>
            /// <param name="Date">Can NOT be null</param>
            /// <param name="Message">Can NOT be null</param>
            /// <param name="Media">Can be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            /// <param name="Entities">Can be null</param>
            /// <param name="Views">Can be null</param>
            /// <param name="EditDate">Can be null</param>
            public MessageType(True Out, True Mentioned, True MediaUnread, True Silent, True Post, int Id, int? FromId, Peer ToId, MessageFwdHeader FwdFrom, int? ViaBotId, int? ReplyToMsgId, int Date, string Message, MessageMedia Media, ReplyMarkup ReplyMarkup, List<MessageEntity> Entities, int? Views, int? EditDate)
            {
                this.Out = Out;
                this.Mentioned = Mentioned;
                this.MediaUnread = MediaUnread;
                this.Silent = Silent;
                this.Post = Post;
                this.Id = Id;
                this.FromId = FromId;
                this.ToId = ToId;
                this.FwdFrom = FwdFrom;
                this.ViaBotId = ViaBotId;
                this.ReplyToMsgId = ReplyToMsgId;
                this.Date = Date;
                this.Message = Message;
                this.Media = Media;
                this.ReplyMarkup = ReplyMarkup;
                this.Entities = Entities;
                this.Views = Views;
                this.EditDate = EditDate;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Out != null ? 1 << 1 : 0) |
                    (Mentioned != null ? 1 << 4 : 0) |
                    (MediaUnread != null ? 1 << 5 : 0) |
                    (Silent != null ? 1 << 13 : 0) |
                    (Post != null ? 1 << 14 : 0) |
                    (FromId != null ? 1 << 8 : 0) |
                    (FwdFrom != null ? 1 << 2 : 0) |
                    (ViaBotId != null ? 1 << 11 : 0) |
                    (ReplyToMsgId != null ? 1 << 3 : 0) |
                    (Media != null ? 1 << 9 : 0) |
                    (ReplyMarkup != null ? 1 << 6 : 0) |
                    (Entities != null ? 1 << 7 : 0) |
                    (Views != null ? 1 << 10 : 0) |
                    (EditDate != null ? 1 << 15 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Out != null)
                {

                }

                if (Mentioned != null)
                {

                }

                if (MediaUnread != null)
                {

                }

                if (Silent != null)
                {

                }

                if (Post != null)
                {

                }

                writer.Write(Id);
                if (FromId != null)
                {
                    writer.Write(FromId.Value);
                }

                ToId.Write(writer);
                if (FwdFrom != null)
                {
                    FwdFrom.Write(writer);
                }

                if (ViaBotId != null)
                {
                    writer.Write(ViaBotId.Value);
                }

                if (ReplyToMsgId != null)
                {
                    writer.Write(ReplyToMsgId.Value);
                }

                writer.Write(Date);
                writer.Write(Message);
                if (Media != null)
                {
                    Media.Write(writer);
                }

                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

                if (Entities != null)
                {
                    writer.Write(0x1cb5c415); // vector code
                    writer.Write(Entities.Count);
                    foreach (MessageEntity EntitiesElement in Entities)
                        EntitiesElement.Write(writer);
                }

                if (Views != null)
                {
                    writer.Write(Views.Value);
                }

                if (EditDate != null)
                {
                    writer.Write(EditDate.Value);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 1)) != 0)
                {
                    Out = reader.ReadTrue();
                }

                if ((flags & (1 << 4)) != 0)
                {
                    Mentioned = reader.ReadTrue();
                }

                if ((flags & (1 << 5)) != 0)
                {
                    MediaUnread = reader.ReadTrue();
                }

                if ((flags & (1 << 13)) != 0)
                {
                    Silent = reader.ReadTrue();
                }

                if ((flags & (1 << 14)) != 0)
                {
                    Post = reader.ReadTrue();
                }

                Id = reader.ReadInt32();
                if ((flags & (1 << 8)) != 0)
                {
                    FromId = reader.ReadInt32();
                }

                ToId = reader.Read<Peer>();
                if ((flags & (1 << 2)) != 0)
                {
                    FwdFrom = reader.Read<MessageFwdHeader>();
                }

                if ((flags & (1 << 11)) != 0)
                {
                    ViaBotId = reader.ReadInt32();
                }

                if ((flags & (1 << 3)) != 0)
                {
                    ReplyToMsgId = reader.ReadInt32();
                }

                Date = reader.ReadInt32();
                Message = reader.ReadString();
                if ((flags & (1 << 9)) != 0)
                {
                    Media = reader.Read<MessageMedia>();
                }

                if ((flags & (1 << 6)) != 0)
                {
                    ReplyMarkup = reader.Read<ReplyMarkup>();
                }

                if ((flags & (1 << 7)) != 0)
                {
                    reader.ReadInt32(); // vector code
                    int EntitiesLength = reader.ReadInt32();
                    Entities = new List<MessageEntity>(EntitiesLength);
                    for (int EntitiesIndex = 0; EntitiesIndex < EntitiesLength; EntitiesIndex++)
                        Entities.Add(reader.Read<MessageEntity>());
                }

                if ((flags & (1 << 10)) != 0)
                {
                    Views = reader.ReadInt32();
                }

                if ((flags & (1 << 15)) != 0)
                {
                    EditDate = reader.ReadInt32();
                }

            }

            public override string ToString()
            {
                return string.Format("(MessageType Out:{0} Mentioned:{1} MediaUnread:{2} Silent:{3} Post:{4} Id:{5} FromId:{6} ToId:{7} FwdFrom:{8} ViaBotId:{9} ReplyToMsgId:{10} Date:{11} Message:{12} Media:{13} ReplyMarkup:{14} Entities:{15} Views:{16} EditDate:{17})", Out, Mentioned, MediaUnread, Silent, Post, Id, FromId, ToId, FwdFrom, ViaBotId, ReplyToMsgId, Date, Message, Media, ReplyMarkup, Entities, Views, EditDate);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Out": return Out;
                        case "Mentioned": return Mentioned;
                        case "MediaUnread": return MediaUnread;
                        case "Silent": return Silent;
                        case "Post": return Post;
                        case "Id": return Id;
                        case "FromId": return FromId;
                        case "ToId": return ToId;
                        case "FwdFrom": return FwdFrom;
                        case "ViaBotId": return ViaBotId;
                        case "ReplyToMsgId": return ReplyToMsgId;
                        case "Date": return Date;
                        case "Message": return Message;
                        case "Media": return Media;
                        case "ReplyMarkup": return ReplyMarkup;
                        case "Entities": return Entities;
                        case "Views": return Views;
                        case "EditDate": return EditDate;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Out":
                    case "Mentioned":
                    case "MediaUnread":
                    case "Silent":
                    case "Post":
                    case "Id":
                    case "FromId":
                    case "ToId":
                    case "FwdFrom":
                    case "ViaBotId":
                    case "ReplyToMsgId":
                    case "Date":
                    case "Message":
                    case "Media":
                    case "ReplyMarkup":
                    case "Entities":
                    case "Views":
                    case "EditDate": return true;
                    default: return false;
                }
            }
        }

        public class MessageServiceType : Message
        {
            public override Types ConstructorCode => Types.MessageServiceType;

            public True Out;
            public True Mentioned;
            public True MediaUnread;
            public True Silent;
            public True Post;
            public int Id;
            public int? FromId;
            public Peer ToId;
            public int? ReplyToMsgId;
            public int Date;
            public MessageAction Action;

            public MessageServiceType() { }

            /// <summary>
            /// The following arguments can be null: Out, Mentioned, MediaUnread, Silent, Post, FromId, ReplyToMsgId
            /// </summary>
            /// <param name="Out">Can be null</param>
            /// <param name="Mentioned">Can be null</param>
            /// <param name="MediaUnread">Can be null</param>
            /// <param name="Silent">Can be null</param>
            /// <param name="Post">Can be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="FromId">Can be null</param>
            /// <param name="ToId">Can NOT be null</param>
            /// <param name="ReplyToMsgId">Can be null</param>
            /// <param name="Date">Can NOT be null</param>
            /// <param name="Action">Can NOT be null</param>
            public MessageServiceType(True Out, True Mentioned, True MediaUnread, True Silent, True Post, int Id, int? FromId, Peer ToId, int? ReplyToMsgId, int Date, MessageAction Action)
            {
                this.Out = Out;
                this.Mentioned = Mentioned;
                this.MediaUnread = MediaUnread;
                this.Silent = Silent;
                this.Post = Post;
                this.Id = Id;
                this.FromId = FromId;
                this.ToId = ToId;
                this.ReplyToMsgId = ReplyToMsgId;
                this.Date = Date;
                this.Action = Action;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Out != null ? 1 << 1 : 0) |
                    (Mentioned != null ? 1 << 4 : 0) |
                    (MediaUnread != null ? 1 << 5 : 0) |
                    (Silent != null ? 1 << 13 : 0) |
                    (Post != null ? 1 << 14 : 0) |
                    (FromId != null ? 1 << 8 : 0) |
                    (ReplyToMsgId != null ? 1 << 3 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Out != null)
                {

                }

                if (Mentioned != null)
                {

                }

                if (MediaUnread != null)
                {

                }

                if (Silent != null)
                {

                }

                if (Post != null)
                {

                }

                writer.Write(Id);
                if (FromId != null)
                {
                    writer.Write(FromId.Value);
                }

                ToId.Write(writer);
                if (ReplyToMsgId != null)
                {
                    writer.Write(ReplyToMsgId.Value);
                }

                writer.Write(Date);
                Action.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 1)) != 0)
                {
                    Out = reader.ReadTrue();
                }

                if ((flags & (1 << 4)) != 0)
                {
                    Mentioned = reader.ReadTrue();
                }

                if ((flags & (1 << 5)) != 0)
                {
                    MediaUnread = reader.ReadTrue();
                }

                if ((flags & (1 << 13)) != 0)
                {
                    Silent = reader.ReadTrue();
                }

                if ((flags & (1 << 14)) != 0)
                {
                    Post = reader.ReadTrue();
                }

                Id = reader.ReadInt32();
                if ((flags & (1 << 8)) != 0)
                {
                    FromId = reader.ReadInt32();
                }

                ToId = reader.Read<Peer>();
                if ((flags & (1 << 3)) != 0)
                {
                    ReplyToMsgId = reader.ReadInt32();
                }

                Date = reader.ReadInt32();
                Action = reader.Read<MessageAction>();
            }

            public override string ToString()
            {
                return string.Format("(MessageServiceType Out:{0} Mentioned:{1} MediaUnread:{2} Silent:{3} Post:{4} Id:{5} FromId:{6} ToId:{7} ReplyToMsgId:{8} Date:{9} Action:{10})", Out, Mentioned, MediaUnread, Silent, Post, Id, FromId, ToId, ReplyToMsgId, Date, Action);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Out": return Out;
                        case "Mentioned": return Mentioned;
                        case "MediaUnread": return MediaUnread;
                        case "Silent": return Silent;
                        case "Post": return Post;
                        case "Id": return Id;
                        case "FromId": return FromId;
                        case "ToId": return ToId;
                        case "ReplyToMsgId": return ReplyToMsgId;
                        case "Date": return Date;
                        case "Action": return Action;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Out":
                    case "Mentioned":
                    case "MediaUnread":
                    case "Silent":
                    case "Post":
                    case "Id":
                    case "FromId":
                    case "ToId":
                    case "ReplyToMsgId":
                    case "Date":
                    case "Action": return true;
                    default: return false;
                }
            }
        }

        public class MessageMediaEmptyType : MessageMedia
        {
            public override Types ConstructorCode => Types.MessageMediaEmptyType;

            public MessageMediaEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(MessageMediaEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class MessageMediaPhotoType : MessageMedia
        {
            public override Types ConstructorCode => Types.MessageMediaPhotoType;

            public Photo Photo;
            public string Caption;

            public MessageMediaPhotoType() { }

            public MessageMediaPhotoType(Photo Photo, string Caption)
            {
                this.Photo = Photo;
                this.Caption = Caption;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Photo.Write(writer);
                writer.Write(Caption);
            }

            public override void Read(TBinaryReader reader)
            {
                Photo = reader.Read<Photo>();
                Caption = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(MessageMediaPhotoType Photo:{0} Caption:{1})", Photo, Caption);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Photo": return Photo;
                        case "Caption": return Caption;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Photo":
                    case "Caption": return true;
                    default: return false;
                }
            }
        }

        public class MessageMediaGeoType : MessageMedia
        {
            public override Types ConstructorCode => Types.MessageMediaGeoType;

            public GeoPoint Geo;

            public MessageMediaGeoType() { }

            public MessageMediaGeoType(GeoPoint Geo)
            {
                this.Geo = Geo;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Geo.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Geo = reader.Read<GeoPoint>();
            }

            public override string ToString()
            {
                return string.Format("(MessageMediaGeoType Geo:{0})", Geo);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Geo": return Geo;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Geo": return true;
                    default: return false;
                }
            }
        }

        public class MessageMediaContactType : MessageMedia
        {
            public override Types ConstructorCode => Types.MessageMediaContactType;

            public string PhoneNumber;
            public string FirstName;
            public string LastName;
            public int UserId;

            public MessageMediaContactType() { }

            public MessageMediaContactType(string PhoneNumber, string FirstName, string LastName, int UserId)
            {
                this.PhoneNumber = PhoneNumber;
                this.FirstName = FirstName;
                this.LastName = LastName;
                this.UserId = UserId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PhoneNumber);
                writer.Write(FirstName);
                writer.Write(LastName);
                writer.Write(UserId);
            }

            public override void Read(TBinaryReader reader)
            {
                PhoneNumber = reader.ReadString();
                FirstName = reader.ReadString();
                LastName = reader.ReadString();
                UserId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageMediaContactType PhoneNumber:{0} FirstName:{1} LastName:{2} UserId:{3})", PhoneNumber, FirstName, LastName, UserId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "PhoneNumber": return PhoneNumber;
                        case "FirstName": return FirstName;
                        case "LastName": return LastName;
                        case "UserId": return UserId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "PhoneNumber":
                    case "FirstName":
                    case "LastName":
                    case "UserId": return true;
                    default: return false;
                }
            }
        }

        public class MessageMediaUnsupportedType : MessageMedia
        {
            public override Types ConstructorCode => Types.MessageMediaUnsupportedType;

            public MessageMediaUnsupportedType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(MessageMediaUnsupportedType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class MessageMediaDocumentType : MessageMedia
        {
            public override Types ConstructorCode => Types.MessageMediaDocumentType;

            public Document Document;
            public string Caption;

            public MessageMediaDocumentType() { }

            public MessageMediaDocumentType(Document Document, string Caption)
            {
                this.Document = Document;
                this.Caption = Caption;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Document.Write(writer);
                writer.Write(Caption);
            }

            public override void Read(TBinaryReader reader)
            {
                Document = reader.Read<Document>();
                Caption = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(MessageMediaDocumentType Document:{0} Caption:{1})", Document, Caption);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Document": return Document;
                        case "Caption": return Caption;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Document":
                    case "Caption": return true;
                    default: return false;
                }
            }
        }

        public class MessageMediaWebPageType : MessageMedia
        {
            public override Types ConstructorCode => Types.MessageMediaWebPageType;

            public WebPage Webpage;

            public MessageMediaWebPageType() { }

            public MessageMediaWebPageType(WebPage Webpage)
            {
                this.Webpage = Webpage;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Webpage.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Webpage = reader.Read<WebPage>();
            }

            public override string ToString()
            {
                return string.Format("(MessageMediaWebPageType Webpage:{0})", Webpage);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Webpage": return Webpage;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Webpage": return true;
                    default: return false;
                }
            }
        }

        public class MessageMediaVenueType : MessageMedia
        {
            public override Types ConstructorCode => Types.MessageMediaVenueType;

            public GeoPoint Geo;
            public string Title;
            public string Address;
            public string Provider;
            public string VenueId;

            public MessageMediaVenueType() { }

            public MessageMediaVenueType(GeoPoint Geo, string Title, string Address, string Provider, string VenueId)
            {
                this.Geo = Geo;
                this.Title = Title;
                this.Address = Address;
                this.Provider = Provider;
                this.VenueId = VenueId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Geo.Write(writer);
                writer.Write(Title);
                writer.Write(Address);
                writer.Write(Provider);
                writer.Write(VenueId);
            }

            public override void Read(TBinaryReader reader)
            {
                Geo = reader.Read<GeoPoint>();
                Title = reader.ReadString();
                Address = reader.ReadString();
                Provider = reader.ReadString();
                VenueId = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(MessageMediaVenueType Geo:{0} Title:{1} Address:{2} Provider:{3} VenueId:{4})", Geo, Title, Address, Provider, VenueId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Geo": return Geo;
                        case "Title": return Title;
                        case "Address": return Address;
                        case "Provider": return Provider;
                        case "VenueId": return VenueId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Geo":
                    case "Title":
                    case "Address":
                    case "Provider":
                    case "VenueId": return true;
                    default: return false;
                }
            }
        }

        public class MessageActionEmptyType : MessageAction
        {
            public override Types ConstructorCode => Types.MessageActionEmptyType;

            public MessageActionEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(MessageActionEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class MessageActionChatCreateType : MessageAction
        {
            public override Types ConstructorCode => Types.MessageActionChatCreateType;

            public string Title;
            public List<int> Users;

            public MessageActionChatCreateType() { }

            public MessageActionChatCreateType(string Title, List<int> Users)
            {
                this.Title = Title;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Title);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (int UsersElement in Users)
                    writer.Write(UsersElement);
            }

            public override void Read(TBinaryReader reader)
            {
                Title = reader.ReadString();
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<int>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.ReadInt32());
            }

            public override string ToString()
            {
                return string.Format("(MessageActionChatCreateType Title:{0} Users:{1})", Title, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Title": return Title;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Title":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class MessageActionChatEditTitleType : MessageAction
        {
            public override Types ConstructorCode => Types.MessageActionChatEditTitleType;

            public string Title;

            public MessageActionChatEditTitleType() { }

            public MessageActionChatEditTitleType(string Title)
            {
                this.Title = Title;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Title);
            }

            public override void Read(TBinaryReader reader)
            {
                Title = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(MessageActionChatEditTitleType Title:{0})", Title);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Title": return Title;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Title": return true;
                    default: return false;
                }
            }
        }

        public class MessageActionChatEditPhotoType : MessageAction
        {
            public override Types ConstructorCode => Types.MessageActionChatEditPhotoType;

            public Photo Photo;

            public MessageActionChatEditPhotoType() { }

            public MessageActionChatEditPhotoType(Photo Photo)
            {
                this.Photo = Photo;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Photo.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Photo = reader.Read<Photo>();
            }

            public override string ToString()
            {
                return string.Format("(MessageActionChatEditPhotoType Photo:{0})", Photo);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Photo": return Photo;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Photo": return true;
                    default: return false;
                }
            }
        }

        public class MessageActionChatDeletePhotoType : MessageAction
        {
            public override Types ConstructorCode => Types.MessageActionChatDeletePhotoType;

            public MessageActionChatDeletePhotoType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(MessageActionChatDeletePhotoType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class MessageActionChatAddUserType : MessageAction
        {
            public override Types ConstructorCode => Types.MessageActionChatAddUserType;

            public List<int> Users;

            public MessageActionChatAddUserType() { }

            public MessageActionChatAddUserType(List<int> Users)
            {
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (int UsersElement in Users)
                    writer.Write(UsersElement);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<int>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.ReadInt32());
            }

            public override string ToString()
            {
                return string.Format("(MessageActionChatAddUserType Users:{0})", Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class MessageActionChatDeleteUserType : MessageAction
        {
            public override Types ConstructorCode => Types.MessageActionChatDeleteUserType;

            public int UserId;

            public MessageActionChatDeleteUserType() { }

            public MessageActionChatDeleteUserType(int UserId)
            {
                this.UserId = UserId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageActionChatDeleteUserType UserId:{0})", UserId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId": return true;
                    default: return false;
                }
            }
        }

        public class MessageActionChatJoinedByLinkType : MessageAction
        {
            public override Types ConstructorCode => Types.MessageActionChatJoinedByLinkType;

            public int InviterId;

            public MessageActionChatJoinedByLinkType() { }

            public MessageActionChatJoinedByLinkType(int InviterId)
            {
                this.InviterId = InviterId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(InviterId);
            }

            public override void Read(TBinaryReader reader)
            {
                InviterId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageActionChatJoinedByLinkType InviterId:{0})", InviterId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "InviterId": return InviterId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "InviterId": return true;
                    default: return false;
                }
            }
        }

        public class MessageActionChannelCreateType : MessageAction
        {
            public override Types ConstructorCode => Types.MessageActionChannelCreateType;

            public string Title;

            public MessageActionChannelCreateType() { }

            public MessageActionChannelCreateType(string Title)
            {
                this.Title = Title;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Title);
            }

            public override void Read(TBinaryReader reader)
            {
                Title = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(MessageActionChannelCreateType Title:{0})", Title);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Title": return Title;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Title": return true;
                    default: return false;
                }
            }
        }

        public class MessageActionChatMigrateToType : MessageAction
        {
            public override Types ConstructorCode => Types.MessageActionChatMigrateToType;

            public int ChannelId;

            public MessageActionChatMigrateToType() { }

            public MessageActionChatMigrateToType(int ChannelId)
            {
                this.ChannelId = ChannelId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChannelId);
            }

            public override void Read(TBinaryReader reader)
            {
                ChannelId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageActionChatMigrateToType ChannelId:{0})", ChannelId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChannelId": return ChannelId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChannelId": return true;
                    default: return false;
                }
            }
        }

        public class MessageActionChannelMigrateFromType : MessageAction
        {
            public override Types ConstructorCode => Types.MessageActionChannelMigrateFromType;

            public string Title;
            public int ChatId;

            public MessageActionChannelMigrateFromType() { }

            public MessageActionChannelMigrateFromType(string Title, int ChatId)
            {
                this.Title = Title;
                this.ChatId = ChatId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Title);
                writer.Write(ChatId);
            }

            public override void Read(TBinaryReader reader)
            {
                Title = reader.ReadString();
                ChatId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageActionChannelMigrateFromType Title:{0} ChatId:{1})", Title, ChatId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Title": return Title;
                        case "ChatId": return ChatId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Title":
                    case "ChatId": return true;
                    default: return false;
                }
            }
        }

        public class MessageActionPinMessageType : MessageAction
        {
            public override Types ConstructorCode => Types.MessageActionPinMessageType;

            public MessageActionPinMessageType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(MessageActionPinMessageType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class MessageActionHistoryClearType : MessageAction
        {
            public override Types ConstructorCode => Types.MessageActionHistoryClearType;

            public MessageActionHistoryClearType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(MessageActionHistoryClearType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class DialogType : Dialog
        {
            public override Types ConstructorCode => Types.DialogType;

            public Peer Peer;
            public int TopMessage;
            public int ReadInboxMaxId;
            public int ReadOutboxMaxId;
            public int UnreadCount;
            public PeerNotifySettings NotifySettings;
            public int? Pts;
            public DraftMessage Draft;

            public DialogType() { }

            /// <summary>
            /// The following arguments can be null: Pts, Draft
            /// </summary>
            /// <param name="Peer">Can NOT be null</param>
            /// <param name="TopMessage">Can NOT be null</param>
            /// <param name="ReadInboxMaxId">Can NOT be null</param>
            /// <param name="ReadOutboxMaxId">Can NOT be null</param>
            /// <param name="UnreadCount">Can NOT be null</param>
            /// <param name="NotifySettings">Can NOT be null</param>
            /// <param name="Pts">Can be null</param>
            /// <param name="Draft">Can be null</param>
            public DialogType(Peer Peer, int TopMessage, int ReadInboxMaxId, int ReadOutboxMaxId, int UnreadCount, PeerNotifySettings NotifySettings, int? Pts, DraftMessage Draft)
            {
                this.Peer = Peer;
                this.TopMessage = TopMessage;
                this.ReadInboxMaxId = ReadInboxMaxId;
                this.ReadOutboxMaxId = ReadOutboxMaxId;
                this.UnreadCount = UnreadCount;
                this.NotifySettings = NotifySettings;
                this.Pts = Pts;
                this.Draft = Draft;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Pts != null ? 1 << 0 : 0) |
                    (Draft != null ? 1 << 1 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                Peer.Write(writer);
                writer.Write(TopMessage);
                writer.Write(ReadInboxMaxId);
                writer.Write(ReadOutboxMaxId);
                writer.Write(UnreadCount);
                NotifySettings.Write(writer);
                if (Pts != null)
                {
                    writer.Write(Pts.Value);
                }

                if (Draft != null)
                {
                    Draft.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                Peer = reader.Read<Peer>();
                TopMessage = reader.ReadInt32();
                ReadInboxMaxId = reader.ReadInt32();
                ReadOutboxMaxId = reader.ReadInt32();
                UnreadCount = reader.ReadInt32();
                NotifySettings = reader.Read<PeerNotifySettings>();
                if ((flags & (1 << 0)) != 0)
                {
                    Pts = reader.ReadInt32();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    Draft = reader.Read<DraftMessage>();
                }

            }

            public override string ToString()
            {
                return string.Format("(DialogType Peer:{0} TopMessage:{1} ReadInboxMaxId:{2} ReadOutboxMaxId:{3} UnreadCount:{4} NotifySettings:{5} Pts:{6} Draft:{7})", Peer, TopMessage, ReadInboxMaxId, ReadOutboxMaxId, UnreadCount, NotifySettings, Pts, Draft);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Peer": return Peer;
                        case "TopMessage": return TopMessage;
                        case "ReadInboxMaxId": return ReadInboxMaxId;
                        case "ReadOutboxMaxId": return ReadOutboxMaxId;
                        case "UnreadCount": return UnreadCount;
                        case "NotifySettings": return NotifySettings;
                        case "Pts": return Pts;
                        case "Draft": return Draft;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Peer":
                    case "TopMessage":
                    case "ReadInboxMaxId":
                    case "ReadOutboxMaxId":
                    case "UnreadCount":
                    case "NotifySettings":
                    case "Pts":
                    case "Draft": return true;
                    default: return false;
                }
            }
        }

        public class PhotoEmptyType : Photo
        {
            public override Types ConstructorCode => Types.PhotoEmptyType;

            public long Id;

            public PhotoEmptyType() { }

            public PhotoEmptyType(long Id)
            {
                this.Id = Id;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(PhotoEmptyType Id:{0})", Id);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id": return true;
                    default: return false;
                }
            }
        }

        public class PhotoType : Photo
        {
            public override Types ConstructorCode => Types.PhotoType;

            public long Id;
            public long AccessHash;
            public int Date;
            public List<PhotoSize> Sizes;

            public PhotoType() { }

            public PhotoType(long Id, long AccessHash, int Date, List<PhotoSize> Sizes)
            {
                this.Id = Id;
                this.AccessHash = AccessHash;
                this.Date = Date;
                this.Sizes = Sizes;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(AccessHash);
                writer.Write(Date);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Sizes.Count);
                foreach (PhotoSize SizesElement in Sizes)
                    SizesElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
                AccessHash = reader.ReadInt64();
                Date = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int SizesLength = reader.ReadInt32();
                Sizes = new List<PhotoSize>(SizesLength);
                for (int SizesIndex = 0; SizesIndex < SizesLength; SizesIndex++)
                    Sizes.Add(reader.Read<PhotoSize>());
            }

            public override string ToString()
            {
                return string.Format("(PhotoType Id:{0} AccessHash:{1} Date:{2} Sizes:{3})", Id, AccessHash, Date, Sizes);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        case "Date": return Date;
                        case "Sizes": return Sizes;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "AccessHash":
                    case "Date":
                    case "Sizes": return true;
                    default: return false;
                }
            }
        }

        public class PhotoSizeEmptyType : PhotoSize
        {
            public override Types ConstructorCode => Types.PhotoSizeEmptyType;

            public string Type;

            public PhotoSizeEmptyType() { }

            public PhotoSizeEmptyType(string Type)
            {
                this.Type = Type;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Type);
            }

            public override void Read(TBinaryReader reader)
            {
                Type = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(PhotoSizeEmptyType Type:{0})", Type);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Type": return Type;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Type": return true;
                    default: return false;
                }
            }
        }

        public class PhotoSizeType : PhotoSize
        {
            public override Types ConstructorCode => Types.PhotoSizeType;

            public string Type;
            public FileLocation Location;
            public int W;
            public int H;
            public int Size;

            public PhotoSizeType() { }

            public PhotoSizeType(string Type, FileLocation Location, int W, int H, int Size)
            {
                this.Type = Type;
                this.Location = Location;
                this.W = W;
                this.H = H;
                this.Size = Size;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Type);
                Location.Write(writer);
                writer.Write(W);
                writer.Write(H);
                writer.Write(Size);
            }

            public override void Read(TBinaryReader reader)
            {
                Type = reader.ReadString();
                Location = reader.Read<FileLocation>();
                W = reader.ReadInt32();
                H = reader.ReadInt32();
                Size = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(PhotoSizeType Type:{0} Location:{1} W:{2} H:{3} Size:{4})", Type, Location, W, H, Size);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Type": return Type;
                        case "Location": return Location;
                        case "W": return W;
                        case "H": return H;
                        case "Size": return Size;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Type":
                    case "Location":
                    case "W":
                    case "H":
                    case "Size": return true;
                    default: return false;
                }
            }
        }

        public class PhotoCachedSizeType : PhotoSize
        {
            public override Types ConstructorCode => Types.PhotoCachedSizeType;

            public string Type;
            public FileLocation Location;
            public int W;
            public int H;
            public byte[] Bytes;

            public PhotoCachedSizeType() { }

            public PhotoCachedSizeType(string Type, FileLocation Location, int W, int H, byte[] Bytes)
            {
                this.Type = Type;
                this.Location = Location;
                this.W = W;
                this.H = H;
                this.Bytes = Bytes;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Type);
                Location.Write(writer);
                writer.Write(W);
                writer.Write(H);
                writer.Write(Bytes);
            }

            public override void Read(TBinaryReader reader)
            {
                Type = reader.ReadString();
                Location = reader.Read<FileLocation>();
                W = reader.ReadInt32();
                H = reader.ReadInt32();
                Bytes = reader.ReadBytes();
            }

            public override string ToString()
            {
                return string.Format("(PhotoCachedSizeType Type:{0} Location:{1} W:{2} H:{3} Bytes:{4})", Type, Location, W, H, Bytes);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Type": return Type;
                        case "Location": return Location;
                        case "W": return W;
                        case "H": return H;
                        case "Bytes": return Bytes;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Type":
                    case "Location":
                    case "W":
                    case "H":
                    case "Bytes": return true;
                    default: return false;
                }
            }
        }

        public class GeoPointEmptyType : GeoPoint
        {
            public override Types ConstructorCode => Types.GeoPointEmptyType;

            public GeoPointEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(GeoPointEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class GeoPointType : GeoPoint
        {
            public override Types ConstructorCode => Types.GeoPointType;

            public double Long;
            public double Lat;

            public GeoPointType() { }

            public GeoPointType(double Long, double Lat)
            {
                this.Long = Long;
                this.Lat = Lat;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Long);
                writer.Write(Lat);
            }

            public override void Read(TBinaryReader reader)
            {
                Long = reader.ReadDouble();
                Lat = reader.ReadDouble();
            }

            public override string ToString()
            {
                return string.Format("(GeoPointType Long:{0} Lat:{1})", Long, Lat);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Long": return Long;
                        case "Lat": return Lat;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Long":
                    case "Lat": return true;
                    default: return false;
                }
            }
        }

        public class AuthCheckedPhoneType : AuthCheckedPhone
        {
            public override Types ConstructorCode => Types.AuthCheckedPhoneType;

            public bool PhoneRegistered;

            public AuthCheckedPhoneType() { }

            public AuthCheckedPhoneType(bool PhoneRegistered)
            {
                this.PhoneRegistered = PhoneRegistered;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PhoneRegistered);
            }

            public override void Read(TBinaryReader reader)
            {
                PhoneRegistered = reader.ReadBoolean();
            }

            public override string ToString()
            {
                return string.Format("(AuthCheckedPhoneType PhoneRegistered:{0})", PhoneRegistered);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "PhoneRegistered": return PhoneRegistered;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "PhoneRegistered": return true;
                    default: return false;
                }
            }
        }

        public class AuthSentCodeType : AuthSentCode
        {
            public override Types ConstructorCode => Types.AuthSentCodeType;

            public True PhoneRegistered;
            public AuthSentCodeType Type;
            public string PhoneCodeHash;
            public AuthCodeType NextType;
            public int? Timeout;

            public AuthSentCodeType() { }

            /// <summary>
            /// The following arguments can be null: PhoneRegistered, NextType, Timeout
            /// </summary>
            /// <param name="PhoneRegistered">Can be null</param>
            /// <param name="Type">Can NOT be null</param>
            /// <param name="PhoneCodeHash">Can NOT be null</param>
            /// <param name="NextType">Can be null</param>
            /// <param name="Timeout">Can be null</param>
            public AuthSentCodeType(True PhoneRegistered, AuthSentCodeType Type, string PhoneCodeHash, AuthCodeType NextType, int? Timeout)
            {
                this.PhoneRegistered = PhoneRegistered;
                this.Type = Type;
                this.PhoneCodeHash = PhoneCodeHash;
                this.NextType = NextType;
                this.Timeout = Timeout;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (PhoneRegistered != null ? 1 << 0 : 0) |
                    (NextType != null ? 1 << 1 : 0) |
                    (Timeout != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (PhoneRegistered != null)
                {

                }

                Type.Write(writer);
                writer.Write(PhoneCodeHash);
                if (NextType != null)
                {
                    NextType.Write(writer);
                }

                if (Timeout != null)
                {
                    writer.Write(Timeout.Value);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    PhoneRegistered = reader.ReadTrue();
                }

                Type = reader.Read<AuthSentCodeType>();
                PhoneCodeHash = reader.ReadString();
                if ((flags & (1 << 1)) != 0)
                {
                    NextType = reader.Read<AuthCodeType>();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    Timeout = reader.ReadInt32();
                }

            }

            public override string ToString()
            {
                return string.Format("(AuthSentCodeType PhoneRegistered:{0} Type:{1} PhoneCodeHash:{2} NextType:{3} Timeout:{4})", PhoneRegistered, Type, PhoneCodeHash, NextType, Timeout);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "PhoneRegistered": return PhoneRegistered;
                        case "Type": return Type;
                        case "PhoneCodeHash": return PhoneCodeHash;
                        case "NextType": return NextType;
                        case "Timeout": return Timeout;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "PhoneRegistered":
                    case "Type":
                    case "PhoneCodeHash":
                    case "NextType":
                    case "Timeout": return true;
                    default: return false;
                }
            }
        }

        public class AuthAuthorizationType : AuthAuthorization
        {
            public override Types ConstructorCode => Types.AuthAuthorizationType;

            public User User;

            public AuthAuthorizationType() { }

            public AuthAuthorizationType(User User)
            {
                this.User = User;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                User.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                User = reader.Read<User>();
            }

            public override string ToString()
            {
                return string.Format("(AuthAuthorizationType User:{0})", User);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "User": return User;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "User": return true;
                    default: return false;
                }
            }
        }

        public class AuthExportedAuthorizationType : AuthExportedAuthorization
        {
            public override Types ConstructorCode => Types.AuthExportedAuthorizationType;

            public int Id;
            public byte[] Bytes;

            public AuthExportedAuthorizationType() { }

            public AuthExportedAuthorizationType(int Id, byte[] Bytes)
            {
                this.Id = Id;
                this.Bytes = Bytes;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(Bytes);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
                Bytes = reader.ReadBytes();
            }

            public override string ToString()
            {
                return string.Format("(AuthExportedAuthorizationType Id:{0} Bytes:{1})", Id, Bytes);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Bytes": return Bytes;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Bytes": return true;
                    default: return false;
                }
            }
        }

        public class InputNotifyPeerType : InputNotifyPeer
        {
            public override Types ConstructorCode => Types.InputNotifyPeerType;

            public InputPeer Peer;

            public InputNotifyPeerType() { }

            public InputNotifyPeerType(InputPeer Peer)
            {
                this.Peer = Peer;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Peer = reader.Read<InputPeer>();
            }

            public override string ToString()
            {
                return string.Format("(InputNotifyPeerType Peer:{0})", Peer);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Peer": return Peer;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Peer": return true;
                    default: return false;
                }
            }
        }

        public class InputNotifyUsersType : InputNotifyPeer
        {
            public override Types ConstructorCode => Types.InputNotifyUsersType;

            public InputNotifyUsersType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputNotifyUsersType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputNotifyChatsType : InputNotifyPeer
        {
            public override Types ConstructorCode => Types.InputNotifyChatsType;

            public InputNotifyChatsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputNotifyChatsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputNotifyAllType : InputNotifyPeer
        {
            public override Types ConstructorCode => Types.InputNotifyAllType;

            public InputNotifyAllType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputNotifyAllType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputPeerNotifyEventsEmptyType : InputPeerNotifyEvents
        {
            public override Types ConstructorCode => Types.InputPeerNotifyEventsEmptyType;

            public InputPeerNotifyEventsEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputPeerNotifyEventsEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputPeerNotifyEventsAllType : InputPeerNotifyEvents
        {
            public override Types ConstructorCode => Types.InputPeerNotifyEventsAllType;

            public InputPeerNotifyEventsAllType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputPeerNotifyEventsAllType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputPeerNotifySettingsType : InputPeerNotifySettings
        {
            public override Types ConstructorCode => Types.InputPeerNotifySettingsType;

            public True ShowPreviews;
            public True Silent;
            public int MuteUntil;
            public string Sound;

            public InputPeerNotifySettingsType() { }

            /// <summary>
            /// The following arguments can be null: ShowPreviews, Silent
            /// </summary>
            /// <param name="ShowPreviews">Can be null</param>
            /// <param name="Silent">Can be null</param>
            /// <param name="MuteUntil">Can NOT be null</param>
            /// <param name="Sound">Can NOT be null</param>
            public InputPeerNotifySettingsType(True ShowPreviews, True Silent, int MuteUntil, string Sound)
            {
                this.ShowPreviews = ShowPreviews;
                this.Silent = Silent;
                this.MuteUntil = MuteUntil;
                this.Sound = Sound;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (ShowPreviews != null ? 1 << 0 : 0) |
                    (Silent != null ? 1 << 1 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (ShowPreviews != null)
                {

                }

                if (Silent != null)
                {

                }

                writer.Write(MuteUntil);
                writer.Write(Sound);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    ShowPreviews = reader.ReadTrue();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    Silent = reader.ReadTrue();
                }

                MuteUntil = reader.ReadInt32();
                Sound = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputPeerNotifySettingsType ShowPreviews:{0} Silent:{1} MuteUntil:{2} Sound:{3})", ShowPreviews, Silent, MuteUntil, Sound);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ShowPreviews": return ShowPreviews;
                        case "Silent": return Silent;
                        case "MuteUntil": return MuteUntil;
                        case "Sound": return Sound;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ShowPreviews":
                    case "Silent":
                    case "MuteUntil":
                    case "Sound": return true;
                    default: return false;
                }
            }
        }

        public class PeerNotifyEventsEmptyType : PeerNotifyEvents
        {
            public override Types ConstructorCode => Types.PeerNotifyEventsEmptyType;

            public PeerNotifyEventsEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(PeerNotifyEventsEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class PeerNotifyEventsAllType : PeerNotifyEvents
        {
            public override Types ConstructorCode => Types.PeerNotifyEventsAllType;

            public PeerNotifyEventsAllType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(PeerNotifyEventsAllType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class PeerNotifySettingsEmptyType : PeerNotifySettings
        {
            public override Types ConstructorCode => Types.PeerNotifySettingsEmptyType;

            public PeerNotifySettingsEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(PeerNotifySettingsEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class PeerNotifySettingsType : PeerNotifySettings
        {
            public override Types ConstructorCode => Types.PeerNotifySettingsType;

            public True ShowPreviews;
            public True Silent;
            public int MuteUntil;
            public string Sound;

            public PeerNotifySettingsType() { }

            /// <summary>
            /// The following arguments can be null: ShowPreviews, Silent
            /// </summary>
            /// <param name="ShowPreviews">Can be null</param>
            /// <param name="Silent">Can be null</param>
            /// <param name="MuteUntil">Can NOT be null</param>
            /// <param name="Sound">Can NOT be null</param>
            public PeerNotifySettingsType(True ShowPreviews, True Silent, int MuteUntil, string Sound)
            {
                this.ShowPreviews = ShowPreviews;
                this.Silent = Silent;
                this.MuteUntil = MuteUntil;
                this.Sound = Sound;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (ShowPreviews != null ? 1 << 0 : 0) |
                    (Silent != null ? 1 << 1 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (ShowPreviews != null)
                {

                }

                if (Silent != null)
                {

                }

                writer.Write(MuteUntil);
                writer.Write(Sound);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    ShowPreviews = reader.ReadTrue();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    Silent = reader.ReadTrue();
                }

                MuteUntil = reader.ReadInt32();
                Sound = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(PeerNotifySettingsType ShowPreviews:{0} Silent:{1} MuteUntil:{2} Sound:{3})", ShowPreviews, Silent, MuteUntil, Sound);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ShowPreviews": return ShowPreviews;
                        case "Silent": return Silent;
                        case "MuteUntil": return MuteUntil;
                        case "Sound": return Sound;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ShowPreviews":
                    case "Silent":
                    case "MuteUntil":
                    case "Sound": return true;
                    default: return false;
                }
            }
        }

        public class PeerSettingsType : PeerSettings
        {
            public override Types ConstructorCode => Types.PeerSettingsType;

            public True ReportSpam;

            public PeerSettingsType() { }

            /// <summary>
            /// The following arguments can be null: ReportSpam
            /// </summary>
            /// <param name="ReportSpam">Can be null</param>
            public PeerSettingsType(True ReportSpam)
            {
                this.ReportSpam = ReportSpam;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (ReportSpam != null ? 1 << 0 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (ReportSpam != null)
                {

                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    ReportSpam = reader.ReadTrue();
                }

            }

            public override string ToString()
            {
                return string.Format("(PeerSettingsType ReportSpam:{0})", ReportSpam);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ReportSpam": return ReportSpam;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ReportSpam": return true;
                    default: return false;
                }
            }
        }

        public class WallPaperType : WallPaper
        {
            public override Types ConstructorCode => Types.WallPaperType;

            public int Id;
            public string Title;
            public List<PhotoSize> Sizes;
            public int Color;

            public WallPaperType() { }

            public WallPaperType(int Id, string Title, List<PhotoSize> Sizes, int Color)
            {
                this.Id = Id;
                this.Title = Title;
                this.Sizes = Sizes;
                this.Color = Color;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(Title);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Sizes.Count);
                foreach (PhotoSize SizesElement in Sizes)
                    SizesElement.Write(writer);
                writer.Write(Color);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
                Title = reader.ReadString();
                reader.ReadInt32(); // vector code
                int SizesLength = reader.ReadInt32();
                Sizes = new List<PhotoSize>(SizesLength);
                for (int SizesIndex = 0; SizesIndex < SizesLength; SizesIndex++)
                    Sizes.Add(reader.Read<PhotoSize>());
                Color = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(WallPaperType Id:{0} Title:{1} Sizes:{2} Color:{3})", Id, Title, Sizes, Color);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Title": return Title;
                        case "Sizes": return Sizes;
                        case "Color": return Color;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Title":
                    case "Sizes":
                    case "Color": return true;
                    default: return false;
                }
            }
        }

        public class WallPaperSolidType : WallPaper
        {
            public override Types ConstructorCode => Types.WallPaperSolidType;

            public int Id;
            public string Title;
            public int BgColor;
            public int Color;

            public WallPaperSolidType() { }

            public WallPaperSolidType(int Id, string Title, int BgColor, int Color)
            {
                this.Id = Id;
                this.Title = Title;
                this.BgColor = BgColor;
                this.Color = Color;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(Title);
                writer.Write(BgColor);
                writer.Write(Color);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
                Title = reader.ReadString();
                BgColor = reader.ReadInt32();
                Color = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(WallPaperSolidType Id:{0} Title:{1} BgColor:{2} Color:{3})", Id, Title, BgColor, Color);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Title": return Title;
                        case "BgColor": return BgColor;
                        case "Color": return Color;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Title":
                    case "BgColor":
                    case "Color": return true;
                    default: return false;
                }
            }
        }

        public class InputReportReasonSpamType : ReportReason
        {
            public override Types ConstructorCode => Types.InputReportReasonSpamType;

            public InputReportReasonSpamType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputReportReasonSpamType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputReportReasonViolenceType : ReportReason
        {
            public override Types ConstructorCode => Types.InputReportReasonViolenceType;

            public InputReportReasonViolenceType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputReportReasonViolenceType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputReportReasonPornographyType : ReportReason
        {
            public override Types ConstructorCode => Types.InputReportReasonPornographyType;

            public InputReportReasonPornographyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputReportReasonPornographyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputReportReasonOtherType : ReportReason
        {
            public override Types ConstructorCode => Types.InputReportReasonOtherType;

            public string Text;

            public InputReportReasonOtherType() { }

            public InputReportReasonOtherType(string Text)
            {
                this.Text = Text;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Text);
            }

            public override void Read(TBinaryReader reader)
            {
                Text = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputReportReasonOtherType Text:{0})", Text);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Text": return Text;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Text": return true;
                    default: return false;
                }
            }
        }

        public class UserFullType : UserFull
        {
            public override Types ConstructorCode => Types.UserFullType;

            public True Blocked;
            public User User;
            public string About;
            public ContactsLink Link;
            public Photo ProfilePhoto;
            public PeerNotifySettings NotifySettings;
            public BotInfo BotInfo;

            public UserFullType() { }

            /// <summary>
            /// The following arguments can be null: Blocked, About, ProfilePhoto, BotInfo
            /// </summary>
            /// <param name="Blocked">Can be null</param>
            /// <param name="User">Can NOT be null</param>
            /// <param name="About">Can be null</param>
            /// <param name="Link">Can NOT be null</param>
            /// <param name="ProfilePhoto">Can be null</param>
            /// <param name="NotifySettings">Can NOT be null</param>
            /// <param name="BotInfo">Can be null</param>
            public UserFullType(True Blocked, User User, string About, ContactsLink Link, Photo ProfilePhoto, PeerNotifySettings NotifySettings, BotInfo BotInfo)
            {
                this.Blocked = Blocked;
                this.User = User;
                this.About = About;
                this.Link = Link;
                this.ProfilePhoto = ProfilePhoto;
                this.NotifySettings = NotifySettings;
                this.BotInfo = BotInfo;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Blocked != null ? 1 << 0 : 0) |
                    (About != null ? 1 << 1 : 0) |
                    (ProfilePhoto != null ? 1 << 2 : 0) |
                    (BotInfo != null ? 1 << 3 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Blocked != null)
                {

                }

                User.Write(writer);
                if (About != null)
                {
                    writer.Write(About);
                }

                Link.Write(writer);
                if (ProfilePhoto != null)
                {
                    ProfilePhoto.Write(writer);
                }

                NotifySettings.Write(writer);
                if (BotInfo != null)
                {
                    BotInfo.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    Blocked = reader.ReadTrue();
                }

                User = reader.Read<User>();
                if ((flags & (1 << 1)) != 0)
                {
                    About = reader.ReadString();
                }

                Link = reader.Read<ContactsLink>();
                if ((flags & (1 << 2)) != 0)
                {
                    ProfilePhoto = reader.Read<Photo>();
                }

                NotifySettings = reader.Read<PeerNotifySettings>();
                if ((flags & (1 << 3)) != 0)
                {
                    BotInfo = reader.Read<BotInfo>();
                }

            }

            public override string ToString()
            {
                return string.Format("(UserFullType Blocked:{0} User:{1} About:{2} Link:{3} ProfilePhoto:{4} NotifySettings:{5} BotInfo:{6})", Blocked, User, About, Link, ProfilePhoto, NotifySettings, BotInfo);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Blocked": return Blocked;
                        case "User": return User;
                        case "About": return About;
                        case "Link": return Link;
                        case "ProfilePhoto": return ProfilePhoto;
                        case "NotifySettings": return NotifySettings;
                        case "BotInfo": return BotInfo;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Blocked":
                    case "User":
                    case "About":
                    case "Link":
                    case "ProfilePhoto":
                    case "NotifySettings":
                    case "BotInfo": return true;
                    default: return false;
                }
            }
        }

        public class ContactType : Contact
        {
            public override Types ConstructorCode => Types.ContactType;

            public int UserId;
            public bool Mutual;

            public ContactType() { }

            public ContactType(int UserId, bool Mutual)
            {
                this.UserId = UserId;
                this.Mutual = Mutual;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(Mutual);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                Mutual = reader.ReadBoolean();
            }

            public override string ToString()
            {
                return string.Format("(ContactType UserId:{0} Mutual:{1})", UserId, Mutual);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "Mutual": return Mutual;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "Mutual": return true;
                    default: return false;
                }
            }
        }

        public class ImportedContactType : ImportedContact
        {
            public override Types ConstructorCode => Types.ImportedContactType;

            public int UserId;
            public long ClientId;

            public ImportedContactType() { }

            public ImportedContactType(int UserId, long ClientId)
            {
                this.UserId = UserId;
                this.ClientId = ClientId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(ClientId);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                ClientId = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(ImportedContactType UserId:{0} ClientId:{1})", UserId, ClientId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "ClientId": return ClientId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "ClientId": return true;
                    default: return false;
                }
            }
        }

        public class ContactBlockedType : ContactBlocked
        {
            public override Types ConstructorCode => Types.ContactBlockedType;

            public int UserId;
            public int Date;

            public ContactBlockedType() { }

            public ContactBlockedType(int UserId, int Date)
            {
                this.UserId = UserId;
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(ContactBlockedType UserId:{0} Date:{1})", UserId, Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        public class ContactStatusType : ContactStatus
        {
            public override Types ConstructorCode => Types.ContactStatusType;

            public int UserId;
            public UserStatus Status;

            public ContactStatusType() { }

            public ContactStatusType(int UserId, UserStatus Status)
            {
                this.UserId = UserId;
                this.Status = Status;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                Status.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                Status = reader.Read<UserStatus>();
            }

            public override string ToString()
            {
                return string.Format("(ContactStatusType UserId:{0} Status:{1})", UserId, Status);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "Status": return Status;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "Status": return true;
                    default: return false;
                }
            }
        }

        public class ContactsLinkType : ContactsLink
        {
            public override Types ConstructorCode => Types.ContactsLinkType;

            public ContactLink MyLink;
            public ContactLink ForeignLink;
            public User User;

            public ContactsLinkType() { }

            public ContactsLinkType(ContactLink MyLink, ContactLink ForeignLink, User User)
            {
                this.MyLink = MyLink;
                this.ForeignLink = ForeignLink;
                this.User = User;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                MyLink.Write(writer);
                ForeignLink.Write(writer);
                User.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                MyLink = reader.Read<ContactLink>();
                ForeignLink = reader.Read<ContactLink>();
                User = reader.Read<User>();
            }

            public override string ToString()
            {
                return string.Format("(ContactsLinkType MyLink:{0} ForeignLink:{1} User:{2})", MyLink, ForeignLink, User);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "MyLink": return MyLink;
                        case "ForeignLink": return ForeignLink;
                        case "User": return User;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "MyLink":
                    case "ForeignLink":
                    case "User": return true;
                    default: return false;
                }
            }
        }

        public class ContactsContactsNotModifiedType : ContactsContacts
        {
            public override Types ConstructorCode => Types.ContactsContactsNotModifiedType;

            public ContactsContactsNotModifiedType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ContactsContactsNotModifiedType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ContactsContactsType : ContactsContacts
        {
            public override Types ConstructorCode => Types.ContactsContactsType;

            public List<Contact> Contacts;
            public List<User> Users;

            public ContactsContactsType() { }

            public ContactsContactsType(List<Contact> Contacts, List<User> Users)
            {
                this.Contacts = Contacts;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Contacts.Count);
                foreach (Contact ContactsElement in Contacts)
                    ContactsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int ContactsLength = reader.ReadInt32();
                Contacts = new List<Contact>(ContactsLength);
                for (int ContactsIndex = 0; ContactsIndex < ContactsLength; ContactsIndex++)
                    Contacts.Add(reader.Read<Contact>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(ContactsContactsType Contacts:{0} Users:{1})", Contacts, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Contacts": return Contacts;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Contacts":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class ContactsImportedContactsType : ContactsImportedContacts
        {
            public override Types ConstructorCode => Types.ContactsImportedContactsType;

            public List<ImportedContact> Imported;
            public List<long> RetryContacts;
            public List<User> Users;

            public ContactsImportedContactsType() { }

            public ContactsImportedContactsType(List<ImportedContact> Imported, List<long> RetryContacts, List<User> Users)
            {
                this.Imported = Imported;
                this.RetryContacts = RetryContacts;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Imported.Count);
                foreach (ImportedContact ImportedElement in Imported)
                    ImportedElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(RetryContacts.Count);
                foreach (long RetryContactsElement in RetryContacts)
                    writer.Write(RetryContactsElement);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int ImportedLength = reader.ReadInt32();
                Imported = new List<ImportedContact>(ImportedLength);
                for (int ImportedIndex = 0; ImportedIndex < ImportedLength; ImportedIndex++)
                    Imported.Add(reader.Read<ImportedContact>());
                reader.ReadInt32(); // vector code
                int RetryContactsLength = reader.ReadInt32();
                RetryContacts = new List<long>(RetryContactsLength);
                for (int RetryContactsIndex = 0; RetryContactsIndex < RetryContactsLength; RetryContactsIndex++)
                    RetryContacts.Add(reader.ReadInt64());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(ContactsImportedContactsType Imported:{0} RetryContacts:{1} Users:{2})", Imported, RetryContacts, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Imported": return Imported;
                        case "RetryContacts": return RetryContacts;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Imported":
                    case "RetryContacts":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class ContactsBlockedType : ContactsBlocked
        {
            public override Types ConstructorCode => Types.ContactsBlockedType;

            public List<ContactBlocked> Blocked;
            public List<User> Users;

            public ContactsBlockedType() { }

            public ContactsBlockedType(List<ContactBlocked> Blocked, List<User> Users)
            {
                this.Blocked = Blocked;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Blocked.Count);
                foreach (ContactBlocked BlockedElement in Blocked)
                    BlockedElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int BlockedLength = reader.ReadInt32();
                Blocked = new List<ContactBlocked>(BlockedLength);
                for (int BlockedIndex = 0; BlockedIndex < BlockedLength; BlockedIndex++)
                    Blocked.Add(reader.Read<ContactBlocked>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(ContactsBlockedType Blocked:{0} Users:{1})", Blocked, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Blocked": return Blocked;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Blocked":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class ContactsBlockedSliceType : ContactsBlocked
        {
            public override Types ConstructorCode => Types.ContactsBlockedSliceType;

            public int Count;
            public List<ContactBlocked> Blocked;
            public List<User> Users;

            public ContactsBlockedSliceType() { }

            public ContactsBlockedSliceType(int Count, List<ContactBlocked> Blocked, List<User> Users)
            {
                this.Count = Count;
                this.Blocked = Blocked;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Count);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Blocked.Count);
                foreach (ContactBlocked BlockedElement in Blocked)
                    BlockedElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Count = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int BlockedLength = reader.ReadInt32();
                Blocked = new List<ContactBlocked>(BlockedLength);
                for (int BlockedIndex = 0; BlockedIndex < BlockedLength; BlockedIndex++)
                    Blocked.Add(reader.Read<ContactBlocked>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(ContactsBlockedSliceType Count:{0} Blocked:{1} Users:{2})", Count, Blocked, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Count": return Count;
                        case "Blocked": return Blocked;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Count":
                    case "Blocked":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class MessagesDialogsType : MessagesDialogs
        {
            public override Types ConstructorCode => Types.MessagesDialogsType;

            public List<Dialog> Dialogs;
            public List<Message> Messages;
            public List<Chat> Chats;
            public List<User> Users;

            public MessagesDialogsType() { }

            public MessagesDialogsType(List<Dialog> Dialogs, List<Message> Messages, List<Chat> Chats, List<User> Users)
            {
                this.Dialogs = Dialogs;
                this.Messages = Messages;
                this.Chats = Chats;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Dialogs.Count);
                foreach (Dialog DialogsElement in Dialogs)
                    DialogsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Messages.Count);
                foreach (Message MessagesElement in Messages)
                    MessagesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int DialogsLength = reader.ReadInt32();
                Dialogs = new List<Dialog>(DialogsLength);
                for (int DialogsIndex = 0; DialogsIndex < DialogsLength; DialogsIndex++)
                    Dialogs.Add(reader.Read<Dialog>());
                reader.ReadInt32(); // vector code
                int MessagesLength = reader.ReadInt32();
                Messages = new List<Message>(MessagesLength);
                for (int MessagesIndex = 0; MessagesIndex < MessagesLength; MessagesIndex++)
                    Messages.Add(reader.Read<Message>());
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(MessagesDialogsType Dialogs:{0} Messages:{1} Chats:{2} Users:{3})", Dialogs, Messages, Chats, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Dialogs": return Dialogs;
                        case "Messages": return Messages;
                        case "Chats": return Chats;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Dialogs":
                    case "Messages":
                    case "Chats":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class MessagesDialogsSliceType : MessagesDialogs
        {
            public override Types ConstructorCode => Types.MessagesDialogsSliceType;

            public int Count;
            public List<Dialog> Dialogs;
            public List<Message> Messages;
            public List<Chat> Chats;
            public List<User> Users;

            public MessagesDialogsSliceType() { }

            public MessagesDialogsSliceType(int Count, List<Dialog> Dialogs, List<Message> Messages, List<Chat> Chats, List<User> Users)
            {
                this.Count = Count;
                this.Dialogs = Dialogs;
                this.Messages = Messages;
                this.Chats = Chats;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Count);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Dialogs.Count);
                foreach (Dialog DialogsElement in Dialogs)
                    DialogsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Messages.Count);
                foreach (Message MessagesElement in Messages)
                    MessagesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Count = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int DialogsLength = reader.ReadInt32();
                Dialogs = new List<Dialog>(DialogsLength);
                for (int DialogsIndex = 0; DialogsIndex < DialogsLength; DialogsIndex++)
                    Dialogs.Add(reader.Read<Dialog>());
                reader.ReadInt32(); // vector code
                int MessagesLength = reader.ReadInt32();
                Messages = new List<Message>(MessagesLength);
                for (int MessagesIndex = 0; MessagesIndex < MessagesLength; MessagesIndex++)
                    Messages.Add(reader.Read<Message>());
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(MessagesDialogsSliceType Count:{0} Dialogs:{1} Messages:{2} Chats:{3} Users:{4})", Count, Dialogs, Messages, Chats, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Count": return Count;
                        case "Dialogs": return Dialogs;
                        case "Messages": return Messages;
                        case "Chats": return Chats;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Count":
                    case "Dialogs":
                    case "Messages":
                    case "Chats":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class MessagesMessagesType : MessagesMessages
        {
            public override Types ConstructorCode => Types.MessagesMessagesType;

            public List<Message> Messages;
            public List<Chat> Chats;
            public List<User> Users;

            public MessagesMessagesType() { }

            public MessagesMessagesType(List<Message> Messages, List<Chat> Chats, List<User> Users)
            {
                this.Messages = Messages;
                this.Chats = Chats;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Messages.Count);
                foreach (Message MessagesElement in Messages)
                    MessagesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int MessagesLength = reader.ReadInt32();
                Messages = new List<Message>(MessagesLength);
                for (int MessagesIndex = 0; MessagesIndex < MessagesLength; MessagesIndex++)
                    Messages.Add(reader.Read<Message>());
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(MessagesMessagesType Messages:{0} Chats:{1} Users:{2})", Messages, Chats, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Messages": return Messages;
                        case "Chats": return Chats;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Messages":
                    case "Chats":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class MessagesMessagesSliceType : MessagesMessages
        {
            public override Types ConstructorCode => Types.MessagesMessagesSliceType;

            public int Count;
            public List<Message> Messages;
            public List<Chat> Chats;
            public List<User> Users;

            public MessagesMessagesSliceType() { }

            public MessagesMessagesSliceType(int Count, List<Message> Messages, List<Chat> Chats, List<User> Users)
            {
                this.Count = Count;
                this.Messages = Messages;
                this.Chats = Chats;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Count);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Messages.Count);
                foreach (Message MessagesElement in Messages)
                    MessagesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Count = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int MessagesLength = reader.ReadInt32();
                Messages = new List<Message>(MessagesLength);
                for (int MessagesIndex = 0; MessagesIndex < MessagesLength; MessagesIndex++)
                    Messages.Add(reader.Read<Message>());
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(MessagesMessagesSliceType Count:{0} Messages:{1} Chats:{2} Users:{3})", Count, Messages, Chats, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Count": return Count;
                        case "Messages": return Messages;
                        case "Chats": return Chats;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Count":
                    case "Messages":
                    case "Chats":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class MessagesChannelMessagesType : MessagesMessages
        {
            public override Types ConstructorCode => Types.MessagesChannelMessagesType;

            public int Pts;
            public int Count;
            public List<Message> Messages;
            public List<Chat> Chats;
            public List<User> Users;

            public MessagesChannelMessagesType() { }

            public MessagesChannelMessagesType(int Pts, int Count, List<Message> Messages, List<Chat> Chats, List<User> Users)
            {
                this.Pts = Pts;
                this.Count = Count;
                this.Messages = Messages;
                this.Chats = Chats;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Pts);
                writer.Write(Count);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Messages.Count);
                foreach (Message MessagesElement in Messages)
                    MessagesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Pts = reader.ReadInt32();
                Count = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int MessagesLength = reader.ReadInt32();
                Messages = new List<Message>(MessagesLength);
                for (int MessagesIndex = 0; MessagesIndex < MessagesLength; MessagesIndex++)
                    Messages.Add(reader.Read<Message>());
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(MessagesChannelMessagesType Pts:{0} Count:{1} Messages:{2} Chats:{3} Users:{4})", Pts, Count, Messages, Chats, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Pts": return Pts;
                        case "Count": return Count;
                        case "Messages": return Messages;
                        case "Chats": return Chats;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Pts":
                    case "Count":
                    case "Messages":
                    case "Chats":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class MessagesChatsType : MessagesChats
        {
            public override Types ConstructorCode => Types.MessagesChatsType;

            public List<Chat> Chats;

            public MessagesChatsType() { }

            public MessagesChatsType(List<Chat> Chats)
            {
                this.Chats = Chats;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
            }

            public override string ToString()
            {
                return string.Format("(MessagesChatsType Chats:{0})", Chats);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Chats": return Chats;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Chats": return true;
                    default: return false;
                }
            }
        }

        public class MessagesChatFullType : MessagesChatFull
        {
            public override Types ConstructorCode => Types.MessagesChatFullType;

            public ChatFull FullChat;
            public List<Chat> Chats;
            public List<User> Users;

            public MessagesChatFullType() { }

            public MessagesChatFullType(ChatFull FullChat, List<Chat> Chats, List<User> Users)
            {
                this.FullChat = FullChat;
                this.Chats = Chats;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                FullChat.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                FullChat = reader.Read<ChatFull>();
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(MessagesChatFullType FullChat:{0} Chats:{1} Users:{2})", FullChat, Chats, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "FullChat": return FullChat;
                        case "Chats": return Chats;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "FullChat":
                    case "Chats":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class MessagesAffectedHistoryType : MessagesAffectedHistory
        {
            public override Types ConstructorCode => Types.MessagesAffectedHistoryType;

            public int Pts;
            public int PtsCount;
            public int Offset;

            public MessagesAffectedHistoryType() { }

            public MessagesAffectedHistoryType(int Pts, int PtsCount, int Offset)
            {
                this.Pts = Pts;
                this.PtsCount = PtsCount;
                this.Offset = Offset;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Pts);
                writer.Write(PtsCount);
                writer.Write(Offset);
            }

            public override void Read(TBinaryReader reader)
            {
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
                Offset = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessagesAffectedHistoryType Pts:{0} PtsCount:{1} Offset:{2})", Pts, PtsCount, Offset);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        case "Offset": return Offset;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Pts":
                    case "PtsCount":
                    case "Offset": return true;
                    default: return false;
                }
            }
        }

        public class InputMessagesFilterEmptyType : MessagesFilter
        {
            public override Types ConstructorCode => Types.InputMessagesFilterEmptyType;

            public InputMessagesFilterEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputMessagesFilterEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputMessagesFilterPhotosType : MessagesFilter
        {
            public override Types ConstructorCode => Types.InputMessagesFilterPhotosType;

            public InputMessagesFilterPhotosType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputMessagesFilterPhotosType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputMessagesFilterVideoType : MessagesFilter
        {
            public override Types ConstructorCode => Types.InputMessagesFilterVideoType;

            public InputMessagesFilterVideoType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputMessagesFilterVideoType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputMessagesFilterPhotoVideoType : MessagesFilter
        {
            public override Types ConstructorCode => Types.InputMessagesFilterPhotoVideoType;

            public InputMessagesFilterPhotoVideoType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputMessagesFilterPhotoVideoType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputMessagesFilterPhotoVideoDocumentsType : MessagesFilter
        {
            public override Types ConstructorCode => Types.InputMessagesFilterPhotoVideoDocumentsType;

            public InputMessagesFilterPhotoVideoDocumentsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputMessagesFilterPhotoVideoDocumentsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputMessagesFilterDocumentType : MessagesFilter
        {
            public override Types ConstructorCode => Types.InputMessagesFilterDocumentType;

            public InputMessagesFilterDocumentType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputMessagesFilterDocumentType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputMessagesFilterUrlType : MessagesFilter
        {
            public override Types ConstructorCode => Types.InputMessagesFilterUrlType;

            public InputMessagesFilterUrlType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputMessagesFilterUrlType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputMessagesFilterGifType : MessagesFilter
        {
            public override Types ConstructorCode => Types.InputMessagesFilterGifType;

            public InputMessagesFilterGifType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputMessagesFilterGifType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputMessagesFilterVoiceType : MessagesFilter
        {
            public override Types ConstructorCode => Types.InputMessagesFilterVoiceType;

            public InputMessagesFilterVoiceType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputMessagesFilterVoiceType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputMessagesFilterMusicType : MessagesFilter
        {
            public override Types ConstructorCode => Types.InputMessagesFilterMusicType;

            public InputMessagesFilterMusicType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputMessagesFilterMusicType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputMessagesFilterChatPhotosType : MessagesFilter
        {
            public override Types ConstructorCode => Types.InputMessagesFilterChatPhotosType;

            public InputMessagesFilterChatPhotosType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputMessagesFilterChatPhotosType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class UpdateNewMessageType : Update
        {
            public override Types ConstructorCode => Types.UpdateNewMessageType;

            public Message Message;
            public int Pts;
            public int PtsCount;

            public UpdateNewMessageType() { }

            public UpdateNewMessageType(Message Message, int Pts, int PtsCount)
            {
                this.Message = Message;
                this.Pts = Pts;
                this.PtsCount = PtsCount;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Message.Write(writer);
                writer.Write(Pts);
                writer.Write(PtsCount);
            }

            public override void Read(TBinaryReader reader)
            {
                Message = reader.Read<Message>();
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateNewMessageType Message:{0} Pts:{1} PtsCount:{2})", Message, Pts, PtsCount);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Message": return Message;
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Message":
                    case "Pts":
                    case "PtsCount": return true;
                    default: return false;
                }
            }
        }

        public class UpdateMessageIDType : Update
        {
            public override Types ConstructorCode => Types.UpdateMessageIDType;

            public int Id;
            public long RandomId;

            public UpdateMessageIDType() { }

            public UpdateMessageIDType(int Id, long RandomId)
            {
                this.Id = Id;
                this.RandomId = RandomId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(RandomId);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
                RandomId = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(UpdateMessageIDType Id:{0} RandomId:{1})", Id, RandomId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "RandomId": return RandomId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "RandomId": return true;
                    default: return false;
                }
            }
        }

        public class UpdateDeleteMessagesType : Update
        {
            public override Types ConstructorCode => Types.UpdateDeleteMessagesType;

            public List<int> Messages;
            public int Pts;
            public int PtsCount;

            public UpdateDeleteMessagesType() { }

            public UpdateDeleteMessagesType(List<int> Messages, int Pts, int PtsCount)
            {
                this.Messages = Messages;
                this.Pts = Pts;
                this.PtsCount = PtsCount;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Messages.Count);
                foreach (int MessagesElement in Messages)
                    writer.Write(MessagesElement);
                writer.Write(Pts);
                writer.Write(PtsCount);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int MessagesLength = reader.ReadInt32();
                Messages = new List<int>(MessagesLength);
                for (int MessagesIndex = 0; MessagesIndex < MessagesLength; MessagesIndex++)
                    Messages.Add(reader.ReadInt32());
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateDeleteMessagesType Messages:{0} Pts:{1} PtsCount:{2})", Messages, Pts, PtsCount);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Messages": return Messages;
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Messages":
                    case "Pts":
                    case "PtsCount": return true;
                    default: return false;
                }
            }
        }

        public class UpdateUserTypingType : Update
        {
            public override Types ConstructorCode => Types.UpdateUserTypingType;

            public int UserId;
            public SendMessageAction Action;

            public UpdateUserTypingType() { }

            public UpdateUserTypingType(int UserId, SendMessageAction Action)
            {
                this.UserId = UserId;
                this.Action = Action;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                Action.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                Action = reader.Read<SendMessageAction>();
            }

            public override string ToString()
            {
                return string.Format("(UpdateUserTypingType UserId:{0} Action:{1})", UserId, Action);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "Action": return Action;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "Action": return true;
                    default: return false;
                }
            }
        }

        public class UpdateChatUserTypingType : Update
        {
            public override Types ConstructorCode => Types.UpdateChatUserTypingType;

            public int ChatId;
            public int UserId;
            public SendMessageAction Action;

            public UpdateChatUserTypingType() { }

            public UpdateChatUserTypingType(int ChatId, int UserId, SendMessageAction Action)
            {
                this.ChatId = ChatId;
                this.UserId = UserId;
                this.Action = Action;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
                writer.Write(UserId);
                Action.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                ChatId = reader.ReadInt32();
                UserId = reader.ReadInt32();
                Action = reader.Read<SendMessageAction>();
            }

            public override string ToString()
            {
                return string.Format("(UpdateChatUserTypingType ChatId:{0} UserId:{1} Action:{2})", ChatId, UserId, Action);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChatId": return ChatId;
                        case "UserId": return UserId;
                        case "Action": return Action;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChatId":
                    case "UserId":
                    case "Action": return true;
                    default: return false;
                }
            }
        }

        public class UpdateChatParticipantsType : Update
        {
            public override Types ConstructorCode => Types.UpdateChatParticipantsType;

            public ChatParticipants Participants;

            public UpdateChatParticipantsType() { }

            public UpdateChatParticipantsType(ChatParticipants Participants)
            {
                this.Participants = Participants;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Participants.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Participants = reader.Read<ChatParticipants>();
            }

            public override string ToString()
            {
                return string.Format("(UpdateChatParticipantsType Participants:{0})", Participants);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Participants": return Participants;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Participants": return true;
                    default: return false;
                }
            }
        }

        public class UpdateUserStatusType : Update
        {
            public override Types ConstructorCode => Types.UpdateUserStatusType;

            public int UserId;
            public UserStatus Status;

            public UpdateUserStatusType() { }

            public UpdateUserStatusType(int UserId, UserStatus Status)
            {
                this.UserId = UserId;
                this.Status = Status;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                Status.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                Status = reader.Read<UserStatus>();
            }

            public override string ToString()
            {
                return string.Format("(UpdateUserStatusType UserId:{0} Status:{1})", UserId, Status);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "Status": return Status;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "Status": return true;
                    default: return false;
                }
            }
        }

        public class UpdateUserNameType : Update
        {
            public override Types ConstructorCode => Types.UpdateUserNameType;

            public int UserId;
            public string FirstName;
            public string LastName;
            public string Username;

            public UpdateUserNameType() { }

            public UpdateUserNameType(int UserId, string FirstName, string LastName, string Username)
            {
                this.UserId = UserId;
                this.FirstName = FirstName;
                this.LastName = LastName;
                this.Username = Username;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(FirstName);
                writer.Write(LastName);
                writer.Write(Username);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                FirstName = reader.ReadString();
                LastName = reader.ReadString();
                Username = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(UpdateUserNameType UserId:{0} FirstName:{1} LastName:{2} Username:{3})", UserId, FirstName, LastName, Username);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "FirstName": return FirstName;
                        case "LastName": return LastName;
                        case "Username": return Username;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "FirstName":
                    case "LastName":
                    case "Username": return true;
                    default: return false;
                }
            }
        }

        public class UpdateUserPhotoType : Update
        {
            public override Types ConstructorCode => Types.UpdateUserPhotoType;

            public int UserId;
            public int Date;
            public UserProfilePhoto Photo;
            public bool Previous;

            public UpdateUserPhotoType() { }

            public UpdateUserPhotoType(int UserId, int Date, UserProfilePhoto Photo, bool Previous)
            {
                this.UserId = UserId;
                this.Date = Date;
                this.Photo = Photo;
                this.Previous = Previous;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(Date);
                Photo.Write(writer);
                writer.Write(Previous);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                Date = reader.ReadInt32();
                Photo = reader.Read<UserProfilePhoto>();
                Previous = reader.ReadBoolean();
            }

            public override string ToString()
            {
                return string.Format("(UpdateUserPhotoType UserId:{0} Date:{1} Photo:{2} Previous:{3})", UserId, Date, Photo, Previous);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "Date": return Date;
                        case "Photo": return Photo;
                        case "Previous": return Previous;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "Date":
                    case "Photo":
                    case "Previous": return true;
                    default: return false;
                }
            }
        }

        public class UpdateContactRegisteredType : Update
        {
            public override Types ConstructorCode => Types.UpdateContactRegisteredType;

            public int UserId;
            public int Date;

            public UpdateContactRegisteredType() { }

            public UpdateContactRegisteredType(int UserId, int Date)
            {
                this.UserId = UserId;
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateContactRegisteredType UserId:{0} Date:{1})", UserId, Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        public class UpdateContactLinkType : Update
        {
            public override Types ConstructorCode => Types.UpdateContactLinkType;

            public int UserId;
            public ContactLink MyLink;
            public ContactLink ForeignLink;

            public UpdateContactLinkType() { }

            public UpdateContactLinkType(int UserId, ContactLink MyLink, ContactLink ForeignLink)
            {
                this.UserId = UserId;
                this.MyLink = MyLink;
                this.ForeignLink = ForeignLink;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                MyLink.Write(writer);
                ForeignLink.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                MyLink = reader.Read<ContactLink>();
                ForeignLink = reader.Read<ContactLink>();
            }

            public override string ToString()
            {
                return string.Format("(UpdateContactLinkType UserId:{0} MyLink:{1} ForeignLink:{2})", UserId, MyLink, ForeignLink);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "MyLink": return MyLink;
                        case "ForeignLink": return ForeignLink;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "MyLink":
                    case "ForeignLink": return true;
                    default: return false;
                }
            }
        }

        public class UpdateNewAuthorizationType : Update
        {
            public override Types ConstructorCode => Types.UpdateNewAuthorizationType;

            public long AuthKeyId;
            public int Date;
            public string Device;
            public string Location;

            public UpdateNewAuthorizationType() { }

            public UpdateNewAuthorizationType(long AuthKeyId, int Date, string Device, string Location)
            {
                this.AuthKeyId = AuthKeyId;
                this.Date = Date;
                this.Device = Device;
                this.Location = Location;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(AuthKeyId);
                writer.Write(Date);
                writer.Write(Device);
                writer.Write(Location);
            }

            public override void Read(TBinaryReader reader)
            {
                AuthKeyId = reader.ReadInt64();
                Date = reader.ReadInt32();
                Device = reader.ReadString();
                Location = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(UpdateNewAuthorizationType AuthKeyId:{0} Date:{1} Device:{2} Location:{3})", AuthKeyId, Date, Device, Location);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "AuthKeyId": return AuthKeyId;
                        case "Date": return Date;
                        case "Device": return Device;
                        case "Location": return Location;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "AuthKeyId":
                    case "Date":
                    case "Device":
                    case "Location": return true;
                    default: return false;
                }
            }
        }

        public class UpdateNewEncryptedMessageType : Update
        {
            public override Types ConstructorCode => Types.UpdateNewEncryptedMessageType;

            public EncryptedMessage Message;
            public int Qts;

            public UpdateNewEncryptedMessageType() { }

            public UpdateNewEncryptedMessageType(EncryptedMessage Message, int Qts)
            {
                this.Message = Message;
                this.Qts = Qts;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Message.Write(writer);
                writer.Write(Qts);
            }

            public override void Read(TBinaryReader reader)
            {
                Message = reader.Read<EncryptedMessage>();
                Qts = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateNewEncryptedMessageType Message:{0} Qts:{1})", Message, Qts);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Message": return Message;
                        case "Qts": return Qts;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Message":
                    case "Qts": return true;
                    default: return false;
                }
            }
        }

        public class UpdateEncryptedChatTypingType : Update
        {
            public override Types ConstructorCode => Types.UpdateEncryptedChatTypingType;

            public int ChatId;

            public UpdateEncryptedChatTypingType() { }

            public UpdateEncryptedChatTypingType(int ChatId)
            {
                this.ChatId = ChatId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
            }

            public override void Read(TBinaryReader reader)
            {
                ChatId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateEncryptedChatTypingType ChatId:{0})", ChatId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChatId": return ChatId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChatId": return true;
                    default: return false;
                }
            }
        }

        public class UpdateEncryptionType : Update
        {
            public override Types ConstructorCode => Types.UpdateEncryptionType;

            public EncryptedChat Chat;
            public int Date;

            public UpdateEncryptionType() { }

            public UpdateEncryptionType(EncryptedChat Chat, int Date)
            {
                this.Chat = Chat;
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Chat.Write(writer);
                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                Chat = reader.Read<EncryptedChat>();
                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateEncryptionType Chat:{0} Date:{1})", Chat, Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Chat": return Chat;
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Chat":
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        public class UpdateEncryptedMessagesReadType : Update
        {
            public override Types ConstructorCode => Types.UpdateEncryptedMessagesReadType;

            public int ChatId;
            public int MaxDate;
            public int Date;

            public UpdateEncryptedMessagesReadType() { }

            public UpdateEncryptedMessagesReadType(int ChatId, int MaxDate, int Date)
            {
                this.ChatId = ChatId;
                this.MaxDate = MaxDate;
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
                writer.Write(MaxDate);
                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                ChatId = reader.ReadInt32();
                MaxDate = reader.ReadInt32();
                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateEncryptedMessagesReadType ChatId:{0} MaxDate:{1} Date:{2})", ChatId, MaxDate, Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChatId": return ChatId;
                        case "MaxDate": return MaxDate;
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChatId":
                    case "MaxDate":
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        public class UpdateChatParticipantAddType : Update
        {
            public override Types ConstructorCode => Types.UpdateChatParticipantAddType;

            public int ChatId;
            public int UserId;
            public int InviterId;
            public int Date;
            public int Version;

            public UpdateChatParticipantAddType() { }

            public UpdateChatParticipantAddType(int ChatId, int UserId, int InviterId, int Date, int Version)
            {
                this.ChatId = ChatId;
                this.UserId = UserId;
                this.InviterId = InviterId;
                this.Date = Date;
                this.Version = Version;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
                writer.Write(UserId);
                writer.Write(InviterId);
                writer.Write(Date);
                writer.Write(Version);
            }

            public override void Read(TBinaryReader reader)
            {
                ChatId = reader.ReadInt32();
                UserId = reader.ReadInt32();
                InviterId = reader.ReadInt32();
                Date = reader.ReadInt32();
                Version = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateChatParticipantAddType ChatId:{0} UserId:{1} InviterId:{2} Date:{3} Version:{4})", ChatId, UserId, InviterId, Date, Version);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChatId": return ChatId;
                        case "UserId": return UserId;
                        case "InviterId": return InviterId;
                        case "Date": return Date;
                        case "Version": return Version;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChatId":
                    case "UserId":
                    case "InviterId":
                    case "Date":
                    case "Version": return true;
                    default: return false;
                }
            }
        }

        public class UpdateChatParticipantDeleteType : Update
        {
            public override Types ConstructorCode => Types.UpdateChatParticipantDeleteType;

            public int ChatId;
            public int UserId;
            public int Version;

            public UpdateChatParticipantDeleteType() { }

            public UpdateChatParticipantDeleteType(int ChatId, int UserId, int Version)
            {
                this.ChatId = ChatId;
                this.UserId = UserId;
                this.Version = Version;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
                writer.Write(UserId);
                writer.Write(Version);
            }

            public override void Read(TBinaryReader reader)
            {
                ChatId = reader.ReadInt32();
                UserId = reader.ReadInt32();
                Version = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateChatParticipantDeleteType ChatId:{0} UserId:{1} Version:{2})", ChatId, UserId, Version);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChatId": return ChatId;
                        case "UserId": return UserId;
                        case "Version": return Version;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChatId":
                    case "UserId":
                    case "Version": return true;
                    default: return false;
                }
            }
        }

        public class UpdateDcOptionsType : Update
        {
            public override Types ConstructorCode => Types.UpdateDcOptionsType;

            public List<DcOption> DcOptions;

            public UpdateDcOptionsType() { }

            public UpdateDcOptionsType(List<DcOption> DcOptions)
            {
                this.DcOptions = DcOptions;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(DcOptions.Count);
                foreach (DcOption DcOptionsElement in DcOptions)
                    DcOptionsElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int DcOptionsLength = reader.ReadInt32();
                DcOptions = new List<DcOption>(DcOptionsLength);
                for (int DcOptionsIndex = 0; DcOptionsIndex < DcOptionsLength; DcOptionsIndex++)
                    DcOptions.Add(reader.Read<DcOption>());
            }

            public override string ToString()
            {
                return string.Format("(UpdateDcOptionsType DcOptions:{0})", DcOptions);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "DcOptions": return DcOptions;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "DcOptions": return true;
                    default: return false;
                }
            }
        }

        public class UpdateUserBlockedType : Update
        {
            public override Types ConstructorCode => Types.UpdateUserBlockedType;

            public int UserId;
            public bool Blocked;

            public UpdateUserBlockedType() { }

            public UpdateUserBlockedType(int UserId, bool Blocked)
            {
                this.UserId = UserId;
                this.Blocked = Blocked;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(Blocked);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                Blocked = reader.ReadBoolean();
            }

            public override string ToString()
            {
                return string.Format("(UpdateUserBlockedType UserId:{0} Blocked:{1})", UserId, Blocked);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "Blocked": return Blocked;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "Blocked": return true;
                    default: return false;
                }
            }
        }

        public class UpdateNotifySettingsType : Update
        {
            public override Types ConstructorCode => Types.UpdateNotifySettingsType;

            public NotifyPeer Peer;
            public PeerNotifySettings NotifySettings;

            public UpdateNotifySettingsType() { }

            public UpdateNotifySettingsType(NotifyPeer Peer, PeerNotifySettings NotifySettings)
            {
                this.Peer = Peer;
                this.NotifySettings = NotifySettings;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                NotifySettings.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Peer = reader.Read<NotifyPeer>();
                NotifySettings = reader.Read<PeerNotifySettings>();
            }

            public override string ToString()
            {
                return string.Format("(UpdateNotifySettingsType Peer:{0} NotifySettings:{1})", Peer, NotifySettings);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Peer": return Peer;
                        case "NotifySettings": return NotifySettings;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Peer":
                    case "NotifySettings": return true;
                    default: return false;
                }
            }
        }

        public class UpdateServiceNotificationType : Update
        {
            public override Types ConstructorCode => Types.UpdateServiceNotificationType;

            public string Type;
            public string Message;
            public MessageMedia Media;
            public bool Popup;

            public UpdateServiceNotificationType() { }

            public UpdateServiceNotificationType(string Type, string Message, MessageMedia Media, bool Popup)
            {
                this.Type = Type;
                this.Message = Message;
                this.Media = Media;
                this.Popup = Popup;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Type);
                writer.Write(Message);
                Media.Write(writer);
                writer.Write(Popup);
            }

            public override void Read(TBinaryReader reader)
            {
                Type = reader.ReadString();
                Message = reader.ReadString();
                Media = reader.Read<MessageMedia>();
                Popup = reader.ReadBoolean();
            }

            public override string ToString()
            {
                return string.Format("(UpdateServiceNotificationType Type:{0} Message:{1} Media:{2} Popup:{3})", Type, Message, Media, Popup);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Type": return Type;
                        case "Message": return Message;
                        case "Media": return Media;
                        case "Popup": return Popup;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Type":
                    case "Message":
                    case "Media":
                    case "Popup": return true;
                    default: return false;
                }
            }
        }

        public class UpdatePrivacyType : Update
        {
            public override Types ConstructorCode => Types.UpdatePrivacyType;

            public PrivacyKey Key;
            public List<PrivacyRule> Rules;

            public UpdatePrivacyType() { }

            public UpdatePrivacyType(PrivacyKey Key, List<PrivacyRule> Rules)
            {
                this.Key = Key;
                this.Rules = Rules;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Key.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Rules.Count);
                foreach (PrivacyRule RulesElement in Rules)
                    RulesElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Key = reader.Read<PrivacyKey>();
                reader.ReadInt32(); // vector code
                int RulesLength = reader.ReadInt32();
                Rules = new List<PrivacyRule>(RulesLength);
                for (int RulesIndex = 0; RulesIndex < RulesLength; RulesIndex++)
                    Rules.Add(reader.Read<PrivacyRule>());
            }

            public override string ToString()
            {
                return string.Format("(UpdatePrivacyType Key:{0} Rules:{1})", Key, Rules);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Key": return Key;
                        case "Rules": return Rules;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Key":
                    case "Rules": return true;
                    default: return false;
                }
            }
        }

        public class UpdateUserPhoneType : Update
        {
            public override Types ConstructorCode => Types.UpdateUserPhoneType;

            public int UserId;
            public string Phone;

            public UpdateUserPhoneType() { }

            public UpdateUserPhoneType(int UserId, string Phone)
            {
                this.UserId = UserId;
                this.Phone = Phone;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(Phone);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                Phone = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(UpdateUserPhoneType UserId:{0} Phone:{1})", UserId, Phone);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "Phone": return Phone;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "Phone": return true;
                    default: return false;
                }
            }
        }

        public class UpdateReadHistoryInboxType : Update
        {
            public override Types ConstructorCode => Types.UpdateReadHistoryInboxType;

            public Peer Peer;
            public int MaxId;
            public int Pts;
            public int PtsCount;

            public UpdateReadHistoryInboxType() { }

            public UpdateReadHistoryInboxType(Peer Peer, int MaxId, int Pts, int PtsCount)
            {
                this.Peer = Peer;
                this.MaxId = MaxId;
                this.Pts = Pts;
                this.PtsCount = PtsCount;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(MaxId);
                writer.Write(Pts);
                writer.Write(PtsCount);
            }

            public override void Read(TBinaryReader reader)
            {
                Peer = reader.Read<Peer>();
                MaxId = reader.ReadInt32();
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateReadHistoryInboxType Peer:{0} MaxId:{1} Pts:{2} PtsCount:{3})", Peer, MaxId, Pts, PtsCount);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Peer": return Peer;
                        case "MaxId": return MaxId;
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Peer":
                    case "MaxId":
                    case "Pts":
                    case "PtsCount": return true;
                    default: return false;
                }
            }
        }

        public class UpdateReadHistoryOutboxType : Update
        {
            public override Types ConstructorCode => Types.UpdateReadHistoryOutboxType;

            public Peer Peer;
            public int MaxId;
            public int Pts;
            public int PtsCount;

            public UpdateReadHistoryOutboxType() { }

            public UpdateReadHistoryOutboxType(Peer Peer, int MaxId, int Pts, int PtsCount)
            {
                this.Peer = Peer;
                this.MaxId = MaxId;
                this.Pts = Pts;
                this.PtsCount = PtsCount;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(MaxId);
                writer.Write(Pts);
                writer.Write(PtsCount);
            }

            public override void Read(TBinaryReader reader)
            {
                Peer = reader.Read<Peer>();
                MaxId = reader.ReadInt32();
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateReadHistoryOutboxType Peer:{0} MaxId:{1} Pts:{2} PtsCount:{3})", Peer, MaxId, Pts, PtsCount);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Peer": return Peer;
                        case "MaxId": return MaxId;
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Peer":
                    case "MaxId":
                    case "Pts":
                    case "PtsCount": return true;
                    default: return false;
                }
            }
        }

        public class UpdateWebPageType : Update
        {
            public override Types ConstructorCode => Types.UpdateWebPageType;

            public WebPage Webpage;
            public int Pts;
            public int PtsCount;

            public UpdateWebPageType() { }

            public UpdateWebPageType(WebPage Webpage, int Pts, int PtsCount)
            {
                this.Webpage = Webpage;
                this.Pts = Pts;
                this.PtsCount = PtsCount;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Webpage.Write(writer);
                writer.Write(Pts);
                writer.Write(PtsCount);
            }

            public override void Read(TBinaryReader reader)
            {
                Webpage = reader.Read<WebPage>();
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateWebPageType Webpage:{0} Pts:{1} PtsCount:{2})", Webpage, Pts, PtsCount);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Webpage": return Webpage;
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Webpage":
                    case "Pts":
                    case "PtsCount": return true;
                    default: return false;
                }
            }
        }

        public class UpdateReadMessagesContentsType : Update
        {
            public override Types ConstructorCode => Types.UpdateReadMessagesContentsType;

            public List<int> Messages;
            public int Pts;
            public int PtsCount;

            public UpdateReadMessagesContentsType() { }

            public UpdateReadMessagesContentsType(List<int> Messages, int Pts, int PtsCount)
            {
                this.Messages = Messages;
                this.Pts = Pts;
                this.PtsCount = PtsCount;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Messages.Count);
                foreach (int MessagesElement in Messages)
                    writer.Write(MessagesElement);
                writer.Write(Pts);
                writer.Write(PtsCount);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int MessagesLength = reader.ReadInt32();
                Messages = new List<int>(MessagesLength);
                for (int MessagesIndex = 0; MessagesIndex < MessagesLength; MessagesIndex++)
                    Messages.Add(reader.ReadInt32());
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateReadMessagesContentsType Messages:{0} Pts:{1} PtsCount:{2})", Messages, Pts, PtsCount);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Messages": return Messages;
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Messages":
                    case "Pts":
                    case "PtsCount": return true;
                    default: return false;
                }
            }
        }

        public class UpdateChannelTooLongType : Update
        {
            public override Types ConstructorCode => Types.UpdateChannelTooLongType;

            public int ChannelId;
            public int? Pts;

            public UpdateChannelTooLongType() { }

            /// <summary>
            /// The following arguments can be null: Pts
            /// </summary>
            /// <param name="ChannelId">Can NOT be null</param>
            /// <param name="Pts">Can be null</param>
            public UpdateChannelTooLongType(int ChannelId, int? Pts)
            {
                this.ChannelId = ChannelId;
                this.Pts = Pts;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Pts != null ? 1 << 0 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                writer.Write(ChannelId);
                if (Pts != null)
                {
                    writer.Write(Pts.Value);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                ChannelId = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    Pts = reader.ReadInt32();
                }

            }

            public override string ToString()
            {
                return string.Format("(UpdateChannelTooLongType ChannelId:{0} Pts:{1})", ChannelId, Pts);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChannelId": return ChannelId;
                        case "Pts": return Pts;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChannelId":
                    case "Pts": return true;
                    default: return false;
                }
            }
        }

        public class UpdateChannelType : Update
        {
            public override Types ConstructorCode => Types.UpdateChannelType;

            public int ChannelId;

            public UpdateChannelType() { }

            public UpdateChannelType(int ChannelId)
            {
                this.ChannelId = ChannelId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChannelId);
            }

            public override void Read(TBinaryReader reader)
            {
                ChannelId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateChannelType ChannelId:{0})", ChannelId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChannelId": return ChannelId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChannelId": return true;
                    default: return false;
                }
            }
        }

        public class UpdateNewChannelMessageType : Update
        {
            public override Types ConstructorCode => Types.UpdateNewChannelMessageType;

            public Message Message;
            public int Pts;
            public int PtsCount;

            public UpdateNewChannelMessageType() { }

            public UpdateNewChannelMessageType(Message Message, int Pts, int PtsCount)
            {
                this.Message = Message;
                this.Pts = Pts;
                this.PtsCount = PtsCount;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Message.Write(writer);
                writer.Write(Pts);
                writer.Write(PtsCount);
            }

            public override void Read(TBinaryReader reader)
            {
                Message = reader.Read<Message>();
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateNewChannelMessageType Message:{0} Pts:{1} PtsCount:{2})", Message, Pts, PtsCount);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Message": return Message;
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Message":
                    case "Pts":
                    case "PtsCount": return true;
                    default: return false;
                }
            }
        }

        public class UpdateReadChannelInboxType : Update
        {
            public override Types ConstructorCode => Types.UpdateReadChannelInboxType;

            public int ChannelId;
            public int MaxId;

            public UpdateReadChannelInboxType() { }

            public UpdateReadChannelInboxType(int ChannelId, int MaxId)
            {
                this.ChannelId = ChannelId;
                this.MaxId = MaxId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChannelId);
                writer.Write(MaxId);
            }

            public override void Read(TBinaryReader reader)
            {
                ChannelId = reader.ReadInt32();
                MaxId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateReadChannelInboxType ChannelId:{0} MaxId:{1})", ChannelId, MaxId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChannelId": return ChannelId;
                        case "MaxId": return MaxId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChannelId":
                    case "MaxId": return true;
                    default: return false;
                }
            }
        }

        public class UpdateDeleteChannelMessagesType : Update
        {
            public override Types ConstructorCode => Types.UpdateDeleteChannelMessagesType;

            public int ChannelId;
            public List<int> Messages;
            public int Pts;
            public int PtsCount;

            public UpdateDeleteChannelMessagesType() { }

            public UpdateDeleteChannelMessagesType(int ChannelId, List<int> Messages, int Pts, int PtsCount)
            {
                this.ChannelId = ChannelId;
                this.Messages = Messages;
                this.Pts = Pts;
                this.PtsCount = PtsCount;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChannelId);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Messages.Count);
                foreach (int MessagesElement in Messages)
                    writer.Write(MessagesElement);
                writer.Write(Pts);
                writer.Write(PtsCount);
            }

            public override void Read(TBinaryReader reader)
            {
                ChannelId = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int MessagesLength = reader.ReadInt32();
                Messages = new List<int>(MessagesLength);
                for (int MessagesIndex = 0; MessagesIndex < MessagesLength; MessagesIndex++)
                    Messages.Add(reader.ReadInt32());
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateDeleteChannelMessagesType ChannelId:{0} Messages:{1} Pts:{2} PtsCount:{3})", ChannelId, Messages, Pts, PtsCount);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChannelId": return ChannelId;
                        case "Messages": return Messages;
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChannelId":
                    case "Messages":
                    case "Pts":
                    case "PtsCount": return true;
                    default: return false;
                }
            }
        }

        public class UpdateChannelMessageViewsType : Update
        {
            public override Types ConstructorCode => Types.UpdateChannelMessageViewsType;

            public int ChannelId;
            public int Id;
            public int Views;

            public UpdateChannelMessageViewsType() { }

            public UpdateChannelMessageViewsType(int ChannelId, int Id, int Views)
            {
                this.ChannelId = ChannelId;
                this.Id = Id;
                this.Views = Views;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChannelId);
                writer.Write(Id);
                writer.Write(Views);
            }

            public override void Read(TBinaryReader reader)
            {
                ChannelId = reader.ReadInt32();
                Id = reader.ReadInt32();
                Views = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateChannelMessageViewsType ChannelId:{0} Id:{1} Views:{2})", ChannelId, Id, Views);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChannelId": return ChannelId;
                        case "Id": return Id;
                        case "Views": return Views;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChannelId":
                    case "Id":
                    case "Views": return true;
                    default: return false;
                }
            }
        }

        public class UpdateChatAdminsType : Update
        {
            public override Types ConstructorCode => Types.UpdateChatAdminsType;

            public int ChatId;
            public bool Enabled;
            public int Version;

            public UpdateChatAdminsType() { }

            public UpdateChatAdminsType(int ChatId, bool Enabled, int Version)
            {
                this.ChatId = ChatId;
                this.Enabled = Enabled;
                this.Version = Version;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
                writer.Write(Enabled);
                writer.Write(Version);
            }

            public override void Read(TBinaryReader reader)
            {
                ChatId = reader.ReadInt32();
                Enabled = reader.ReadBoolean();
                Version = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateChatAdminsType ChatId:{0} Enabled:{1} Version:{2})", ChatId, Enabled, Version);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChatId": return ChatId;
                        case "Enabled": return Enabled;
                        case "Version": return Version;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChatId":
                    case "Enabled":
                    case "Version": return true;
                    default: return false;
                }
            }
        }

        public class UpdateChatParticipantAdminType : Update
        {
            public override Types ConstructorCode => Types.UpdateChatParticipantAdminType;

            public int ChatId;
            public int UserId;
            public bool IsAdmin;
            public int Version;

            public UpdateChatParticipantAdminType() { }

            public UpdateChatParticipantAdminType(int ChatId, int UserId, bool IsAdmin, int Version)
            {
                this.ChatId = ChatId;
                this.UserId = UserId;
                this.IsAdmin = IsAdmin;
                this.Version = Version;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
                writer.Write(UserId);
                writer.Write(IsAdmin);
                writer.Write(Version);
            }

            public override void Read(TBinaryReader reader)
            {
                ChatId = reader.ReadInt32();
                UserId = reader.ReadInt32();
                IsAdmin = reader.ReadBoolean();
                Version = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateChatParticipantAdminType ChatId:{0} UserId:{1} IsAdmin:{2} Version:{3})", ChatId, UserId, IsAdmin, Version);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChatId": return ChatId;
                        case "UserId": return UserId;
                        case "IsAdmin": return IsAdmin;
                        case "Version": return Version;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChatId":
                    case "UserId":
                    case "IsAdmin":
                    case "Version": return true;
                    default: return false;
                }
            }
        }

        public class UpdateNewStickerSetType : Update
        {
            public override Types ConstructorCode => Types.UpdateNewStickerSetType;

            public MessagesStickerSet Stickerset;

            public UpdateNewStickerSetType() { }

            public UpdateNewStickerSetType(MessagesStickerSet Stickerset)
            {
                this.Stickerset = Stickerset;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Stickerset.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Stickerset = reader.Read<MessagesStickerSet>();
            }

            public override string ToString()
            {
                return string.Format("(UpdateNewStickerSetType Stickerset:{0})", Stickerset);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Stickerset": return Stickerset;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Stickerset": return true;
                    default: return false;
                }
            }
        }

        public class UpdateStickerSetsOrderType : Update
        {
            public override Types ConstructorCode => Types.UpdateStickerSetsOrderType;

            public List<long> Order;

            public UpdateStickerSetsOrderType() { }

            public UpdateStickerSetsOrderType(List<long> Order)
            {
                this.Order = Order;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Order.Count);
                foreach (long OrderElement in Order)
                    writer.Write(OrderElement);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int OrderLength = reader.ReadInt32();
                Order = new List<long>(OrderLength);
                for (int OrderIndex = 0; OrderIndex < OrderLength; OrderIndex++)
                    Order.Add(reader.ReadInt64());
            }

            public override string ToString()
            {
                return string.Format("(UpdateStickerSetsOrderType Order:{0})", Order);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Order": return Order;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Order": return true;
                    default: return false;
                }
            }
        }

        public class UpdateStickerSetsType : Update
        {
            public override Types ConstructorCode => Types.UpdateStickerSetsType;

            public UpdateStickerSetsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(UpdateStickerSetsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class UpdateSavedGifsType : Update
        {
            public override Types ConstructorCode => Types.UpdateSavedGifsType;

            public UpdateSavedGifsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(UpdateSavedGifsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class UpdateBotInlineQueryType : Update
        {
            public override Types ConstructorCode => Types.UpdateBotInlineQueryType;

            public long QueryId;
            public int UserId;
            public string Query;
            public GeoPoint Geo;
            public string Offset;

            public UpdateBotInlineQueryType() { }

            /// <summary>
            /// The following arguments can be null: Geo
            /// </summary>
            /// <param name="QueryId">Can NOT be null</param>
            /// <param name="UserId">Can NOT be null</param>
            /// <param name="Query">Can NOT be null</param>
            /// <param name="Geo">Can be null</param>
            /// <param name="Offset">Can NOT be null</param>
            public UpdateBotInlineQueryType(long QueryId, int UserId, string Query, GeoPoint Geo, string Offset)
            {
                this.QueryId = QueryId;
                this.UserId = UserId;
                this.Query = Query;
                this.Geo = Geo;
                this.Offset = Offset;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Geo != null ? 1 << 0 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                writer.Write(QueryId);
                writer.Write(UserId);
                writer.Write(Query);
                if (Geo != null)
                {
                    Geo.Write(writer);
                }

                writer.Write(Offset);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                QueryId = reader.ReadInt64();
                UserId = reader.ReadInt32();
                Query = reader.ReadString();
                if ((flags & (1 << 0)) != 0)
                {
                    Geo = reader.Read<GeoPoint>();
                }

                Offset = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(UpdateBotInlineQueryType QueryId:{0} UserId:{1} Query:{2} Geo:{3} Offset:{4})", QueryId, UserId, Query, Geo, Offset);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "QueryId": return QueryId;
                        case "UserId": return UserId;
                        case "Query": return Query;
                        case "Geo": return Geo;
                        case "Offset": return Offset;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "QueryId":
                    case "UserId":
                    case "Query":
                    case "Geo":
                    case "Offset": return true;
                    default: return false;
                }
            }
        }

        public class UpdateBotInlineSendType : Update
        {
            public override Types ConstructorCode => Types.UpdateBotInlineSendType;

            public int UserId;
            public string Query;
            public GeoPoint Geo;
            public string Id;
            public InputBotInlineMessageID MsgId;

            public UpdateBotInlineSendType() { }

            /// <summary>
            /// The following arguments can be null: Geo, MsgId
            /// </summary>
            /// <param name="UserId">Can NOT be null</param>
            /// <param name="Query">Can NOT be null</param>
            /// <param name="Geo">Can be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="MsgId">Can be null</param>
            public UpdateBotInlineSendType(int UserId, string Query, GeoPoint Geo, string Id, InputBotInlineMessageID MsgId)
            {
                this.UserId = UserId;
                this.Query = Query;
                this.Geo = Geo;
                this.Id = Id;
                this.MsgId = MsgId;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Geo != null ? 1 << 0 : 0) |
                    (MsgId != null ? 1 << 1 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                writer.Write(UserId);
                writer.Write(Query);
                if (Geo != null)
                {
                    Geo.Write(writer);
                }

                writer.Write(Id);
                if (MsgId != null)
                {
                    MsgId.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                UserId = reader.ReadInt32();
                Query = reader.ReadString();
                if ((flags & (1 << 0)) != 0)
                {
                    Geo = reader.Read<GeoPoint>();
                }

                Id = reader.ReadString();
                if ((flags & (1 << 1)) != 0)
                {
                    MsgId = reader.Read<InputBotInlineMessageID>();
                }

            }

            public override string ToString()
            {
                return string.Format("(UpdateBotInlineSendType UserId:{0} Query:{1} Geo:{2} Id:{3} MsgId:{4})", UserId, Query, Geo, Id, MsgId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "Query": return Query;
                        case "Geo": return Geo;
                        case "Id": return Id;
                        case "MsgId": return MsgId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "Query":
                    case "Geo":
                    case "Id":
                    case "MsgId": return true;
                    default: return false;
                }
            }
        }

        public class UpdateEditChannelMessageType : Update
        {
            public override Types ConstructorCode => Types.UpdateEditChannelMessageType;

            public Message Message;
            public int Pts;
            public int PtsCount;

            public UpdateEditChannelMessageType() { }

            public UpdateEditChannelMessageType(Message Message, int Pts, int PtsCount)
            {
                this.Message = Message;
                this.Pts = Pts;
                this.PtsCount = PtsCount;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Message.Write(writer);
                writer.Write(Pts);
                writer.Write(PtsCount);
            }

            public override void Read(TBinaryReader reader)
            {
                Message = reader.Read<Message>();
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateEditChannelMessageType Message:{0} Pts:{1} PtsCount:{2})", Message, Pts, PtsCount);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Message": return Message;
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Message":
                    case "Pts":
                    case "PtsCount": return true;
                    default: return false;
                }
            }
        }

        public class UpdateChannelPinnedMessageType : Update
        {
            public override Types ConstructorCode => Types.UpdateChannelPinnedMessageType;

            public int ChannelId;
            public int Id;

            public UpdateChannelPinnedMessageType() { }

            public UpdateChannelPinnedMessageType(int ChannelId, int Id)
            {
                this.ChannelId = ChannelId;
                this.Id = Id;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChannelId);
                writer.Write(Id);
            }

            public override void Read(TBinaryReader reader)
            {
                ChannelId = reader.ReadInt32();
                Id = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateChannelPinnedMessageType ChannelId:{0} Id:{1})", ChannelId, Id);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChannelId": return ChannelId;
                        case "Id": return Id;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChannelId":
                    case "Id": return true;
                    default: return false;
                }
            }
        }

        public class UpdateBotCallbackQueryType : Update
        {
            public override Types ConstructorCode => Types.UpdateBotCallbackQueryType;

            public long QueryId;
            public int UserId;
            public Peer Peer;
            public int MsgId;
            public byte[] Data;

            public UpdateBotCallbackQueryType() { }

            public UpdateBotCallbackQueryType(long QueryId, int UserId, Peer Peer, int MsgId, byte[] Data)
            {
                this.QueryId = QueryId;
                this.UserId = UserId;
                this.Peer = Peer;
                this.MsgId = MsgId;
                this.Data = Data;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(QueryId);
                writer.Write(UserId);
                Peer.Write(writer);
                writer.Write(MsgId);
                writer.Write(Data);
            }

            public override void Read(TBinaryReader reader)
            {
                QueryId = reader.ReadInt64();
                UserId = reader.ReadInt32();
                Peer = reader.Read<Peer>();
                MsgId = reader.ReadInt32();
                Data = reader.ReadBytes();
            }

            public override string ToString()
            {
                return string.Format("(UpdateBotCallbackQueryType QueryId:{0} UserId:{1} Peer:{2} MsgId:{3} Data:{4})", QueryId, UserId, Peer, MsgId, Data);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "QueryId": return QueryId;
                        case "UserId": return UserId;
                        case "Peer": return Peer;
                        case "MsgId": return MsgId;
                        case "Data": return Data;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "QueryId":
                    case "UserId":
                    case "Peer":
                    case "MsgId":
                    case "Data": return true;
                    default: return false;
                }
            }
        }

        public class UpdateEditMessageType : Update
        {
            public override Types ConstructorCode => Types.UpdateEditMessageType;

            public Message Message;
            public int Pts;
            public int PtsCount;

            public UpdateEditMessageType() { }

            public UpdateEditMessageType(Message Message, int Pts, int PtsCount)
            {
                this.Message = Message;
                this.Pts = Pts;
                this.PtsCount = PtsCount;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Message.Write(writer);
                writer.Write(Pts);
                writer.Write(PtsCount);
            }

            public override void Read(TBinaryReader reader)
            {
                Message = reader.Read<Message>();
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateEditMessageType Message:{0} Pts:{1} PtsCount:{2})", Message, Pts, PtsCount);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Message": return Message;
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Message":
                    case "Pts":
                    case "PtsCount": return true;
                    default: return false;
                }
            }
        }

        public class UpdateInlineBotCallbackQueryType : Update
        {
            public override Types ConstructorCode => Types.UpdateInlineBotCallbackQueryType;

            public long QueryId;
            public int UserId;
            public InputBotInlineMessageID MsgId;
            public byte[] Data;

            public UpdateInlineBotCallbackQueryType() { }

            public UpdateInlineBotCallbackQueryType(long QueryId, int UserId, InputBotInlineMessageID MsgId, byte[] Data)
            {
                this.QueryId = QueryId;
                this.UserId = UserId;
                this.MsgId = MsgId;
                this.Data = Data;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(QueryId);
                writer.Write(UserId);
                MsgId.Write(writer);
                writer.Write(Data);
            }

            public override void Read(TBinaryReader reader)
            {
                QueryId = reader.ReadInt64();
                UserId = reader.ReadInt32();
                MsgId = reader.Read<InputBotInlineMessageID>();
                Data = reader.ReadBytes();
            }

            public override string ToString()
            {
                return string.Format("(UpdateInlineBotCallbackQueryType QueryId:{0} UserId:{1} MsgId:{2} Data:{3})", QueryId, UserId, MsgId, Data);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "QueryId": return QueryId;
                        case "UserId": return UserId;
                        case "MsgId": return MsgId;
                        case "Data": return Data;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "QueryId":
                    case "UserId":
                    case "MsgId":
                    case "Data": return true;
                    default: return false;
                }
            }
        }

        public class UpdateReadChannelOutboxType : Update
        {
            public override Types ConstructorCode => Types.UpdateReadChannelOutboxType;

            public int ChannelId;
            public int MaxId;

            public UpdateReadChannelOutboxType() { }

            public UpdateReadChannelOutboxType(int ChannelId, int MaxId)
            {
                this.ChannelId = ChannelId;
                this.MaxId = MaxId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChannelId);
                writer.Write(MaxId);
            }

            public override void Read(TBinaryReader reader)
            {
                ChannelId = reader.ReadInt32();
                MaxId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateReadChannelOutboxType ChannelId:{0} MaxId:{1})", ChannelId, MaxId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChannelId": return ChannelId;
                        case "MaxId": return MaxId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChannelId":
                    case "MaxId": return true;
                    default: return false;
                }
            }
        }

        public class UpdateDraftMessageType : Update
        {
            public override Types ConstructorCode => Types.UpdateDraftMessageType;

            public Peer Peer;
            public DraftMessage Draft;

            public UpdateDraftMessageType() { }

            public UpdateDraftMessageType(Peer Peer, DraftMessage Draft)
            {
                this.Peer = Peer;
                this.Draft = Draft;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                Draft.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Peer = reader.Read<Peer>();
                Draft = reader.Read<DraftMessage>();
            }

            public override string ToString()
            {
                return string.Format("(UpdateDraftMessageType Peer:{0} Draft:{1})", Peer, Draft);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Peer": return Peer;
                        case "Draft": return Draft;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Peer":
                    case "Draft": return true;
                    default: return false;
                }
            }
        }

        public class UpdatesStateType : UpdatesState
        {
            public override Types ConstructorCode => Types.UpdatesStateType;

            public int Pts;
            public int Qts;
            public int Date;
            public int Seq;
            public int UnreadCount;

            public UpdatesStateType() { }

            public UpdatesStateType(int Pts, int Qts, int Date, int Seq, int UnreadCount)
            {
                this.Pts = Pts;
                this.Qts = Qts;
                this.Date = Date;
                this.Seq = Seq;
                this.UnreadCount = UnreadCount;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Pts);
                writer.Write(Qts);
                writer.Write(Date);
                writer.Write(Seq);
                writer.Write(UnreadCount);
            }

            public override void Read(TBinaryReader reader)
            {
                Pts = reader.ReadInt32();
                Qts = reader.ReadInt32();
                Date = reader.ReadInt32();
                Seq = reader.ReadInt32();
                UnreadCount = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdatesStateType Pts:{0} Qts:{1} Date:{2} Seq:{3} UnreadCount:{4})", Pts, Qts, Date, Seq, UnreadCount);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Pts": return Pts;
                        case "Qts": return Qts;
                        case "Date": return Date;
                        case "Seq": return Seq;
                        case "UnreadCount": return UnreadCount;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Pts":
                    case "Qts":
                    case "Date":
                    case "Seq":
                    case "UnreadCount": return true;
                    default: return false;
                }
            }
        }

        public class UpdatesDifferenceEmptyType : UpdatesDifference
        {
            public override Types ConstructorCode => Types.UpdatesDifferenceEmptyType;

            public int Date;
            public int Seq;

            public UpdatesDifferenceEmptyType() { }

            public UpdatesDifferenceEmptyType(int Date, int Seq)
            {
                this.Date = Date;
                this.Seq = Seq;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Date);
                writer.Write(Seq);
            }

            public override void Read(TBinaryReader reader)
            {
                Date = reader.ReadInt32();
                Seq = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdatesDifferenceEmptyType Date:{0} Seq:{1})", Date, Seq);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Date": return Date;
                        case "Seq": return Seq;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Date":
                    case "Seq": return true;
                    default: return false;
                }
            }
        }

        public class UpdatesDifferenceType : UpdatesDifference
        {
            public override Types ConstructorCode => Types.UpdatesDifferenceType;

            public List<Message> NewMessages;
            public List<EncryptedMessage> NewEncryptedMessages;
            public List<Update> OtherUpdates;
            public List<Chat> Chats;
            public List<User> Users;
            public UpdatesState State;

            public UpdatesDifferenceType() { }

            public UpdatesDifferenceType(List<Message> NewMessages, List<EncryptedMessage> NewEncryptedMessages, List<Update> OtherUpdates, List<Chat> Chats, List<User> Users, UpdatesState State)
            {
                this.NewMessages = NewMessages;
                this.NewEncryptedMessages = NewEncryptedMessages;
                this.OtherUpdates = OtherUpdates;
                this.Chats = Chats;
                this.Users = Users;
                this.State = State;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(NewMessages.Count);
                foreach (Message NewMessagesElement in NewMessages)
                    NewMessagesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(NewEncryptedMessages.Count);
                foreach (EncryptedMessage NewEncryptedMessagesElement in NewEncryptedMessages)
                    NewEncryptedMessagesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(OtherUpdates.Count);
                foreach (Update OtherUpdatesElement in OtherUpdates)
                    OtherUpdatesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
                State.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int NewMessagesLength = reader.ReadInt32();
                NewMessages = new List<Message>(NewMessagesLength);
                for (int NewMessagesIndex = 0; NewMessagesIndex < NewMessagesLength; NewMessagesIndex++)
                    NewMessages.Add(reader.Read<Message>());
                reader.ReadInt32(); // vector code
                int NewEncryptedMessagesLength = reader.ReadInt32();
                NewEncryptedMessages = new List<EncryptedMessage>(NewEncryptedMessagesLength);
                for (int NewEncryptedMessagesIndex = 0; NewEncryptedMessagesIndex < NewEncryptedMessagesLength; NewEncryptedMessagesIndex++)
                    NewEncryptedMessages.Add(reader.Read<EncryptedMessage>());
                reader.ReadInt32(); // vector code
                int OtherUpdatesLength = reader.ReadInt32();
                OtherUpdates = new List<Update>(OtherUpdatesLength);
                for (int OtherUpdatesIndex = 0; OtherUpdatesIndex < OtherUpdatesLength; OtherUpdatesIndex++)
                    OtherUpdates.Add(reader.Read<Update>());
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
                State = reader.Read<UpdatesState>();
            }

            public override string ToString()
            {
                return string.Format("(UpdatesDifferenceType NewMessages:{0} NewEncryptedMessages:{1} OtherUpdates:{2} Chats:{3} Users:{4} State:{5})", NewMessages, NewEncryptedMessages, OtherUpdates, Chats, Users, State);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "NewMessages": return NewMessages;
                        case "NewEncryptedMessages": return NewEncryptedMessages;
                        case "OtherUpdates": return OtherUpdates;
                        case "Chats": return Chats;
                        case "Users": return Users;
                        case "State": return State;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "NewMessages":
                    case "NewEncryptedMessages":
                    case "OtherUpdates":
                    case "Chats":
                    case "Users":
                    case "State": return true;
                    default: return false;
                }
            }
        }

        public class UpdatesDifferenceSliceType : UpdatesDifference
        {
            public override Types ConstructorCode => Types.UpdatesDifferenceSliceType;

            public List<Message> NewMessages;
            public List<EncryptedMessage> NewEncryptedMessages;
            public List<Update> OtherUpdates;
            public List<Chat> Chats;
            public List<User> Users;
            public UpdatesState IntermediateState;

            public UpdatesDifferenceSliceType() { }

            public UpdatesDifferenceSliceType(List<Message> NewMessages, List<EncryptedMessage> NewEncryptedMessages, List<Update> OtherUpdates, List<Chat> Chats, List<User> Users, UpdatesState IntermediateState)
            {
                this.NewMessages = NewMessages;
                this.NewEncryptedMessages = NewEncryptedMessages;
                this.OtherUpdates = OtherUpdates;
                this.Chats = Chats;
                this.Users = Users;
                this.IntermediateState = IntermediateState;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(NewMessages.Count);
                foreach (Message NewMessagesElement in NewMessages)
                    NewMessagesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(NewEncryptedMessages.Count);
                foreach (EncryptedMessage NewEncryptedMessagesElement in NewEncryptedMessages)
                    NewEncryptedMessagesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(OtherUpdates.Count);
                foreach (Update OtherUpdatesElement in OtherUpdates)
                    OtherUpdatesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
                IntermediateState.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int NewMessagesLength = reader.ReadInt32();
                NewMessages = new List<Message>(NewMessagesLength);
                for (int NewMessagesIndex = 0; NewMessagesIndex < NewMessagesLength; NewMessagesIndex++)
                    NewMessages.Add(reader.Read<Message>());
                reader.ReadInt32(); // vector code
                int NewEncryptedMessagesLength = reader.ReadInt32();
                NewEncryptedMessages = new List<EncryptedMessage>(NewEncryptedMessagesLength);
                for (int NewEncryptedMessagesIndex = 0; NewEncryptedMessagesIndex < NewEncryptedMessagesLength; NewEncryptedMessagesIndex++)
                    NewEncryptedMessages.Add(reader.Read<EncryptedMessage>());
                reader.ReadInt32(); // vector code
                int OtherUpdatesLength = reader.ReadInt32();
                OtherUpdates = new List<Update>(OtherUpdatesLength);
                for (int OtherUpdatesIndex = 0; OtherUpdatesIndex < OtherUpdatesLength; OtherUpdatesIndex++)
                    OtherUpdates.Add(reader.Read<Update>());
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
                IntermediateState = reader.Read<UpdatesState>();
            }

            public override string ToString()
            {
                return string.Format("(UpdatesDifferenceSliceType NewMessages:{0} NewEncryptedMessages:{1} OtherUpdates:{2} Chats:{3} Users:{4} IntermediateState:{5})", NewMessages, NewEncryptedMessages, OtherUpdates, Chats, Users, IntermediateState);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "NewMessages": return NewMessages;
                        case "NewEncryptedMessages": return NewEncryptedMessages;
                        case "OtherUpdates": return OtherUpdates;
                        case "Chats": return Chats;
                        case "Users": return Users;
                        case "IntermediateState": return IntermediateState;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "NewMessages":
                    case "NewEncryptedMessages":
                    case "OtherUpdates":
                    case "Chats":
                    case "Users":
                    case "IntermediateState": return true;
                    default: return false;
                }
            }
        }

        public class UpdatesTooLongType : Updates
        {
            public override Types ConstructorCode => Types.UpdatesTooLongType;

            public UpdatesTooLongType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(UpdatesTooLongType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class UpdateShortMessageType : Updates
        {
            public override Types ConstructorCode => Types.UpdateShortMessageType;

            public True Out;
            public True Mentioned;
            public True MediaUnread;
            public True Silent;
            public int Id;
            public int UserId;
            public string Message;
            public int Pts;
            public int PtsCount;
            public int Date;
            public MessageFwdHeader FwdFrom;
            public int? ViaBotId;
            public int? ReplyToMsgId;
            public List<MessageEntity> Entities;

            public UpdateShortMessageType() { }

            /// <summary>
            /// The following arguments can be null: Out, Mentioned, MediaUnread, Silent, FwdFrom, ViaBotId, ReplyToMsgId, Entities
            /// </summary>
            /// <param name="Out">Can be null</param>
            /// <param name="Mentioned">Can be null</param>
            /// <param name="MediaUnread">Can be null</param>
            /// <param name="Silent">Can be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="UserId">Can NOT be null</param>
            /// <param name="Message">Can NOT be null</param>
            /// <param name="Pts">Can NOT be null</param>
            /// <param name="PtsCount">Can NOT be null</param>
            /// <param name="Date">Can NOT be null</param>
            /// <param name="FwdFrom">Can be null</param>
            /// <param name="ViaBotId">Can be null</param>
            /// <param name="ReplyToMsgId">Can be null</param>
            /// <param name="Entities">Can be null</param>
            public UpdateShortMessageType(True Out, True Mentioned, True MediaUnread, True Silent, int Id, int UserId, string Message, int Pts, int PtsCount, int Date, MessageFwdHeader FwdFrom, int? ViaBotId, int? ReplyToMsgId, List<MessageEntity> Entities)
            {
                this.Out = Out;
                this.Mentioned = Mentioned;
                this.MediaUnread = MediaUnread;
                this.Silent = Silent;
                this.Id = Id;
                this.UserId = UserId;
                this.Message = Message;
                this.Pts = Pts;
                this.PtsCount = PtsCount;
                this.Date = Date;
                this.FwdFrom = FwdFrom;
                this.ViaBotId = ViaBotId;
                this.ReplyToMsgId = ReplyToMsgId;
                this.Entities = Entities;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Out != null ? 1 << 1 : 0) |
                    (Mentioned != null ? 1 << 4 : 0) |
                    (MediaUnread != null ? 1 << 5 : 0) |
                    (Silent != null ? 1 << 13 : 0) |
                    (FwdFrom != null ? 1 << 2 : 0) |
                    (ViaBotId != null ? 1 << 11 : 0) |
                    (ReplyToMsgId != null ? 1 << 3 : 0) |
                    (Entities != null ? 1 << 7 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Out != null)
                {

                }

                if (Mentioned != null)
                {

                }

                if (MediaUnread != null)
                {

                }

                if (Silent != null)
                {

                }

                writer.Write(Id);
                writer.Write(UserId);
                writer.Write(Message);
                writer.Write(Pts);
                writer.Write(PtsCount);
                writer.Write(Date);
                if (FwdFrom != null)
                {
                    FwdFrom.Write(writer);
                }

                if (ViaBotId != null)
                {
                    writer.Write(ViaBotId.Value);
                }

                if (ReplyToMsgId != null)
                {
                    writer.Write(ReplyToMsgId.Value);
                }

                if (Entities != null)
                {
                    writer.Write(0x1cb5c415); // vector code
                    writer.Write(Entities.Count);
                    foreach (MessageEntity EntitiesElement in Entities)
                        EntitiesElement.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 1)) != 0)
                {
                    Out = reader.ReadTrue();
                }

                if ((flags & (1 << 4)) != 0)
                {
                    Mentioned = reader.ReadTrue();
                }

                if ((flags & (1 << 5)) != 0)
                {
                    MediaUnread = reader.ReadTrue();
                }

                if ((flags & (1 << 13)) != 0)
                {
                    Silent = reader.ReadTrue();
                }

                Id = reader.ReadInt32();
                UserId = reader.ReadInt32();
                Message = reader.ReadString();
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
                Date = reader.ReadInt32();
                if ((flags & (1 << 2)) != 0)
                {
                    FwdFrom = reader.Read<MessageFwdHeader>();
                }

                if ((flags & (1 << 11)) != 0)
                {
                    ViaBotId = reader.ReadInt32();
                }

                if ((flags & (1 << 3)) != 0)
                {
                    ReplyToMsgId = reader.ReadInt32();
                }

                if ((flags & (1 << 7)) != 0)
                {
                    reader.ReadInt32(); // vector code
                    int EntitiesLength = reader.ReadInt32();
                    Entities = new List<MessageEntity>(EntitiesLength);
                    for (int EntitiesIndex = 0; EntitiesIndex < EntitiesLength; EntitiesIndex++)
                        Entities.Add(reader.Read<MessageEntity>());
                }

            }

            public override string ToString()
            {
                return string.Format("(UpdateShortMessageType Out:{0} Mentioned:{1} MediaUnread:{2} Silent:{3} Id:{4} UserId:{5} Message:{6} Pts:{7} PtsCount:{8} Date:{9} FwdFrom:{10} ViaBotId:{11} ReplyToMsgId:{12} Entities:{13})", Out, Mentioned, MediaUnread, Silent, Id, UserId, Message, Pts, PtsCount, Date, FwdFrom, ViaBotId, ReplyToMsgId, Entities);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Out": return Out;
                        case "Mentioned": return Mentioned;
                        case "MediaUnread": return MediaUnread;
                        case "Silent": return Silent;
                        case "Id": return Id;
                        case "UserId": return UserId;
                        case "Message": return Message;
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        case "Date": return Date;
                        case "FwdFrom": return FwdFrom;
                        case "ViaBotId": return ViaBotId;
                        case "ReplyToMsgId": return ReplyToMsgId;
                        case "Entities": return Entities;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Out":
                    case "Mentioned":
                    case "MediaUnread":
                    case "Silent":
                    case "Id":
                    case "UserId":
                    case "Message":
                    case "Pts":
                    case "PtsCount":
                    case "Date":
                    case "FwdFrom":
                    case "ViaBotId":
                    case "ReplyToMsgId":
                    case "Entities": return true;
                    default: return false;
                }
            }
        }

        public class UpdateShortChatMessageType : Updates
        {
            public override Types ConstructorCode => Types.UpdateShortChatMessageType;

            public True Out;
            public True Mentioned;
            public True MediaUnread;
            public True Silent;
            public int Id;
            public int FromId;
            public int ChatId;
            public string Message;
            public int Pts;
            public int PtsCount;
            public int Date;
            public MessageFwdHeader FwdFrom;
            public int? ViaBotId;
            public int? ReplyToMsgId;
            public List<MessageEntity> Entities;

            public UpdateShortChatMessageType() { }

            /// <summary>
            /// The following arguments can be null: Out, Mentioned, MediaUnread, Silent, FwdFrom, ViaBotId, ReplyToMsgId, Entities
            /// </summary>
            /// <param name="Out">Can be null</param>
            /// <param name="Mentioned">Can be null</param>
            /// <param name="MediaUnread">Can be null</param>
            /// <param name="Silent">Can be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="FromId">Can NOT be null</param>
            /// <param name="ChatId">Can NOT be null</param>
            /// <param name="Message">Can NOT be null</param>
            /// <param name="Pts">Can NOT be null</param>
            /// <param name="PtsCount">Can NOT be null</param>
            /// <param name="Date">Can NOT be null</param>
            /// <param name="FwdFrom">Can be null</param>
            /// <param name="ViaBotId">Can be null</param>
            /// <param name="ReplyToMsgId">Can be null</param>
            /// <param name="Entities">Can be null</param>
            public UpdateShortChatMessageType(True Out, True Mentioned, True MediaUnread, True Silent, int Id, int FromId, int ChatId, string Message, int Pts, int PtsCount, int Date, MessageFwdHeader FwdFrom, int? ViaBotId, int? ReplyToMsgId, List<MessageEntity> Entities)
            {
                this.Out = Out;
                this.Mentioned = Mentioned;
                this.MediaUnread = MediaUnread;
                this.Silent = Silent;
                this.Id = Id;
                this.FromId = FromId;
                this.ChatId = ChatId;
                this.Message = Message;
                this.Pts = Pts;
                this.PtsCount = PtsCount;
                this.Date = Date;
                this.FwdFrom = FwdFrom;
                this.ViaBotId = ViaBotId;
                this.ReplyToMsgId = ReplyToMsgId;
                this.Entities = Entities;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Out != null ? 1 << 1 : 0) |
                    (Mentioned != null ? 1 << 4 : 0) |
                    (MediaUnread != null ? 1 << 5 : 0) |
                    (Silent != null ? 1 << 13 : 0) |
                    (FwdFrom != null ? 1 << 2 : 0) |
                    (ViaBotId != null ? 1 << 11 : 0) |
                    (ReplyToMsgId != null ? 1 << 3 : 0) |
                    (Entities != null ? 1 << 7 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Out != null)
                {

                }

                if (Mentioned != null)
                {

                }

                if (MediaUnread != null)
                {

                }

                if (Silent != null)
                {

                }

                writer.Write(Id);
                writer.Write(FromId);
                writer.Write(ChatId);
                writer.Write(Message);
                writer.Write(Pts);
                writer.Write(PtsCount);
                writer.Write(Date);
                if (FwdFrom != null)
                {
                    FwdFrom.Write(writer);
                }

                if (ViaBotId != null)
                {
                    writer.Write(ViaBotId.Value);
                }

                if (ReplyToMsgId != null)
                {
                    writer.Write(ReplyToMsgId.Value);
                }

                if (Entities != null)
                {
                    writer.Write(0x1cb5c415); // vector code
                    writer.Write(Entities.Count);
                    foreach (MessageEntity EntitiesElement in Entities)
                        EntitiesElement.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 1)) != 0)
                {
                    Out = reader.ReadTrue();
                }

                if ((flags & (1 << 4)) != 0)
                {
                    Mentioned = reader.ReadTrue();
                }

                if ((flags & (1 << 5)) != 0)
                {
                    MediaUnread = reader.ReadTrue();
                }

                if ((flags & (1 << 13)) != 0)
                {
                    Silent = reader.ReadTrue();
                }

                Id = reader.ReadInt32();
                FromId = reader.ReadInt32();
                ChatId = reader.ReadInt32();
                Message = reader.ReadString();
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
                Date = reader.ReadInt32();
                if ((flags & (1 << 2)) != 0)
                {
                    FwdFrom = reader.Read<MessageFwdHeader>();
                }

                if ((flags & (1 << 11)) != 0)
                {
                    ViaBotId = reader.ReadInt32();
                }

                if ((flags & (1 << 3)) != 0)
                {
                    ReplyToMsgId = reader.ReadInt32();
                }

                if ((flags & (1 << 7)) != 0)
                {
                    reader.ReadInt32(); // vector code
                    int EntitiesLength = reader.ReadInt32();
                    Entities = new List<MessageEntity>(EntitiesLength);
                    for (int EntitiesIndex = 0; EntitiesIndex < EntitiesLength; EntitiesIndex++)
                        Entities.Add(reader.Read<MessageEntity>());
                }

            }

            public override string ToString()
            {
                return string.Format("(UpdateShortChatMessageType Out:{0} Mentioned:{1} MediaUnread:{2} Silent:{3} Id:{4} FromId:{5} ChatId:{6} Message:{7} Pts:{8} PtsCount:{9} Date:{10} FwdFrom:{11} ViaBotId:{12} ReplyToMsgId:{13} Entities:{14})", Out, Mentioned, MediaUnread, Silent, Id, FromId, ChatId, Message, Pts, PtsCount, Date, FwdFrom, ViaBotId, ReplyToMsgId, Entities);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Out": return Out;
                        case "Mentioned": return Mentioned;
                        case "MediaUnread": return MediaUnread;
                        case "Silent": return Silent;
                        case "Id": return Id;
                        case "FromId": return FromId;
                        case "ChatId": return ChatId;
                        case "Message": return Message;
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        case "Date": return Date;
                        case "FwdFrom": return FwdFrom;
                        case "ViaBotId": return ViaBotId;
                        case "ReplyToMsgId": return ReplyToMsgId;
                        case "Entities": return Entities;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Out":
                    case "Mentioned":
                    case "MediaUnread":
                    case "Silent":
                    case "Id":
                    case "FromId":
                    case "ChatId":
                    case "Message":
                    case "Pts":
                    case "PtsCount":
                    case "Date":
                    case "FwdFrom":
                    case "ViaBotId":
                    case "ReplyToMsgId":
                    case "Entities": return true;
                    default: return false;
                }
            }
        }

        public class UpdateShortType : Updates
        {
            public override Types ConstructorCode => Types.UpdateShortType;

            public Update Update;
            public int Date;

            public UpdateShortType() { }

            public UpdateShortType(Update Update, int Date)
            {
                this.Update = Update;
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Update.Write(writer);
                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                Update = reader.Read<Update>();
                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdateShortType Update:{0} Date:{1})", Update, Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Update": return Update;
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Update":
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        public class UpdatesCombinedType : Updates
        {
            public override Types ConstructorCode => Types.UpdatesCombinedType;

            public List<Update> Updates;
            public List<User> Users;
            public List<Chat> Chats;
            public int Date;
            public int SeqStart;
            public int Seq;

            public UpdatesCombinedType() { }

            public UpdatesCombinedType(List<Update> Updates, List<User> Users, List<Chat> Chats, int Date, int SeqStart, int Seq)
            {
                this.Updates = Updates;
                this.Users = Users;
                this.Chats = Chats;
                this.Date = Date;
                this.SeqStart = SeqStart;
                this.Seq = Seq;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Updates.Count);
                foreach (Update UpdatesElement in Updates)
                    UpdatesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(Date);
                writer.Write(SeqStart);
                writer.Write(Seq);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int UpdatesLength = reader.ReadInt32();
                Updates = new List<Update>(UpdatesLength);
                for (int UpdatesIndex = 0; UpdatesIndex < UpdatesLength; UpdatesIndex++)
                    Updates.Add(reader.Read<Update>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                Date = reader.ReadInt32();
                SeqStart = reader.ReadInt32();
                Seq = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdatesCombinedType Updates:{0} Users:{1} Chats:{2} Date:{3} SeqStart:{4} Seq:{5})", Updates, Users, Chats, Date, SeqStart, Seq);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Updates": return Updates;
                        case "Users": return Users;
                        case "Chats": return Chats;
                        case "Date": return Date;
                        case "SeqStart": return SeqStart;
                        case "Seq": return Seq;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Updates":
                    case "Users":
                    case "Chats":
                    case "Date":
                    case "SeqStart":
                    case "Seq": return true;
                    default: return false;
                }
            }
        }

        public class UpdatesType : Updates
        {
            public override Types ConstructorCode => Types.UpdatesType;

            public List<Update> Updates;
            public List<User> Users;
            public List<Chat> Chats;
            public int Date;
            public int Seq;

            public UpdatesType() { }

            public UpdatesType(List<Update> Updates, List<User> Users, List<Chat> Chats, int Date, int Seq)
            {
                this.Updates = Updates;
                this.Users = Users;
                this.Chats = Chats;
                this.Date = Date;
                this.Seq = Seq;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Updates.Count);
                foreach (Update UpdatesElement in Updates)
                    UpdatesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(Date);
                writer.Write(Seq);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int UpdatesLength = reader.ReadInt32();
                Updates = new List<Update>(UpdatesLength);
                for (int UpdatesIndex = 0; UpdatesIndex < UpdatesLength; UpdatesIndex++)
                    Updates.Add(reader.Read<Update>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                Date = reader.ReadInt32();
                Seq = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(UpdatesType Updates:{0} Users:{1} Chats:{2} Date:{3} Seq:{4})", Updates, Users, Chats, Date, Seq);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Updates": return Updates;
                        case "Users": return Users;
                        case "Chats": return Chats;
                        case "Date": return Date;
                        case "Seq": return Seq;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Updates":
                    case "Users":
                    case "Chats":
                    case "Date":
                    case "Seq": return true;
                    default: return false;
                }
            }
        }

        public class UpdateShortSentMessageType : Updates
        {
            public override Types ConstructorCode => Types.UpdateShortSentMessageType;

            public True Out;
            public int Id;
            public int Pts;
            public int PtsCount;
            public int Date;
            public MessageMedia Media;
            public List<MessageEntity> Entities;

            public UpdateShortSentMessageType() { }

            /// <summary>
            /// The following arguments can be null: Out, Media, Entities
            /// </summary>
            /// <param name="Out">Can be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="Pts">Can NOT be null</param>
            /// <param name="PtsCount">Can NOT be null</param>
            /// <param name="Date">Can NOT be null</param>
            /// <param name="Media">Can be null</param>
            /// <param name="Entities">Can be null</param>
            public UpdateShortSentMessageType(True Out, int Id, int Pts, int PtsCount, int Date, MessageMedia Media, List<MessageEntity> Entities)
            {
                this.Out = Out;
                this.Id = Id;
                this.Pts = Pts;
                this.PtsCount = PtsCount;
                this.Date = Date;
                this.Media = Media;
                this.Entities = Entities;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Out != null ? 1 << 1 : 0) |
                    (Media != null ? 1 << 9 : 0) |
                    (Entities != null ? 1 << 7 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Out != null)
                {

                }

                writer.Write(Id);
                writer.Write(Pts);
                writer.Write(PtsCount);
                writer.Write(Date);
                if (Media != null)
                {
                    Media.Write(writer);
                }

                if (Entities != null)
                {
                    writer.Write(0x1cb5c415); // vector code
                    writer.Write(Entities.Count);
                    foreach (MessageEntity EntitiesElement in Entities)
                        EntitiesElement.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 1)) != 0)
                {
                    Out = reader.ReadTrue();
                }

                Id = reader.ReadInt32();
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
                Date = reader.ReadInt32();
                if ((flags & (1 << 9)) != 0)
                {
                    Media = reader.Read<MessageMedia>();
                }

                if ((flags & (1 << 7)) != 0)
                {
                    reader.ReadInt32(); // vector code
                    int EntitiesLength = reader.ReadInt32();
                    Entities = new List<MessageEntity>(EntitiesLength);
                    for (int EntitiesIndex = 0; EntitiesIndex < EntitiesLength; EntitiesIndex++)
                        Entities.Add(reader.Read<MessageEntity>());
                }

            }

            public override string ToString()
            {
                return string.Format("(UpdateShortSentMessageType Out:{0} Id:{1} Pts:{2} PtsCount:{3} Date:{4} Media:{5} Entities:{6})", Out, Id, Pts, PtsCount, Date, Media, Entities);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Out": return Out;
                        case "Id": return Id;
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        case "Date": return Date;
                        case "Media": return Media;
                        case "Entities": return Entities;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Out":
                    case "Id":
                    case "Pts":
                    case "PtsCount":
                    case "Date":
                    case "Media":
                    case "Entities": return true;
                    default: return false;
                }
            }
        }

        public class PhotosPhotosType : PhotosPhotos
        {
            public override Types ConstructorCode => Types.PhotosPhotosType;

            public List<Photo> Photos;
            public List<User> Users;

            public PhotosPhotosType() { }

            public PhotosPhotosType(List<Photo> Photos, List<User> Users)
            {
                this.Photos = Photos;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Photos.Count);
                foreach (Photo PhotosElement in Photos)
                    PhotosElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int PhotosLength = reader.ReadInt32();
                Photos = new List<Photo>(PhotosLength);
                for (int PhotosIndex = 0; PhotosIndex < PhotosLength; PhotosIndex++)
                    Photos.Add(reader.Read<Photo>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(PhotosPhotosType Photos:{0} Users:{1})", Photos, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Photos": return Photos;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Photos":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class PhotosPhotosSliceType : PhotosPhotos
        {
            public override Types ConstructorCode => Types.PhotosPhotosSliceType;

            public int Count;
            public List<Photo> Photos;
            public List<User> Users;

            public PhotosPhotosSliceType() { }

            public PhotosPhotosSliceType(int Count, List<Photo> Photos, List<User> Users)
            {
                this.Count = Count;
                this.Photos = Photos;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Count);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Photos.Count);
                foreach (Photo PhotosElement in Photos)
                    PhotosElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Count = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int PhotosLength = reader.ReadInt32();
                Photos = new List<Photo>(PhotosLength);
                for (int PhotosIndex = 0; PhotosIndex < PhotosLength; PhotosIndex++)
                    Photos.Add(reader.Read<Photo>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(PhotosPhotosSliceType Count:{0} Photos:{1} Users:{2})", Count, Photos, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Count": return Count;
                        case "Photos": return Photos;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Count":
                    case "Photos":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class PhotosPhotoType : PhotosPhoto
        {
            public override Types ConstructorCode => Types.PhotosPhotoType;

            public Photo Photo;
            public List<User> Users;

            public PhotosPhotoType() { }

            public PhotosPhotoType(Photo Photo, List<User> Users)
            {
                this.Photo = Photo;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Photo.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Photo = reader.Read<Photo>();
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(PhotosPhotoType Photo:{0} Users:{1})", Photo, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Photo": return Photo;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Photo":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class UploadFileType : UploadFile
        {
            public override Types ConstructorCode => Types.UploadFileType;

            public StorageFileType Type;
            public int Mtime;
            public byte[] Bytes;

            public UploadFileType() { }

            public UploadFileType(StorageFileType Type, int Mtime, byte[] Bytes)
            {
                this.Type = Type;
                this.Mtime = Mtime;
                this.Bytes = Bytes;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Type.Write(writer);
                writer.Write(Mtime);
                writer.Write(Bytes);
            }

            public override void Read(TBinaryReader reader)
            {
                Type = reader.Read<StorageFileType>();
                Mtime = reader.ReadInt32();
                Bytes = reader.ReadBytes();
            }

            public override string ToString()
            {
                return string.Format("(UploadFileType Type:{0} Mtime:{1} Bytes:{2})", Type, Mtime, Bytes);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Type": return Type;
                        case "Mtime": return Mtime;
                        case "Bytes": return Bytes;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Type":
                    case "Mtime":
                    case "Bytes": return true;
                    default: return false;
                }
            }
        }

        public class DcOptionType : DcOption
        {
            public override Types ConstructorCode => Types.DcOptionType;

            public True Ipv6;
            public True MediaOnly;
            public True TcpoOnly;
            public int Id;
            public string IpAddress;
            public int Port;

            public DcOptionType() { }

            /// <summary>
            /// The following arguments can be null: Ipv6, MediaOnly, TcpoOnly
            /// </summary>
            /// <param name="Ipv6">Can be null</param>
            /// <param name="MediaOnly">Can be null</param>
            /// <param name="TcpoOnly">Can be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="IpAddress">Can NOT be null</param>
            /// <param name="Port">Can NOT be null</param>
            public DcOptionType(True Ipv6, True MediaOnly, True TcpoOnly, int Id, string IpAddress, int Port)
            {
                this.Ipv6 = Ipv6;
                this.MediaOnly = MediaOnly;
                this.TcpoOnly = TcpoOnly;
                this.Id = Id;
                this.IpAddress = IpAddress;
                this.Port = Port;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Ipv6 != null ? 1 << 0 : 0) |
                    (MediaOnly != null ? 1 << 1 : 0) |
                    (TcpoOnly != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Ipv6 != null)
                {

                }

                if (MediaOnly != null)
                {

                }

                if (TcpoOnly != null)
                {

                }

                writer.Write(Id);
                writer.Write(IpAddress);
                writer.Write(Port);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    Ipv6 = reader.ReadTrue();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    MediaOnly = reader.ReadTrue();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    TcpoOnly = reader.ReadTrue();
                }

                Id = reader.ReadInt32();
                IpAddress = reader.ReadString();
                Port = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(DcOptionType Ipv6:{0} MediaOnly:{1} TcpoOnly:{2} Id:{3} IpAddress:{4} Port:{5})", Ipv6, MediaOnly, TcpoOnly, Id, IpAddress, Port);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Ipv6": return Ipv6;
                        case "MediaOnly": return MediaOnly;
                        case "TcpoOnly": return TcpoOnly;
                        case "Id": return Id;
                        case "IpAddress": return IpAddress;
                        case "Port": return Port;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Ipv6":
                    case "MediaOnly":
                    case "TcpoOnly":
                    case "Id":
                    case "IpAddress":
                    case "Port": return true;
                    default: return false;
                }
            }
        }

        public class ConfigType : Config
        {
            public override Types ConstructorCode => Types.ConfigType;

            public int Date;
            public int Expires;
            public bool TestMode;
            public int ThisDc;
            public List<DcOption> DcOptions;
            public int ChatSizeMax;
            public int MegagroupSizeMax;
            public int ForwardedCountMax;
            public int OnlineUpdatePeriodMs;
            public int OfflineBlurTimeoutMs;
            public int OfflineIdleTimeoutMs;
            public int OnlineCloudTimeoutMs;
            public int NotifyCloudDelayMs;
            public int NotifyDefaultDelayMs;
            public int ChatBigSize;
            public int PushChatPeriodMs;
            public int PushChatLimit;
            public int SavedGifsLimit;
            public int EditTimeLimit;
            public int RatingEDecay;
            public List<DisabledFeature> DisabledFeatures;

            public ConfigType() { }

            public ConfigType(int Date, int Expires, bool TestMode, int ThisDc, List<DcOption> DcOptions, int ChatSizeMax, int MegagroupSizeMax, int ForwardedCountMax, int OnlineUpdatePeriodMs, int OfflineBlurTimeoutMs, int OfflineIdleTimeoutMs, int OnlineCloudTimeoutMs, int NotifyCloudDelayMs, int NotifyDefaultDelayMs, int ChatBigSize, int PushChatPeriodMs, int PushChatLimit, int SavedGifsLimit, int EditTimeLimit, int RatingEDecay, List<DisabledFeature> DisabledFeatures)
            {
                this.Date = Date;
                this.Expires = Expires;
                this.TestMode = TestMode;
                this.ThisDc = ThisDc;
                this.DcOptions = DcOptions;
                this.ChatSizeMax = ChatSizeMax;
                this.MegagroupSizeMax = MegagroupSizeMax;
                this.ForwardedCountMax = ForwardedCountMax;
                this.OnlineUpdatePeriodMs = OnlineUpdatePeriodMs;
                this.OfflineBlurTimeoutMs = OfflineBlurTimeoutMs;
                this.OfflineIdleTimeoutMs = OfflineIdleTimeoutMs;
                this.OnlineCloudTimeoutMs = OnlineCloudTimeoutMs;
                this.NotifyCloudDelayMs = NotifyCloudDelayMs;
                this.NotifyDefaultDelayMs = NotifyDefaultDelayMs;
                this.ChatBigSize = ChatBigSize;
                this.PushChatPeriodMs = PushChatPeriodMs;
                this.PushChatLimit = PushChatLimit;
                this.SavedGifsLimit = SavedGifsLimit;
                this.EditTimeLimit = EditTimeLimit;
                this.RatingEDecay = RatingEDecay;
                this.DisabledFeatures = DisabledFeatures;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Date);
                writer.Write(Expires);
                writer.Write(TestMode);
                writer.Write(ThisDc);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(DcOptions.Count);
                foreach (DcOption DcOptionsElement in DcOptions)
                    DcOptionsElement.Write(writer);
                writer.Write(ChatSizeMax);
                writer.Write(MegagroupSizeMax);
                writer.Write(ForwardedCountMax);
                writer.Write(OnlineUpdatePeriodMs);
                writer.Write(OfflineBlurTimeoutMs);
                writer.Write(OfflineIdleTimeoutMs);
                writer.Write(OnlineCloudTimeoutMs);
                writer.Write(NotifyCloudDelayMs);
                writer.Write(NotifyDefaultDelayMs);
                writer.Write(ChatBigSize);
                writer.Write(PushChatPeriodMs);
                writer.Write(PushChatLimit);
                writer.Write(SavedGifsLimit);
                writer.Write(EditTimeLimit);
                writer.Write(RatingEDecay);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(DisabledFeatures.Count);
                foreach (DisabledFeature DisabledFeaturesElement in DisabledFeatures)
                    DisabledFeaturesElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Date = reader.ReadInt32();
                Expires = reader.ReadInt32();
                TestMode = reader.ReadBoolean();
                ThisDc = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int DcOptionsLength = reader.ReadInt32();
                DcOptions = new List<DcOption>(DcOptionsLength);
                for (int DcOptionsIndex = 0; DcOptionsIndex < DcOptionsLength; DcOptionsIndex++)
                    DcOptions.Add(reader.Read<DcOption>());
                ChatSizeMax = reader.ReadInt32();
                MegagroupSizeMax = reader.ReadInt32();
                ForwardedCountMax = reader.ReadInt32();
                OnlineUpdatePeriodMs = reader.ReadInt32();
                OfflineBlurTimeoutMs = reader.ReadInt32();
                OfflineIdleTimeoutMs = reader.ReadInt32();
                OnlineCloudTimeoutMs = reader.ReadInt32();
                NotifyCloudDelayMs = reader.ReadInt32();
                NotifyDefaultDelayMs = reader.ReadInt32();
                ChatBigSize = reader.ReadInt32();
                PushChatPeriodMs = reader.ReadInt32();
                PushChatLimit = reader.ReadInt32();
                SavedGifsLimit = reader.ReadInt32();
                EditTimeLimit = reader.ReadInt32();
                RatingEDecay = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int DisabledFeaturesLength = reader.ReadInt32();
                DisabledFeatures = new List<DisabledFeature>(DisabledFeaturesLength);
                for (int DisabledFeaturesIndex = 0; DisabledFeaturesIndex < DisabledFeaturesLength; DisabledFeaturesIndex++)
                    DisabledFeatures.Add(reader.Read<DisabledFeature>());
            }

            public override string ToString()
            {
                return string.Format("(ConfigType Date:{0} Expires:{1} TestMode:{2} ThisDc:{3} DcOptions:{4} ChatSizeMax:{5} MegagroupSizeMax:{6} ForwardedCountMax:{7} OnlineUpdatePeriodMs:{8} OfflineBlurTimeoutMs:{9} OfflineIdleTimeoutMs:{10} OnlineCloudTimeoutMs:{11} NotifyCloudDelayMs:{12} NotifyDefaultDelayMs:{13} ChatBigSize:{14} PushChatPeriodMs:{15} PushChatLimit:{16} SavedGifsLimit:{17} EditTimeLimit:{18} RatingEDecay:{19} DisabledFeatures:{20})", Date, Expires, TestMode, ThisDc, DcOptions, ChatSizeMax, MegagroupSizeMax, ForwardedCountMax, OnlineUpdatePeriodMs, OfflineBlurTimeoutMs, OfflineIdleTimeoutMs, OnlineCloudTimeoutMs, NotifyCloudDelayMs, NotifyDefaultDelayMs, ChatBigSize, PushChatPeriodMs, PushChatLimit, SavedGifsLimit, EditTimeLimit, RatingEDecay, DisabledFeatures);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Date": return Date;
                        case "Expires": return Expires;
                        case "TestMode": return TestMode;
                        case "ThisDc": return ThisDc;
                        case "DcOptions": return DcOptions;
                        case "ChatSizeMax": return ChatSizeMax;
                        case "MegagroupSizeMax": return MegagroupSizeMax;
                        case "ForwardedCountMax": return ForwardedCountMax;
                        case "OnlineUpdatePeriodMs": return OnlineUpdatePeriodMs;
                        case "OfflineBlurTimeoutMs": return OfflineBlurTimeoutMs;
                        case "OfflineIdleTimeoutMs": return OfflineIdleTimeoutMs;
                        case "OnlineCloudTimeoutMs": return OnlineCloudTimeoutMs;
                        case "NotifyCloudDelayMs": return NotifyCloudDelayMs;
                        case "NotifyDefaultDelayMs": return NotifyDefaultDelayMs;
                        case "ChatBigSize": return ChatBigSize;
                        case "PushChatPeriodMs": return PushChatPeriodMs;
                        case "PushChatLimit": return PushChatLimit;
                        case "SavedGifsLimit": return SavedGifsLimit;
                        case "EditTimeLimit": return EditTimeLimit;
                        case "RatingEDecay": return RatingEDecay;
                        case "DisabledFeatures": return DisabledFeatures;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Date":
                    case "Expires":
                    case "TestMode":
                    case "ThisDc":
                    case "DcOptions":
                    case "ChatSizeMax":
                    case "MegagroupSizeMax":
                    case "ForwardedCountMax":
                    case "OnlineUpdatePeriodMs":
                    case "OfflineBlurTimeoutMs":
                    case "OfflineIdleTimeoutMs":
                    case "OnlineCloudTimeoutMs":
                    case "NotifyCloudDelayMs":
                    case "NotifyDefaultDelayMs":
                    case "ChatBigSize":
                    case "PushChatPeriodMs":
                    case "PushChatLimit":
                    case "SavedGifsLimit":
                    case "EditTimeLimit":
                    case "RatingEDecay":
                    case "DisabledFeatures": return true;
                    default: return false;
                }
            }
        }

        public class NearestDcType : NearestDc
        {
            public override Types ConstructorCode => Types.NearestDcType;

            public string Country;
            public int ThisDc;
            public int NearestDc;

            public NearestDcType() { }

            public NearestDcType(string Country, int ThisDc, int NearestDc)
            {
                this.Country = Country;
                this.ThisDc = ThisDc;
                this.NearestDc = NearestDc;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Country);
                writer.Write(ThisDc);
                writer.Write(NearestDc);
            }

            public override void Read(TBinaryReader reader)
            {
                Country = reader.ReadString();
                ThisDc = reader.ReadInt32();
                NearestDc = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(NearestDcType Country:{0} ThisDc:{1} NearestDc:{2})", Country, ThisDc, NearestDc);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Country": return Country;
                        case "ThisDc": return ThisDc;
                        case "NearestDc": return NearestDc;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Country":
                    case "ThisDc":
                    case "NearestDc": return true;
                    default: return false;
                }
            }
        }

        public class HelpAppUpdateType : HelpAppUpdate
        {
            public override Types ConstructorCode => Types.HelpAppUpdateType;

            public int Id;
            public bool Critical;
            public string Url;
            public string Text;

            public HelpAppUpdateType() { }

            public HelpAppUpdateType(int Id, bool Critical, string Url, string Text)
            {
                this.Id = Id;
                this.Critical = Critical;
                this.Url = Url;
                this.Text = Text;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(Critical);
                writer.Write(Url);
                writer.Write(Text);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
                Critical = reader.ReadBoolean();
                Url = reader.ReadString();
                Text = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(HelpAppUpdateType Id:{0} Critical:{1} Url:{2} Text:{3})", Id, Critical, Url, Text);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Critical": return Critical;
                        case "Url": return Url;
                        case "Text": return Text;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Critical":
                    case "Url":
                    case "Text": return true;
                    default: return false;
                }
            }
        }

        public class HelpNoAppUpdateType : HelpAppUpdate
        {
            public override Types ConstructorCode => Types.HelpNoAppUpdateType;

            public HelpNoAppUpdateType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(HelpNoAppUpdateType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class HelpInviteTextType : HelpInviteText
        {
            public override Types ConstructorCode => Types.HelpInviteTextType;

            public string Message;

            public HelpInviteTextType() { }

            public HelpInviteTextType(string Message)
            {
                this.Message = Message;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Message);
            }

            public override void Read(TBinaryReader reader)
            {
                Message = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(HelpInviteTextType Message:{0})", Message);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Message": return Message;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Message": return true;
                    default: return false;
                }
            }
        }

        public class EncryptedChatEmptyType : EncryptedChat
        {
            public override Types ConstructorCode => Types.EncryptedChatEmptyType;

            public int Id;

            public EncryptedChatEmptyType() { }

            public EncryptedChatEmptyType(int Id)
            {
                this.Id = Id;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(EncryptedChatEmptyType Id:{0})", Id);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id": return true;
                    default: return false;
                }
            }
        }

        public class EncryptedChatWaitingType : EncryptedChat
        {
            public override Types ConstructorCode => Types.EncryptedChatWaitingType;

            public int Id;
            public long AccessHash;
            public int Date;
            public int AdminId;
            public int ParticipantId;

            public EncryptedChatWaitingType() { }

            public EncryptedChatWaitingType(int Id, long AccessHash, int Date, int AdminId, int ParticipantId)
            {
                this.Id = Id;
                this.AccessHash = AccessHash;
                this.Date = Date;
                this.AdminId = AdminId;
                this.ParticipantId = ParticipantId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(AccessHash);
                writer.Write(Date);
                writer.Write(AdminId);
                writer.Write(ParticipantId);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
                AccessHash = reader.ReadInt64();
                Date = reader.ReadInt32();
                AdminId = reader.ReadInt32();
                ParticipantId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(EncryptedChatWaitingType Id:{0} AccessHash:{1} Date:{2} AdminId:{3} ParticipantId:{4})", Id, AccessHash, Date, AdminId, ParticipantId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        case "Date": return Date;
                        case "AdminId": return AdminId;
                        case "ParticipantId": return ParticipantId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "AccessHash":
                    case "Date":
                    case "AdminId":
                    case "ParticipantId": return true;
                    default: return false;
                }
            }
        }

        public class EncryptedChatRequestedType : EncryptedChat
        {
            public override Types ConstructorCode => Types.EncryptedChatRequestedType;

            public int Id;
            public long AccessHash;
            public int Date;
            public int AdminId;
            public int ParticipantId;
            public byte[] GA;

            public EncryptedChatRequestedType() { }

            public EncryptedChatRequestedType(int Id, long AccessHash, int Date, int AdminId, int ParticipantId, byte[] GA)
            {
                this.Id = Id;
                this.AccessHash = AccessHash;
                this.Date = Date;
                this.AdminId = AdminId;
                this.ParticipantId = ParticipantId;
                this.GA = GA;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(AccessHash);
                writer.Write(Date);
                writer.Write(AdminId);
                writer.Write(ParticipantId);
                writer.Write(GA);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
                AccessHash = reader.ReadInt64();
                Date = reader.ReadInt32();
                AdminId = reader.ReadInt32();
                ParticipantId = reader.ReadInt32();
                GA = reader.ReadBytes();
            }

            public override string ToString()
            {
                return string.Format("(EncryptedChatRequestedType Id:{0} AccessHash:{1} Date:{2} AdminId:{3} ParticipantId:{4} GA:{5})", Id, AccessHash, Date, AdminId, ParticipantId, GA);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        case "Date": return Date;
                        case "AdminId": return AdminId;
                        case "ParticipantId": return ParticipantId;
                        case "GA": return GA;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "AccessHash":
                    case "Date":
                    case "AdminId":
                    case "ParticipantId":
                    case "GA": return true;
                    default: return false;
                }
            }
        }

        public class EncryptedChatType : EncryptedChat
        {
            public override Types ConstructorCode => Types.EncryptedChatType;

            public int Id;
            public long AccessHash;
            public int Date;
            public int AdminId;
            public int ParticipantId;
            public byte[] GAOrB;
            public long KeyFingerprint;

            public EncryptedChatType() { }

            public EncryptedChatType(int Id, long AccessHash, int Date, int AdminId, int ParticipantId, byte[] GAOrB, long KeyFingerprint)
            {
                this.Id = Id;
                this.AccessHash = AccessHash;
                this.Date = Date;
                this.AdminId = AdminId;
                this.ParticipantId = ParticipantId;
                this.GAOrB = GAOrB;
                this.KeyFingerprint = KeyFingerprint;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(AccessHash);
                writer.Write(Date);
                writer.Write(AdminId);
                writer.Write(ParticipantId);
                writer.Write(GAOrB);
                writer.Write(KeyFingerprint);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
                AccessHash = reader.ReadInt64();
                Date = reader.ReadInt32();
                AdminId = reader.ReadInt32();
                ParticipantId = reader.ReadInt32();
                GAOrB = reader.ReadBytes();
                KeyFingerprint = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(EncryptedChatType Id:{0} AccessHash:{1} Date:{2} AdminId:{3} ParticipantId:{4} GAOrB:{5} KeyFingerprint:{6})", Id, AccessHash, Date, AdminId, ParticipantId, GAOrB, KeyFingerprint);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        case "Date": return Date;
                        case "AdminId": return AdminId;
                        case "ParticipantId": return ParticipantId;
                        case "GAOrB": return GAOrB;
                        case "KeyFingerprint": return KeyFingerprint;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "AccessHash":
                    case "Date":
                    case "AdminId":
                    case "ParticipantId":
                    case "GAOrB":
                    case "KeyFingerprint": return true;
                    default: return false;
                }
            }
        }

        public class EncryptedChatDiscardedType : EncryptedChat
        {
            public override Types ConstructorCode => Types.EncryptedChatDiscardedType;

            public int Id;

            public EncryptedChatDiscardedType() { }

            public EncryptedChatDiscardedType(int Id)
            {
                this.Id = Id;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(EncryptedChatDiscardedType Id:{0})", Id);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id": return true;
                    default: return false;
                }
            }
        }

        public class InputEncryptedChatType : InputEncryptedChat
        {
            public override Types ConstructorCode => Types.InputEncryptedChatType;

            public int ChatId;
            public long AccessHash;

            public InputEncryptedChatType() { }

            public InputEncryptedChatType(int ChatId, long AccessHash)
            {
                this.ChatId = ChatId;
                this.AccessHash = AccessHash;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChatId);
                writer.Write(AccessHash);
            }

            public override void Read(TBinaryReader reader)
            {
                ChatId = reader.ReadInt32();
                AccessHash = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(InputEncryptedChatType ChatId:{0} AccessHash:{1})", ChatId, AccessHash);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChatId": return ChatId;
                        case "AccessHash": return AccessHash;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChatId":
                    case "AccessHash": return true;
                    default: return false;
                }
            }
        }

        public class EncryptedFileEmptyType : EncryptedFile
        {
            public override Types ConstructorCode => Types.EncryptedFileEmptyType;

            public EncryptedFileEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(EncryptedFileEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class EncryptedFileType : EncryptedFile
        {
            public override Types ConstructorCode => Types.EncryptedFileType;

            public long Id;
            public long AccessHash;
            public int Size;
            public int DcId;
            public int KeyFingerprint;

            public EncryptedFileType() { }

            public EncryptedFileType(long Id, long AccessHash, int Size, int DcId, int KeyFingerprint)
            {
                this.Id = Id;
                this.AccessHash = AccessHash;
                this.Size = Size;
                this.DcId = DcId;
                this.KeyFingerprint = KeyFingerprint;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(AccessHash);
                writer.Write(Size);
                writer.Write(DcId);
                writer.Write(KeyFingerprint);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
                AccessHash = reader.ReadInt64();
                Size = reader.ReadInt32();
                DcId = reader.ReadInt32();
                KeyFingerprint = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(EncryptedFileType Id:{0} AccessHash:{1} Size:{2} DcId:{3} KeyFingerprint:{4})", Id, AccessHash, Size, DcId, KeyFingerprint);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        case "Size": return Size;
                        case "DcId": return DcId;
                        case "KeyFingerprint": return KeyFingerprint;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "AccessHash":
                    case "Size":
                    case "DcId":
                    case "KeyFingerprint": return true;
                    default: return false;
                }
            }
        }

        public class InputEncryptedFileEmptyType : InputEncryptedFile
        {
            public override Types ConstructorCode => Types.InputEncryptedFileEmptyType;

            public InputEncryptedFileEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputEncryptedFileEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputEncryptedFileUploadedType : InputEncryptedFile
        {
            public override Types ConstructorCode => Types.InputEncryptedFileUploadedType;

            public long Id;
            public int Parts;
            public string Md5Checksum;
            public int KeyFingerprint;

            public InputEncryptedFileUploadedType() { }

            public InputEncryptedFileUploadedType(long Id, int Parts, string Md5Checksum, int KeyFingerprint)
            {
                this.Id = Id;
                this.Parts = Parts;
                this.Md5Checksum = Md5Checksum;
                this.KeyFingerprint = KeyFingerprint;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(Parts);
                writer.Write(Md5Checksum);
                writer.Write(KeyFingerprint);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
                Parts = reader.ReadInt32();
                Md5Checksum = reader.ReadString();
                KeyFingerprint = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(InputEncryptedFileUploadedType Id:{0} Parts:{1} Md5Checksum:{2} KeyFingerprint:{3})", Id, Parts, Md5Checksum, KeyFingerprint);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Parts": return Parts;
                        case "Md5Checksum": return Md5Checksum;
                        case "KeyFingerprint": return KeyFingerprint;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Parts":
                    case "Md5Checksum":
                    case "KeyFingerprint": return true;
                    default: return false;
                }
            }
        }

        public class InputEncryptedFileType : InputEncryptedFile
        {
            public override Types ConstructorCode => Types.InputEncryptedFileType;

            public long Id;
            public long AccessHash;

            public InputEncryptedFileType() { }

            public InputEncryptedFileType(long Id, long AccessHash)
            {
                this.Id = Id;
                this.AccessHash = AccessHash;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(AccessHash);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
                AccessHash = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(InputEncryptedFileType Id:{0} AccessHash:{1})", Id, AccessHash);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "AccessHash": return true;
                    default: return false;
                }
            }
        }

        public class InputEncryptedFileBigUploadedType : InputEncryptedFile
        {
            public override Types ConstructorCode => Types.InputEncryptedFileBigUploadedType;

            public long Id;
            public int Parts;
            public int KeyFingerprint;

            public InputEncryptedFileBigUploadedType() { }

            public InputEncryptedFileBigUploadedType(long Id, int Parts, int KeyFingerprint)
            {
                this.Id = Id;
                this.Parts = Parts;
                this.KeyFingerprint = KeyFingerprint;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(Parts);
                writer.Write(KeyFingerprint);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
                Parts = reader.ReadInt32();
                KeyFingerprint = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(InputEncryptedFileBigUploadedType Id:{0} Parts:{1} KeyFingerprint:{2})", Id, Parts, KeyFingerprint);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Parts": return Parts;
                        case "KeyFingerprint": return KeyFingerprint;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Parts":
                    case "KeyFingerprint": return true;
                    default: return false;
                }
            }
        }

        public class EncryptedMessageType : EncryptedMessage
        {
            public override Types ConstructorCode => Types.EncryptedMessageType;

            public long RandomId;
            public int ChatId;
            public int Date;
            public byte[] Bytes;
            public EncryptedFile File;

            public EncryptedMessageType() { }

            public EncryptedMessageType(long RandomId, int ChatId, int Date, byte[] Bytes, EncryptedFile File)
            {
                this.RandomId = RandomId;
                this.ChatId = ChatId;
                this.Date = Date;
                this.Bytes = Bytes;
                this.File = File;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(RandomId);
                writer.Write(ChatId);
                writer.Write(Date);
                writer.Write(Bytes);
                File.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                RandomId = reader.ReadInt64();
                ChatId = reader.ReadInt32();
                Date = reader.ReadInt32();
                Bytes = reader.ReadBytes();
                File = reader.Read<EncryptedFile>();
            }

            public override string ToString()
            {
                return string.Format("(EncryptedMessageType RandomId:{0} ChatId:{1} Date:{2} Bytes:{3} File:{4})", RandomId, ChatId, Date, Bytes, File);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "RandomId": return RandomId;
                        case "ChatId": return ChatId;
                        case "Date": return Date;
                        case "Bytes": return Bytes;
                        case "File": return File;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "RandomId":
                    case "ChatId":
                    case "Date":
                    case "Bytes":
                    case "File": return true;
                    default: return false;
                }
            }
        }

        public class EncryptedMessageServiceType : EncryptedMessage
        {
            public override Types ConstructorCode => Types.EncryptedMessageServiceType;

            public long RandomId;
            public int ChatId;
            public int Date;
            public byte[] Bytes;

            public EncryptedMessageServiceType() { }

            public EncryptedMessageServiceType(long RandomId, int ChatId, int Date, byte[] Bytes)
            {
                this.RandomId = RandomId;
                this.ChatId = ChatId;
                this.Date = Date;
                this.Bytes = Bytes;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(RandomId);
                writer.Write(ChatId);
                writer.Write(Date);
                writer.Write(Bytes);
            }

            public override void Read(TBinaryReader reader)
            {
                RandomId = reader.ReadInt64();
                ChatId = reader.ReadInt32();
                Date = reader.ReadInt32();
                Bytes = reader.ReadBytes();
            }

            public override string ToString()
            {
                return string.Format("(EncryptedMessageServiceType RandomId:{0} ChatId:{1} Date:{2} Bytes:{3})", RandomId, ChatId, Date, Bytes);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "RandomId": return RandomId;
                        case "ChatId": return ChatId;
                        case "Date": return Date;
                        case "Bytes": return Bytes;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "RandomId":
                    case "ChatId":
                    case "Date":
                    case "Bytes": return true;
                    default: return false;
                }
            }
        }

        public class MessagesDhConfigNotModifiedType : MessagesDhConfig
        {
            public override Types ConstructorCode => Types.MessagesDhConfigNotModifiedType;

            public byte[] Random;

            public MessagesDhConfigNotModifiedType() { }

            public MessagesDhConfigNotModifiedType(byte[] Random)
            {
                this.Random = Random;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Random);
            }

            public override void Read(TBinaryReader reader)
            {
                Random = reader.ReadBytes();
            }

            public override string ToString()
            {
                return string.Format("(MessagesDhConfigNotModifiedType Random:{0})", Random);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Random": return Random;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Random": return true;
                    default: return false;
                }
            }
        }

        public class MessagesDhConfigType : MessagesDhConfig
        {
            public override Types ConstructorCode => Types.MessagesDhConfigType;

            public int G;
            public byte[] P;
            public int Version;
            public byte[] Random;

            public MessagesDhConfigType() { }

            public MessagesDhConfigType(int G, byte[] P, int Version, byte[] Random)
            {
                this.G = G;
                this.P = P;
                this.Version = Version;
                this.Random = Random;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(G);
                writer.Write(P);
                writer.Write(Version);
                writer.Write(Random);
            }

            public override void Read(TBinaryReader reader)
            {
                G = reader.ReadInt32();
                P = reader.ReadBytes();
                Version = reader.ReadInt32();
                Random = reader.ReadBytes();
            }

            public override string ToString()
            {
                return string.Format("(MessagesDhConfigType G:{0} P:{1} Version:{2} Random:{3})", G, P, Version, Random);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "G": return G;
                        case "P": return P;
                        case "Version": return Version;
                        case "Random": return Random;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "G":
                    case "P":
                    case "Version":
                    case "Random": return true;
                    default: return false;
                }
            }
        }

        public class MessagesSentEncryptedMessageType : MessagesSentEncryptedMessage
        {
            public override Types ConstructorCode => Types.MessagesSentEncryptedMessageType;

            public int Date;

            public MessagesSentEncryptedMessageType() { }

            public MessagesSentEncryptedMessageType(int Date)
            {
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessagesSentEncryptedMessageType Date:{0})", Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        public class MessagesSentEncryptedFileType : MessagesSentEncryptedMessage
        {
            public override Types ConstructorCode => Types.MessagesSentEncryptedFileType;

            public int Date;
            public EncryptedFile File;

            public MessagesSentEncryptedFileType() { }

            public MessagesSentEncryptedFileType(int Date, EncryptedFile File)
            {
                this.Date = Date;
                this.File = File;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Date);
                File.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Date = reader.ReadInt32();
                File = reader.Read<EncryptedFile>();
            }

            public override string ToString()
            {
                return string.Format("(MessagesSentEncryptedFileType Date:{0} File:{1})", Date, File);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Date": return Date;
                        case "File": return File;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Date":
                    case "File": return true;
                    default: return false;
                }
            }
        }

        public class InputDocumentEmptyType : InputDocument
        {
            public override Types ConstructorCode => Types.InputDocumentEmptyType;

            public InputDocumentEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputDocumentEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputDocumentType : InputDocument
        {
            public override Types ConstructorCode => Types.InputDocumentType;

            public long Id;
            public long AccessHash;

            public InputDocumentType() { }

            public InputDocumentType(long Id, long AccessHash)
            {
                this.Id = Id;
                this.AccessHash = AccessHash;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(AccessHash);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
                AccessHash = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(InputDocumentType Id:{0} AccessHash:{1})", Id, AccessHash);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "AccessHash": return true;
                    default: return false;
                }
            }
        }

        public class DocumentEmptyType : Document
        {
            public override Types ConstructorCode => Types.DocumentEmptyType;

            public long Id;

            public DocumentEmptyType() { }

            public DocumentEmptyType(long Id)
            {
                this.Id = Id;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(DocumentEmptyType Id:{0})", Id);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id": return true;
                    default: return false;
                }
            }
        }

        public class DocumentType : Document
        {
            public override Types ConstructorCode => Types.DocumentType;

            public long Id;
            public long AccessHash;
            public int Date;
            public string MimeType;
            public int Size;
            public PhotoSize Thumb;
            public int DcId;
            public List<DocumentAttribute> Attributes;

            public DocumentType() { }

            public DocumentType(long Id, long AccessHash, int Date, string MimeType, int Size, PhotoSize Thumb, int DcId, List<DocumentAttribute> Attributes)
            {
                this.Id = Id;
                this.AccessHash = AccessHash;
                this.Date = Date;
                this.MimeType = MimeType;
                this.Size = Size;
                this.Thumb = Thumb;
                this.DcId = DcId;
                this.Attributes = Attributes;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(AccessHash);
                writer.Write(Date);
                writer.Write(MimeType);
                writer.Write(Size);
                Thumb.Write(writer);
                writer.Write(DcId);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Attributes.Count);
                foreach (DocumentAttribute AttributesElement in Attributes)
                    AttributesElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
                AccessHash = reader.ReadInt64();
                Date = reader.ReadInt32();
                MimeType = reader.ReadString();
                Size = reader.ReadInt32();
                Thumb = reader.Read<PhotoSize>();
                DcId = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int AttributesLength = reader.ReadInt32();
                Attributes = new List<DocumentAttribute>(AttributesLength);
                for (int AttributesIndex = 0; AttributesIndex < AttributesLength; AttributesIndex++)
                    Attributes.Add(reader.Read<DocumentAttribute>());
            }

            public override string ToString()
            {
                return string.Format("(DocumentType Id:{0} AccessHash:{1} Date:{2} MimeType:{3} Size:{4} Thumb:{5} DcId:{6} Attributes:{7})", Id, AccessHash, Date, MimeType, Size, Thumb, DcId, Attributes);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        case "Date": return Date;
                        case "MimeType": return MimeType;
                        case "Size": return Size;
                        case "Thumb": return Thumb;
                        case "DcId": return DcId;
                        case "Attributes": return Attributes;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "AccessHash":
                    case "Date":
                    case "MimeType":
                    case "Size":
                    case "Thumb":
                    case "DcId":
                    case "Attributes": return true;
                    default: return false;
                }
            }
        }

        public class HelpSupportType : HelpSupport
        {
            public override Types ConstructorCode => Types.HelpSupportType;

            public string PhoneNumber;
            public User User;

            public HelpSupportType() { }

            public HelpSupportType(string PhoneNumber, User User)
            {
                this.PhoneNumber = PhoneNumber;
                this.User = User;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(PhoneNumber);
                User.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                PhoneNumber = reader.ReadString();
                User = reader.Read<User>();
            }

            public override string ToString()
            {
                return string.Format("(HelpSupportType PhoneNumber:{0} User:{1})", PhoneNumber, User);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "PhoneNumber": return PhoneNumber;
                        case "User": return User;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "PhoneNumber":
                    case "User": return true;
                    default: return false;
                }
            }
        }

        public class NotifyPeerType : NotifyPeer
        {
            public override Types ConstructorCode => Types.NotifyPeerType;

            public Peer Peer;

            public NotifyPeerType() { }

            public NotifyPeerType(Peer Peer)
            {
                this.Peer = Peer;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Peer = reader.Read<Peer>();
            }

            public override string ToString()
            {
                return string.Format("(NotifyPeerType Peer:{0})", Peer);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Peer": return Peer;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Peer": return true;
                    default: return false;
                }
            }
        }

        public class NotifyUsersType : NotifyPeer
        {
            public override Types ConstructorCode => Types.NotifyUsersType;

            public NotifyUsersType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(NotifyUsersType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class NotifyChatsType : NotifyPeer
        {
            public override Types ConstructorCode => Types.NotifyChatsType;

            public NotifyChatsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(NotifyChatsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class NotifyAllType : NotifyPeer
        {
            public override Types ConstructorCode => Types.NotifyAllType;

            public NotifyAllType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(NotifyAllType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class SendMessageTypingActionType : SendMessageAction
        {
            public override Types ConstructorCode => Types.SendMessageTypingActionType;

            public SendMessageTypingActionType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(SendMessageTypingActionType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class SendMessageCancelActionType : SendMessageAction
        {
            public override Types ConstructorCode => Types.SendMessageCancelActionType;

            public SendMessageCancelActionType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(SendMessageCancelActionType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class SendMessageRecordVideoActionType : SendMessageAction
        {
            public override Types ConstructorCode => Types.SendMessageRecordVideoActionType;

            public SendMessageRecordVideoActionType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(SendMessageRecordVideoActionType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class SendMessageUploadVideoActionType : SendMessageAction
        {
            public override Types ConstructorCode => Types.SendMessageUploadVideoActionType;

            public int Progress;

            public SendMessageUploadVideoActionType() { }

            public SendMessageUploadVideoActionType(int Progress)
            {
                this.Progress = Progress;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Progress);
            }

            public override void Read(TBinaryReader reader)
            {
                Progress = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(SendMessageUploadVideoActionType Progress:{0})", Progress);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Progress": return Progress;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Progress": return true;
                    default: return false;
                }
            }
        }

        public class SendMessageRecordAudioActionType : SendMessageAction
        {
            public override Types ConstructorCode => Types.SendMessageRecordAudioActionType;

            public SendMessageRecordAudioActionType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(SendMessageRecordAudioActionType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class SendMessageUploadAudioActionType : SendMessageAction
        {
            public override Types ConstructorCode => Types.SendMessageUploadAudioActionType;

            public int Progress;

            public SendMessageUploadAudioActionType() { }

            public SendMessageUploadAudioActionType(int Progress)
            {
                this.Progress = Progress;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Progress);
            }

            public override void Read(TBinaryReader reader)
            {
                Progress = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(SendMessageUploadAudioActionType Progress:{0})", Progress);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Progress": return Progress;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Progress": return true;
                    default: return false;
                }
            }
        }

        public class SendMessageUploadPhotoActionType : SendMessageAction
        {
            public override Types ConstructorCode => Types.SendMessageUploadPhotoActionType;

            public int Progress;

            public SendMessageUploadPhotoActionType() { }

            public SendMessageUploadPhotoActionType(int Progress)
            {
                this.Progress = Progress;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Progress);
            }

            public override void Read(TBinaryReader reader)
            {
                Progress = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(SendMessageUploadPhotoActionType Progress:{0})", Progress);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Progress": return Progress;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Progress": return true;
                    default: return false;
                }
            }
        }

        public class SendMessageUploadDocumentActionType : SendMessageAction
        {
            public override Types ConstructorCode => Types.SendMessageUploadDocumentActionType;

            public int Progress;

            public SendMessageUploadDocumentActionType() { }

            public SendMessageUploadDocumentActionType(int Progress)
            {
                this.Progress = Progress;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Progress);
            }

            public override void Read(TBinaryReader reader)
            {
                Progress = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(SendMessageUploadDocumentActionType Progress:{0})", Progress);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Progress": return Progress;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Progress": return true;
                    default: return false;
                }
            }
        }

        public class SendMessageGeoLocationActionType : SendMessageAction
        {
            public override Types ConstructorCode => Types.SendMessageGeoLocationActionType;

            public SendMessageGeoLocationActionType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(SendMessageGeoLocationActionType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class SendMessageChooseContactActionType : SendMessageAction
        {
            public override Types ConstructorCode => Types.SendMessageChooseContactActionType;

            public SendMessageChooseContactActionType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(SendMessageChooseContactActionType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ContactsFoundType : ContactsFound
        {
            public override Types ConstructorCode => Types.ContactsFoundType;

            public List<Peer> Results;
            public List<Chat> Chats;
            public List<User> Users;

            public ContactsFoundType() { }

            public ContactsFoundType(List<Peer> Results, List<Chat> Chats, List<User> Users)
            {
                this.Results = Results;
                this.Chats = Chats;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Results.Count);
                foreach (Peer ResultsElement in Results)
                    ResultsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int ResultsLength = reader.ReadInt32();
                Results = new List<Peer>(ResultsLength);
                for (int ResultsIndex = 0; ResultsIndex < ResultsLength; ResultsIndex++)
                    Results.Add(reader.Read<Peer>());
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(ContactsFoundType Results:{0} Chats:{1} Users:{2})", Results, Chats, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Results": return Results;
                        case "Chats": return Chats;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Results":
                    case "Chats":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class InputPrivacyKeyStatusTimestampType : InputPrivacyKey
        {
            public override Types ConstructorCode => Types.InputPrivacyKeyStatusTimestampType;

            public InputPrivacyKeyStatusTimestampType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputPrivacyKeyStatusTimestampType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputPrivacyKeyChatInviteType : InputPrivacyKey
        {
            public override Types ConstructorCode => Types.InputPrivacyKeyChatInviteType;

            public InputPrivacyKeyChatInviteType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputPrivacyKeyChatInviteType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class PrivacyKeyStatusTimestampType : PrivacyKey
        {
            public override Types ConstructorCode => Types.PrivacyKeyStatusTimestampType;

            public PrivacyKeyStatusTimestampType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(PrivacyKeyStatusTimestampType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class PrivacyKeyChatInviteType : PrivacyKey
        {
            public override Types ConstructorCode => Types.PrivacyKeyChatInviteType;

            public PrivacyKeyChatInviteType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(PrivacyKeyChatInviteType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputPrivacyValueAllowContactsType : InputPrivacyRule
        {
            public override Types ConstructorCode => Types.InputPrivacyValueAllowContactsType;

            public InputPrivacyValueAllowContactsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputPrivacyValueAllowContactsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputPrivacyValueAllowAllType : InputPrivacyRule
        {
            public override Types ConstructorCode => Types.InputPrivacyValueAllowAllType;

            public InputPrivacyValueAllowAllType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputPrivacyValueAllowAllType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputPrivacyValueAllowUsersType : InputPrivacyRule
        {
            public override Types ConstructorCode => Types.InputPrivacyValueAllowUsersType;

            public List<InputUser> Users;

            public InputPrivacyValueAllowUsersType() { }

            public InputPrivacyValueAllowUsersType(List<InputUser> Users)
            {
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (InputUser UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<InputUser>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<InputUser>());
            }

            public override string ToString()
            {
                return string.Format("(InputPrivacyValueAllowUsersType Users:{0})", Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class InputPrivacyValueDisallowContactsType : InputPrivacyRule
        {
            public override Types ConstructorCode => Types.InputPrivacyValueDisallowContactsType;

            public InputPrivacyValueDisallowContactsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputPrivacyValueDisallowContactsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputPrivacyValueDisallowAllType : InputPrivacyRule
        {
            public override Types ConstructorCode => Types.InputPrivacyValueDisallowAllType;

            public InputPrivacyValueDisallowAllType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputPrivacyValueDisallowAllType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputPrivacyValueDisallowUsersType : InputPrivacyRule
        {
            public override Types ConstructorCode => Types.InputPrivacyValueDisallowUsersType;

            public List<InputUser> Users;

            public InputPrivacyValueDisallowUsersType() { }

            public InputPrivacyValueDisallowUsersType(List<InputUser> Users)
            {
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (InputUser UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<InputUser>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<InputUser>());
            }

            public override string ToString()
            {
                return string.Format("(InputPrivacyValueDisallowUsersType Users:{0})", Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class PrivacyValueAllowContactsType : PrivacyRule
        {
            public override Types ConstructorCode => Types.PrivacyValueAllowContactsType;

            public PrivacyValueAllowContactsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(PrivacyValueAllowContactsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class PrivacyValueAllowAllType : PrivacyRule
        {
            public override Types ConstructorCode => Types.PrivacyValueAllowAllType;

            public PrivacyValueAllowAllType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(PrivacyValueAllowAllType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class PrivacyValueAllowUsersType : PrivacyRule
        {
            public override Types ConstructorCode => Types.PrivacyValueAllowUsersType;

            public List<int> Users;

            public PrivacyValueAllowUsersType() { }

            public PrivacyValueAllowUsersType(List<int> Users)
            {
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (int UsersElement in Users)
                    writer.Write(UsersElement);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<int>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.ReadInt32());
            }

            public override string ToString()
            {
                return string.Format("(PrivacyValueAllowUsersType Users:{0})", Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class PrivacyValueDisallowContactsType : PrivacyRule
        {
            public override Types ConstructorCode => Types.PrivacyValueDisallowContactsType;

            public PrivacyValueDisallowContactsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(PrivacyValueDisallowContactsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class PrivacyValueDisallowAllType : PrivacyRule
        {
            public override Types ConstructorCode => Types.PrivacyValueDisallowAllType;

            public PrivacyValueDisallowAllType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(PrivacyValueDisallowAllType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class PrivacyValueDisallowUsersType : PrivacyRule
        {
            public override Types ConstructorCode => Types.PrivacyValueDisallowUsersType;

            public List<int> Users;

            public PrivacyValueDisallowUsersType() { }

            public PrivacyValueDisallowUsersType(List<int> Users)
            {
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (int UsersElement in Users)
                    writer.Write(UsersElement);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<int>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.ReadInt32());
            }

            public override string ToString()
            {
                return string.Format("(PrivacyValueDisallowUsersType Users:{0})", Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class AccountPrivacyRulesType : AccountPrivacyRules
        {
            public override Types ConstructorCode => Types.AccountPrivacyRulesType;

            public List<PrivacyRule> Rules;
            public List<User> Users;

            public AccountPrivacyRulesType() { }

            public AccountPrivacyRulesType(List<PrivacyRule> Rules, List<User> Users)
            {
                this.Rules = Rules;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Rules.Count);
                foreach (PrivacyRule RulesElement in Rules)
                    RulesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int RulesLength = reader.ReadInt32();
                Rules = new List<PrivacyRule>(RulesLength);
                for (int RulesIndex = 0; RulesIndex < RulesLength; RulesIndex++)
                    Rules.Add(reader.Read<PrivacyRule>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(AccountPrivacyRulesType Rules:{0} Users:{1})", Rules, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Rules": return Rules;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Rules":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class AccountDaysTTLType : AccountDaysTTL
        {
            public override Types ConstructorCode => Types.AccountDaysTTLType;

            public int Days;

            public AccountDaysTTLType() { }

            public AccountDaysTTLType(int Days)
            {
                this.Days = Days;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Days);
            }

            public override void Read(TBinaryReader reader)
            {
                Days = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(AccountDaysTTLType Days:{0})", Days);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Days": return Days;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Days": return true;
                    default: return false;
                }
            }
        }

        public class DocumentAttributeImageSizeType : DocumentAttribute
        {
            public override Types ConstructorCode => Types.DocumentAttributeImageSizeType;

            public int W;
            public int H;

            public DocumentAttributeImageSizeType() { }

            public DocumentAttributeImageSizeType(int W, int H)
            {
                this.W = W;
                this.H = H;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(W);
                writer.Write(H);
            }

            public override void Read(TBinaryReader reader)
            {
                W = reader.ReadInt32();
                H = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(DocumentAttributeImageSizeType W:{0} H:{1})", W, H);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "W": return W;
                        case "H": return H;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "W":
                    case "H": return true;
                    default: return false;
                }
            }
        }

        public class DocumentAttributeAnimatedType : DocumentAttribute
        {
            public override Types ConstructorCode => Types.DocumentAttributeAnimatedType;

            public DocumentAttributeAnimatedType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(DocumentAttributeAnimatedType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class DocumentAttributeStickerType : DocumentAttribute
        {
            public override Types ConstructorCode => Types.DocumentAttributeStickerType;

            public string Alt;
            public InputStickerSet Stickerset;

            public DocumentAttributeStickerType() { }

            public DocumentAttributeStickerType(string Alt, InputStickerSet Stickerset)
            {
                this.Alt = Alt;
                this.Stickerset = Stickerset;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Alt);
                Stickerset.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Alt = reader.ReadString();
                Stickerset = reader.Read<InputStickerSet>();
            }

            public override string ToString()
            {
                return string.Format("(DocumentAttributeStickerType Alt:{0} Stickerset:{1})", Alt, Stickerset);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Alt": return Alt;
                        case "Stickerset": return Stickerset;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Alt":
                    case "Stickerset": return true;
                    default: return false;
                }
            }
        }

        public class DocumentAttributeVideoType : DocumentAttribute
        {
            public override Types ConstructorCode => Types.DocumentAttributeVideoType;

            public int Duration;
            public int W;
            public int H;

            public DocumentAttributeVideoType() { }

            public DocumentAttributeVideoType(int Duration, int W, int H)
            {
                this.Duration = Duration;
                this.W = W;
                this.H = H;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Duration);
                writer.Write(W);
                writer.Write(H);
            }

            public override void Read(TBinaryReader reader)
            {
                Duration = reader.ReadInt32();
                W = reader.ReadInt32();
                H = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(DocumentAttributeVideoType Duration:{0} W:{1} H:{2})", Duration, W, H);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Duration": return Duration;
                        case "W": return W;
                        case "H": return H;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Duration":
                    case "W":
                    case "H": return true;
                    default: return false;
                }
            }
        }

        public class DocumentAttributeAudioType : DocumentAttribute
        {
            public override Types ConstructorCode => Types.DocumentAttributeAudioType;

            public True Voice;
            public int Duration;
            public string Title;
            public string Performer;
            public byte[] Waveform;

            public DocumentAttributeAudioType() { }

            /// <summary>
            /// The following arguments can be null: Voice, Title, Performer, Waveform
            /// </summary>
            /// <param name="Voice">Can be null</param>
            /// <param name="Duration">Can NOT be null</param>
            /// <param name="Title">Can be null</param>
            /// <param name="Performer">Can be null</param>
            /// <param name="Waveform">Can be null</param>
            public DocumentAttributeAudioType(True Voice, int Duration, string Title, string Performer, byte[] Waveform)
            {
                this.Voice = Voice;
                this.Duration = Duration;
                this.Title = Title;
                this.Performer = Performer;
                this.Waveform = Waveform;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Voice != null ? 1 << 10 : 0) |
                    (Title != null ? 1 << 0 : 0) |
                    (Performer != null ? 1 << 1 : 0) |
                    (Waveform != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Voice != null)
                {

                }

                writer.Write(Duration);
                if (Title != null)
                {
                    writer.Write(Title);
                }

                if (Performer != null)
                {
                    writer.Write(Performer);
                }

                if (Waveform != null)
                {
                    writer.Write(Waveform);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 10)) != 0)
                {
                    Voice = reader.ReadTrue();
                }

                Duration = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    Title = reader.ReadString();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    Performer = reader.ReadString();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    Waveform = reader.ReadBytes();
                }

            }

            public override string ToString()
            {
                return string.Format("(DocumentAttributeAudioType Voice:{0} Duration:{1} Title:{2} Performer:{3} Waveform:{4})", Voice, Duration, Title, Performer, Waveform);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Voice": return Voice;
                        case "Duration": return Duration;
                        case "Title": return Title;
                        case "Performer": return Performer;
                        case "Waveform": return Waveform;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Voice":
                    case "Duration":
                    case "Title":
                    case "Performer":
                    case "Waveform": return true;
                    default: return false;
                }
            }
        }

        public class DocumentAttributeFilenameType : DocumentAttribute
        {
            public override Types ConstructorCode => Types.DocumentAttributeFilenameType;

            public string FileName;

            public DocumentAttributeFilenameType() { }

            public DocumentAttributeFilenameType(string FileName)
            {
                this.FileName = FileName;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(FileName);
            }

            public override void Read(TBinaryReader reader)
            {
                FileName = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(DocumentAttributeFilenameType FileName:{0})", FileName);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "FileName": return FileName;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "FileName": return true;
                    default: return false;
                }
            }
        }

        public class MessagesStickersNotModifiedType : MessagesStickers
        {
            public override Types ConstructorCode => Types.MessagesStickersNotModifiedType;

            public MessagesStickersNotModifiedType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(MessagesStickersNotModifiedType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class MessagesStickersType : MessagesStickers
        {
            public override Types ConstructorCode => Types.MessagesStickersType;

            public string Hash;
            public List<Document> Stickers;

            public MessagesStickersType() { }

            public MessagesStickersType(string Hash, List<Document> Stickers)
            {
                this.Hash = Hash;
                this.Stickers = Stickers;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Hash);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Stickers.Count);
                foreach (Document StickersElement in Stickers)
                    StickersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Hash = reader.ReadString();
                reader.ReadInt32(); // vector code
                int StickersLength = reader.ReadInt32();
                Stickers = new List<Document>(StickersLength);
                for (int StickersIndex = 0; StickersIndex < StickersLength; StickersIndex++)
                    Stickers.Add(reader.Read<Document>());
            }

            public override string ToString()
            {
                return string.Format("(MessagesStickersType Hash:{0} Stickers:{1})", Hash, Stickers);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Hash": return Hash;
                        case "Stickers": return Stickers;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Hash":
                    case "Stickers": return true;
                    default: return false;
                }
            }
        }

        public class StickerPackType : StickerPack
        {
            public override Types ConstructorCode => Types.StickerPackType;

            public string Emoticon;
            public List<long> Documents;

            public StickerPackType() { }

            public StickerPackType(string Emoticon, List<long> Documents)
            {
                this.Emoticon = Emoticon;
                this.Documents = Documents;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Emoticon);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Documents.Count);
                foreach (long DocumentsElement in Documents)
                    writer.Write(DocumentsElement);
            }

            public override void Read(TBinaryReader reader)
            {
                Emoticon = reader.ReadString();
                reader.ReadInt32(); // vector code
                int DocumentsLength = reader.ReadInt32();
                Documents = new List<long>(DocumentsLength);
                for (int DocumentsIndex = 0; DocumentsIndex < DocumentsLength; DocumentsIndex++)
                    Documents.Add(reader.ReadInt64());
            }

            public override string ToString()
            {
                return string.Format("(StickerPackType Emoticon:{0} Documents:{1})", Emoticon, Documents);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Emoticon": return Emoticon;
                        case "Documents": return Documents;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Emoticon":
                    case "Documents": return true;
                    default: return false;
                }
            }
        }

        public class MessagesAllStickersNotModifiedType : MessagesAllStickers
        {
            public override Types ConstructorCode => Types.MessagesAllStickersNotModifiedType;

            public MessagesAllStickersNotModifiedType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(MessagesAllStickersNotModifiedType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class MessagesAllStickersType : MessagesAllStickers
        {
            public override Types ConstructorCode => Types.MessagesAllStickersType;

            public int Hash;
            public List<StickerSet> Sets;

            public MessagesAllStickersType() { }

            public MessagesAllStickersType(int Hash, List<StickerSet> Sets)
            {
                this.Hash = Hash;
                this.Sets = Sets;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Hash);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Sets.Count);
                foreach (StickerSet SetsElement in Sets)
                    SetsElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Hash = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int SetsLength = reader.ReadInt32();
                Sets = new List<StickerSet>(SetsLength);
                for (int SetsIndex = 0; SetsIndex < SetsLength; SetsIndex++)
                    Sets.Add(reader.Read<StickerSet>());
            }

            public override string ToString()
            {
                return string.Format("(MessagesAllStickersType Hash:{0} Sets:{1})", Hash, Sets);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Hash": return Hash;
                        case "Sets": return Sets;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Hash":
                    case "Sets": return true;
                    default: return false;
                }
            }
        }

        public class DisabledFeatureType : DisabledFeature
        {
            public override Types ConstructorCode => Types.DisabledFeatureType;

            public string Feature;
            public string Description;

            public DisabledFeatureType() { }

            public DisabledFeatureType(string Feature, string Description)
            {
                this.Feature = Feature;
                this.Description = Description;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Feature);
                writer.Write(Description);
            }

            public override void Read(TBinaryReader reader)
            {
                Feature = reader.ReadString();
                Description = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(DisabledFeatureType Feature:{0} Description:{1})", Feature, Description);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Feature": return Feature;
                        case "Description": return Description;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Feature":
                    case "Description": return true;
                    default: return false;
                }
            }
        }

        public class MessagesAffectedMessagesType : MessagesAffectedMessages
        {
            public override Types ConstructorCode => Types.MessagesAffectedMessagesType;

            public int Pts;
            public int PtsCount;

            public MessagesAffectedMessagesType() { }

            public MessagesAffectedMessagesType(int Pts, int PtsCount)
            {
                this.Pts = Pts;
                this.PtsCount = PtsCount;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Pts);
                writer.Write(PtsCount);
            }

            public override void Read(TBinaryReader reader)
            {
                Pts = reader.ReadInt32();
                PtsCount = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessagesAffectedMessagesType Pts:{0} PtsCount:{1})", Pts, PtsCount);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Pts": return Pts;
                        case "PtsCount": return PtsCount;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Pts":
                    case "PtsCount": return true;
                    default: return false;
                }
            }
        }

        public class ContactLinkUnknownType : ContactLink
        {
            public override Types ConstructorCode => Types.ContactLinkUnknownType;

            public ContactLinkUnknownType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ContactLinkUnknownType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ContactLinkNoneType : ContactLink
        {
            public override Types ConstructorCode => Types.ContactLinkNoneType;

            public ContactLinkNoneType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ContactLinkNoneType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ContactLinkHasPhoneType : ContactLink
        {
            public override Types ConstructorCode => Types.ContactLinkHasPhoneType;

            public ContactLinkHasPhoneType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ContactLinkHasPhoneType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ContactLinkContactType : ContactLink
        {
            public override Types ConstructorCode => Types.ContactLinkContactType;

            public ContactLinkContactType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ContactLinkContactType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class WebPageEmptyType : WebPage
        {
            public override Types ConstructorCode => Types.WebPageEmptyType;

            public long Id;

            public WebPageEmptyType() { }

            public WebPageEmptyType(long Id)
            {
                this.Id = Id;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(WebPageEmptyType Id:{0})", Id);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id": return true;
                    default: return false;
                }
            }
        }

        public class WebPagePendingType : WebPage
        {
            public override Types ConstructorCode => Types.WebPagePendingType;

            public long Id;
            public int Date;

            public WebPagePendingType() { }

            public WebPagePendingType(long Id, int Date)
            {
                this.Id = Id;
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(WebPagePendingType Id:{0} Date:{1})", Id, Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        public class WebPageType : WebPage
        {
            public override Types ConstructorCode => Types.WebPageType;

            public long Id;
            public string Url;
            public string DisplayUrl;
            public string Type;
            public string SiteName;
            public string Title;
            public string Description;
            public Photo Photo;
            public string EmbedUrl;
            public string EmbedType;
            public int? EmbedWidth;
            public int? EmbedHeight;
            public int? Duration;
            public string Author;
            public Document Document;

            public WebPageType() { }

            /// <summary>
            /// The following arguments can be null: Type, SiteName, Title, Description, Photo, EmbedUrl, EmbedType, EmbedWidth, EmbedHeight, Duration, Author, Document
            /// </summary>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="Url">Can NOT be null</param>
            /// <param name="DisplayUrl">Can NOT be null</param>
            /// <param name="Type">Can be null</param>
            /// <param name="SiteName">Can be null</param>
            /// <param name="Title">Can be null</param>
            /// <param name="Description">Can be null</param>
            /// <param name="Photo">Can be null</param>
            /// <param name="EmbedUrl">Can be null</param>
            /// <param name="EmbedType">Can be null</param>
            /// <param name="EmbedWidth">Can be null</param>
            /// <param name="EmbedHeight">Can be null</param>
            /// <param name="Duration">Can be null</param>
            /// <param name="Author">Can be null</param>
            /// <param name="Document">Can be null</param>
            public WebPageType(long Id, string Url, string DisplayUrl, string Type, string SiteName, string Title, string Description, Photo Photo, string EmbedUrl, string EmbedType, int? EmbedWidth, int? EmbedHeight, int? Duration, string Author, Document Document)
            {
                this.Id = Id;
                this.Url = Url;
                this.DisplayUrl = DisplayUrl;
                this.Type = Type;
                this.SiteName = SiteName;
                this.Title = Title;
                this.Description = Description;
                this.Photo = Photo;
                this.EmbedUrl = EmbedUrl;
                this.EmbedType = EmbedType;
                this.EmbedWidth = EmbedWidth;
                this.EmbedHeight = EmbedHeight;
                this.Duration = Duration;
                this.Author = Author;
                this.Document = Document;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Type != null ? 1 << 0 : 0) |
                    (SiteName != null ? 1 << 1 : 0) |
                    (Title != null ? 1 << 2 : 0) |
                    (Description != null ? 1 << 3 : 0) |
                    (Photo != null ? 1 << 4 : 0) |
                    (EmbedUrl != null ? 1 << 5 : 0) |
                    (EmbedType != null ? 1 << 5 : 0) |
                    (EmbedWidth != null ? 1 << 6 : 0) |
                    (EmbedHeight != null ? 1 << 6 : 0) |
                    (Duration != null ? 1 << 7 : 0) |
                    (Author != null ? 1 << 8 : 0) |
                    (Document != null ? 1 << 9 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                writer.Write(Id);
                writer.Write(Url);
                writer.Write(DisplayUrl);
                if (Type != null)
                {
                    writer.Write(Type);
                }

                if (SiteName != null)
                {
                    writer.Write(SiteName);
                }

                if (Title != null)
                {
                    writer.Write(Title);
                }

                if (Description != null)
                {
                    writer.Write(Description);
                }

                if (Photo != null)
                {
                    Photo.Write(writer);
                }

                if (EmbedUrl != null)
                {
                    writer.Write(EmbedUrl);
                }

                if (EmbedType != null)
                {
                    writer.Write(EmbedType);
                }

                if (EmbedWidth != null)
                {
                    writer.Write(EmbedWidth.Value);
                }

                if (EmbedHeight != null)
                {
                    writer.Write(EmbedHeight.Value);
                }

                if (Duration != null)
                {
                    writer.Write(Duration.Value);
                }

                if (Author != null)
                {
                    writer.Write(Author);
                }

                if (Document != null)
                {
                    Document.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                Id = reader.ReadInt64();
                Url = reader.ReadString();
                DisplayUrl = reader.ReadString();
                if ((flags & (1 << 0)) != 0)
                {
                    Type = reader.ReadString();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    SiteName = reader.ReadString();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    Title = reader.ReadString();
                }

                if ((flags & (1 << 3)) != 0)
                {
                    Description = reader.ReadString();
                }

                if ((flags & (1 << 4)) != 0)
                {
                    Photo = reader.Read<Photo>();
                }

                if ((flags & (1 << 5)) != 0)
                {
                    EmbedUrl = reader.ReadString();
                }

                if ((flags & (1 << 5)) != 0)
                {
                    EmbedType = reader.ReadString();
                }

                if ((flags & (1 << 6)) != 0)
                {
                    EmbedWidth = reader.ReadInt32();
                }

                if ((flags & (1 << 6)) != 0)
                {
                    EmbedHeight = reader.ReadInt32();
                }

                if ((flags & (1 << 7)) != 0)
                {
                    Duration = reader.ReadInt32();
                }

                if ((flags & (1 << 8)) != 0)
                {
                    Author = reader.ReadString();
                }

                if ((flags & (1 << 9)) != 0)
                {
                    Document = reader.Read<Document>();
                }

            }

            public override string ToString()
            {
                return string.Format("(WebPageType Id:{0} Url:{1} DisplayUrl:{2} Type:{3} SiteName:{4} Title:{5} Description:{6} Photo:{7} EmbedUrl:{8} EmbedType:{9} EmbedWidth:{10} EmbedHeight:{11} Duration:{12} Author:{13} Document:{14})", Id, Url, DisplayUrl, Type, SiteName, Title, Description, Photo, EmbedUrl, EmbedType, EmbedWidth, EmbedHeight, Duration, Author, Document);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Url": return Url;
                        case "DisplayUrl": return DisplayUrl;
                        case "Type": return Type;
                        case "SiteName": return SiteName;
                        case "Title": return Title;
                        case "Description": return Description;
                        case "Photo": return Photo;
                        case "EmbedUrl": return EmbedUrl;
                        case "EmbedType": return EmbedType;
                        case "EmbedWidth": return EmbedWidth;
                        case "EmbedHeight": return EmbedHeight;
                        case "Duration": return Duration;
                        case "Author": return Author;
                        case "Document": return Document;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Url":
                    case "DisplayUrl":
                    case "Type":
                    case "SiteName":
                    case "Title":
                    case "Description":
                    case "Photo":
                    case "EmbedUrl":
                    case "EmbedType":
                    case "EmbedWidth":
                    case "EmbedHeight":
                    case "Duration":
                    case "Author":
                    case "Document": return true;
                    default: return false;
                }
            }
        }

        public class AuthorizationType : Authorization
        {
            public override Types ConstructorCode => Types.AuthorizationType;

            public long Hash;
            public int Flags;
            public string DeviceModel;
            public string Platform;
            public string SystemVersion;
            public int ApiId;
            public string AppName;
            public string AppVersion;
            public int DateCreated;
            public int DateActive;
            public string Ip;
            public string Country;
            public string Region;

            public AuthorizationType() { }

            public AuthorizationType(long Hash, int Flags, string DeviceModel, string Platform, string SystemVersion, int ApiId, string AppName, string AppVersion, int DateCreated, int DateActive, string Ip, string Country, string Region)
            {
                this.Hash = Hash;
                this.Flags = Flags;
                this.DeviceModel = DeviceModel;
                this.Platform = Platform;
                this.SystemVersion = SystemVersion;
                this.ApiId = ApiId;
                this.AppName = AppName;
                this.AppVersion = AppVersion;
                this.DateCreated = DateCreated;
                this.DateActive = DateActive;
                this.Ip = Ip;
                this.Country = Country;
                this.Region = Region;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Hash);
                writer.Write(Flags);
                writer.Write(DeviceModel);
                writer.Write(Platform);
                writer.Write(SystemVersion);
                writer.Write(ApiId);
                writer.Write(AppName);
                writer.Write(AppVersion);
                writer.Write(DateCreated);
                writer.Write(DateActive);
                writer.Write(Ip);
                writer.Write(Country);
                writer.Write(Region);
            }

            public override void Read(TBinaryReader reader)
            {
                Hash = reader.ReadInt64();
                Flags = reader.ReadInt32();
                DeviceModel = reader.ReadString();
                Platform = reader.ReadString();
                SystemVersion = reader.ReadString();
                ApiId = reader.ReadInt32();
                AppName = reader.ReadString();
                AppVersion = reader.ReadString();
                DateCreated = reader.ReadInt32();
                DateActive = reader.ReadInt32();
                Ip = reader.ReadString();
                Country = reader.ReadString();
                Region = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(AuthorizationType Hash:{0} Flags:{1} DeviceModel:{2} Platform:{3} SystemVersion:{4} ApiId:{5} AppName:{6} AppVersion:{7} DateCreated:{8} DateActive:{9} Ip:{10} Country:{11} Region:{12})", Hash, Flags, DeviceModel, Platform, SystemVersion, ApiId, AppName, AppVersion, DateCreated, DateActive, Ip, Country, Region);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Hash": return Hash;
                        case "Flags": return Flags;
                        case "DeviceModel": return DeviceModel;
                        case "Platform": return Platform;
                        case "SystemVersion": return SystemVersion;
                        case "ApiId": return ApiId;
                        case "AppName": return AppName;
                        case "AppVersion": return AppVersion;
                        case "DateCreated": return DateCreated;
                        case "DateActive": return DateActive;
                        case "Ip": return Ip;
                        case "Country": return Country;
                        case "Region": return Region;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Hash":
                    case "Flags":
                    case "DeviceModel":
                    case "Platform":
                    case "SystemVersion":
                    case "ApiId":
                    case "AppName":
                    case "AppVersion":
                    case "DateCreated":
                    case "DateActive":
                    case "Ip":
                    case "Country":
                    case "Region": return true;
                    default: return false;
                }
            }
        }

        public class AccountAuthorizationsType : AccountAuthorizations
        {
            public override Types ConstructorCode => Types.AccountAuthorizationsType;

            public List<Authorization> Authorizations;

            public AccountAuthorizationsType() { }

            public AccountAuthorizationsType(List<Authorization> Authorizations)
            {
                this.Authorizations = Authorizations;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Authorizations.Count);
                foreach (Authorization AuthorizationsElement in Authorizations)
                    AuthorizationsElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int AuthorizationsLength = reader.ReadInt32();
                Authorizations = new List<Authorization>(AuthorizationsLength);
                for (int AuthorizationsIndex = 0; AuthorizationsIndex < AuthorizationsLength; AuthorizationsIndex++)
                    Authorizations.Add(reader.Read<Authorization>());
            }

            public override string ToString()
            {
                return string.Format("(AccountAuthorizationsType Authorizations:{0})", Authorizations);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Authorizations": return Authorizations;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Authorizations": return true;
                    default: return false;
                }
            }
        }

        public class AccountNoPasswordType : AccountPassword
        {
            public override Types ConstructorCode => Types.AccountNoPasswordType;

            public byte[] NewSalt;
            public string EmailUnconfirmedPattern;

            public AccountNoPasswordType() { }

            public AccountNoPasswordType(byte[] NewSalt, string EmailUnconfirmedPattern)
            {
                this.NewSalt = NewSalt;
                this.EmailUnconfirmedPattern = EmailUnconfirmedPattern;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(NewSalt);
                writer.Write(EmailUnconfirmedPattern);
            }

            public override void Read(TBinaryReader reader)
            {
                NewSalt = reader.ReadBytes();
                EmailUnconfirmedPattern = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(AccountNoPasswordType NewSalt:{0} EmailUnconfirmedPattern:{1})", NewSalt, EmailUnconfirmedPattern);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "NewSalt": return NewSalt;
                        case "EmailUnconfirmedPattern": return EmailUnconfirmedPattern;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "NewSalt":
                    case "EmailUnconfirmedPattern": return true;
                    default: return false;
                }
            }
        }

        public class AccountPasswordType : AccountPassword
        {
            public override Types ConstructorCode => Types.AccountPasswordType;

            public byte[] CurrentSalt;
            public byte[] NewSalt;
            public string Hint;
            public bool HasRecovery;
            public string EmailUnconfirmedPattern;

            public AccountPasswordType() { }

            public AccountPasswordType(byte[] CurrentSalt, byte[] NewSalt, string Hint, bool HasRecovery, string EmailUnconfirmedPattern)
            {
                this.CurrentSalt = CurrentSalt;
                this.NewSalt = NewSalt;
                this.Hint = Hint;
                this.HasRecovery = HasRecovery;
                this.EmailUnconfirmedPattern = EmailUnconfirmedPattern;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(CurrentSalt);
                writer.Write(NewSalt);
                writer.Write(Hint);
                writer.Write(HasRecovery);
                writer.Write(EmailUnconfirmedPattern);
            }

            public override void Read(TBinaryReader reader)
            {
                CurrentSalt = reader.ReadBytes();
                NewSalt = reader.ReadBytes();
                Hint = reader.ReadString();
                HasRecovery = reader.ReadBoolean();
                EmailUnconfirmedPattern = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(AccountPasswordType CurrentSalt:{0} NewSalt:{1} Hint:{2} HasRecovery:{3} EmailUnconfirmedPattern:{4})", CurrentSalt, NewSalt, Hint, HasRecovery, EmailUnconfirmedPattern);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "CurrentSalt": return CurrentSalt;
                        case "NewSalt": return NewSalt;
                        case "Hint": return Hint;
                        case "HasRecovery": return HasRecovery;
                        case "EmailUnconfirmedPattern": return EmailUnconfirmedPattern;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "CurrentSalt":
                    case "NewSalt":
                    case "Hint":
                    case "HasRecovery":
                    case "EmailUnconfirmedPattern": return true;
                    default: return false;
                }
            }
        }

        public class AccountPasswordSettingsType : AccountPasswordSettings
        {
            public override Types ConstructorCode => Types.AccountPasswordSettingsType;

            public string Email;

            public AccountPasswordSettingsType() { }

            public AccountPasswordSettingsType(string Email)
            {
                this.Email = Email;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Email);
            }

            public override void Read(TBinaryReader reader)
            {
                Email = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(AccountPasswordSettingsType Email:{0})", Email);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Email": return Email;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Email": return true;
                    default: return false;
                }
            }
        }

        public class AccountPasswordInputSettingsType : AccountPasswordInputSettings
        {
            public override Types ConstructorCode => Types.AccountPasswordInputSettingsType;

            public byte[] NewSalt;
            public byte[] NewPasswordHash;
            public string Hint;
            public string Email;

            public AccountPasswordInputSettingsType() { }

            /// <summary>
            /// The following arguments can be null: NewSalt, NewPasswordHash, Hint, Email
            /// </summary>
            /// <param name="NewSalt">Can be null</param>
            /// <param name="NewPasswordHash">Can be null</param>
            /// <param name="Hint">Can be null</param>
            /// <param name="Email">Can be null</param>
            public AccountPasswordInputSettingsType(byte[] NewSalt, byte[] NewPasswordHash, string Hint, string Email)
            {
                this.NewSalt = NewSalt;
                this.NewPasswordHash = NewPasswordHash;
                this.Hint = Hint;
                this.Email = Email;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (NewSalt != null ? 1 << 0 : 0) |
                    (NewPasswordHash != null ? 1 << 0 : 0) |
                    (Hint != null ? 1 << 0 : 0) |
                    (Email != null ? 1 << 1 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (NewSalt != null)
                {
                    writer.Write(NewSalt);
                }

                if (NewPasswordHash != null)
                {
                    writer.Write(NewPasswordHash);
                }

                if (Hint != null)
                {
                    writer.Write(Hint);
                }

                if (Email != null)
                {
                    writer.Write(Email);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    NewSalt = reader.ReadBytes();
                }

                if ((flags & (1 << 0)) != 0)
                {
                    NewPasswordHash = reader.ReadBytes();
                }

                if ((flags & (1 << 0)) != 0)
                {
                    Hint = reader.ReadString();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    Email = reader.ReadString();
                }

            }

            public override string ToString()
            {
                return string.Format("(AccountPasswordInputSettingsType NewSalt:{0} NewPasswordHash:{1} Hint:{2} Email:{3})", NewSalt, NewPasswordHash, Hint, Email);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "NewSalt": return NewSalt;
                        case "NewPasswordHash": return NewPasswordHash;
                        case "Hint": return Hint;
                        case "Email": return Email;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "NewSalt":
                    case "NewPasswordHash":
                    case "Hint":
                    case "Email": return true;
                    default: return false;
                }
            }
        }

        public class AuthPasswordRecoveryType : AuthPasswordRecovery
        {
            public override Types ConstructorCode => Types.AuthPasswordRecoveryType;

            public string EmailPattern;

            public AuthPasswordRecoveryType() { }

            public AuthPasswordRecoveryType(string EmailPattern)
            {
                this.EmailPattern = EmailPattern;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(EmailPattern);
            }

            public override void Read(TBinaryReader reader)
            {
                EmailPattern = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(AuthPasswordRecoveryType EmailPattern:{0})", EmailPattern);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "EmailPattern": return EmailPattern;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "EmailPattern": return true;
                    default: return false;
                }
            }
        }

        public class ReceivedNotifyMessageType : ReceivedNotifyMessage
        {
            public override Types ConstructorCode => Types.ReceivedNotifyMessageType;

            public int Id;
            public int Flags;

            public ReceivedNotifyMessageType() { }

            public ReceivedNotifyMessageType(int Id, int Flags)
            {
                this.Id = Id;
                this.Flags = Flags;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(Flags);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt32();
                Flags = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(ReceivedNotifyMessageType Id:{0} Flags:{1})", Id, Flags);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Flags": return Flags;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Flags": return true;
                    default: return false;
                }
            }
        }

        public class ChatInviteEmptyType : ExportedChatInvite
        {
            public override Types ConstructorCode => Types.ChatInviteEmptyType;

            public ChatInviteEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ChatInviteEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ChatInviteExportedType : ExportedChatInvite
        {
            public override Types ConstructorCode => Types.ChatInviteExportedType;

            public string Link;

            public ChatInviteExportedType() { }

            public ChatInviteExportedType(string Link)
            {
                this.Link = Link;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Link);
            }

            public override void Read(TBinaryReader reader)
            {
                Link = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(ChatInviteExportedType Link:{0})", Link);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Link": return Link;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Link": return true;
                    default: return false;
                }
            }
        }

        public class ChatInviteAlreadyType : ChatInvite
        {
            public override Types ConstructorCode => Types.ChatInviteAlreadyType;

            public Chat Chat;

            public ChatInviteAlreadyType() { }

            public ChatInviteAlreadyType(Chat Chat)
            {
                this.Chat = Chat;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Chat.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Chat = reader.Read<Chat>();
            }

            public override string ToString()
            {
                return string.Format("(ChatInviteAlreadyType Chat:{0})", Chat);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Chat": return Chat;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Chat": return true;
                    default: return false;
                }
            }
        }

        public class ChatInviteType : ChatInvite
        {
            public override Types ConstructorCode => Types.ChatInviteType;

            public True Channel;
            public True Broadcast;
            public True Public;
            public True Megagroup;
            public string Title;

            public ChatInviteType() { }

            /// <summary>
            /// The following arguments can be null: Channel, Broadcast, Public, Megagroup
            /// </summary>
            /// <param name="Channel">Can be null</param>
            /// <param name="Broadcast">Can be null</param>
            /// <param name="Public">Can be null</param>
            /// <param name="Megagroup">Can be null</param>
            /// <param name="Title">Can NOT be null</param>
            public ChatInviteType(True Channel, True Broadcast, True Public, True Megagroup, string Title)
            {
                this.Channel = Channel;
                this.Broadcast = Broadcast;
                this.Public = Public;
                this.Megagroup = Megagroup;
                this.Title = Title;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Channel != null ? 1 << 0 : 0) |
                    (Broadcast != null ? 1 << 1 : 0) |
                    (Public != null ? 1 << 2 : 0) |
                    (Megagroup != null ? 1 << 3 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Channel != null)
                {

                }

                if (Broadcast != null)
                {

                }

                if (Public != null)
                {

                }

                if (Megagroup != null)
                {

                }

                writer.Write(Title);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    Channel = reader.ReadTrue();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    Broadcast = reader.ReadTrue();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    Public = reader.ReadTrue();
                }

                if ((flags & (1 << 3)) != 0)
                {
                    Megagroup = reader.ReadTrue();
                }

                Title = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(ChatInviteType Channel:{0} Broadcast:{1} Public:{2} Megagroup:{3} Title:{4})", Channel, Broadcast, Public, Megagroup, Title);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Channel": return Channel;
                        case "Broadcast": return Broadcast;
                        case "Public": return Public;
                        case "Megagroup": return Megagroup;
                        case "Title": return Title;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Channel":
                    case "Broadcast":
                    case "Public":
                    case "Megagroup":
                    case "Title": return true;
                    default: return false;
                }
            }
        }

        public class InputStickerSetEmptyType : InputStickerSet
        {
            public override Types ConstructorCode => Types.InputStickerSetEmptyType;

            public InputStickerSetEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputStickerSetEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputStickerSetIDType : InputStickerSet
        {
            public override Types ConstructorCode => Types.InputStickerSetIDType;

            public long Id;
            public long AccessHash;

            public InputStickerSetIDType() { }

            public InputStickerSetIDType(long Id, long AccessHash)
            {
                this.Id = Id;
                this.AccessHash = AccessHash;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(AccessHash);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadInt64();
                AccessHash = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(InputStickerSetIDType Id:{0} AccessHash:{1})", Id, AccessHash);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "AccessHash": return true;
                    default: return false;
                }
            }
        }

        public class InputStickerSetShortNameType : InputStickerSet
        {
            public override Types ConstructorCode => Types.InputStickerSetShortNameType;

            public string ShortName;

            public InputStickerSetShortNameType() { }

            public InputStickerSetShortNameType(string ShortName)
            {
                this.ShortName = ShortName;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ShortName);
            }

            public override void Read(TBinaryReader reader)
            {
                ShortName = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InputStickerSetShortNameType ShortName:{0})", ShortName);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ShortName": return ShortName;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ShortName": return true;
                    default: return false;
                }
            }
        }

        public class StickerSetType : StickerSet
        {
            public override Types ConstructorCode => Types.StickerSetType;

            public True Installed;
            public True Disabled;
            public True Official;
            public long Id;
            public long AccessHash;
            public string Title;
            public string ShortName;
            public int Count;
            public int Hash;

            public StickerSetType() { }

            /// <summary>
            /// The following arguments can be null: Installed, Disabled, Official
            /// </summary>
            /// <param name="Installed">Can be null</param>
            /// <param name="Disabled">Can be null</param>
            /// <param name="Official">Can be null</param>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="AccessHash">Can NOT be null</param>
            /// <param name="Title">Can NOT be null</param>
            /// <param name="ShortName">Can NOT be null</param>
            /// <param name="Count">Can NOT be null</param>
            /// <param name="Hash">Can NOT be null</param>
            public StickerSetType(True Installed, True Disabled, True Official, long Id, long AccessHash, string Title, string ShortName, int Count, int Hash)
            {
                this.Installed = Installed;
                this.Disabled = Disabled;
                this.Official = Official;
                this.Id = Id;
                this.AccessHash = AccessHash;
                this.Title = Title;
                this.ShortName = ShortName;
                this.Count = Count;
                this.Hash = Hash;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Installed != null ? 1 << 0 : 0) |
                    (Disabled != null ? 1 << 1 : 0) |
                    (Official != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Installed != null)
                {

                }

                if (Disabled != null)
                {

                }

                if (Official != null)
                {

                }

                writer.Write(Id);
                writer.Write(AccessHash);
                writer.Write(Title);
                writer.Write(ShortName);
                writer.Write(Count);
                writer.Write(Hash);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    Installed = reader.ReadTrue();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    Disabled = reader.ReadTrue();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    Official = reader.ReadTrue();
                }

                Id = reader.ReadInt64();
                AccessHash = reader.ReadInt64();
                Title = reader.ReadString();
                ShortName = reader.ReadString();
                Count = reader.ReadInt32();
                Hash = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(StickerSetType Installed:{0} Disabled:{1} Official:{2} Id:{3} AccessHash:{4} Title:{5} ShortName:{6} Count:{7} Hash:{8})", Installed, Disabled, Official, Id, AccessHash, Title, ShortName, Count, Hash);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Installed": return Installed;
                        case "Disabled": return Disabled;
                        case "Official": return Official;
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        case "Title": return Title;
                        case "ShortName": return ShortName;
                        case "Count": return Count;
                        case "Hash": return Hash;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Installed":
                    case "Disabled":
                    case "Official":
                    case "Id":
                    case "AccessHash":
                    case "Title":
                    case "ShortName":
                    case "Count":
                    case "Hash": return true;
                    default: return false;
                }
            }
        }

        public class MessagesStickerSetType : MessagesStickerSet
        {
            public override Types ConstructorCode => Types.MessagesStickerSetType;

            public StickerSet Set;
            public List<StickerPack> Packs;
            public List<Document> Documents;

            public MessagesStickerSetType() { }

            public MessagesStickerSetType(StickerSet Set, List<StickerPack> Packs, List<Document> Documents)
            {
                this.Set = Set;
                this.Packs = Packs;
                this.Documents = Documents;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Set.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Packs.Count);
                foreach (StickerPack PacksElement in Packs)
                    PacksElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Documents.Count);
                foreach (Document DocumentsElement in Documents)
                    DocumentsElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Set = reader.Read<StickerSet>();
                reader.ReadInt32(); // vector code
                int PacksLength = reader.ReadInt32();
                Packs = new List<StickerPack>(PacksLength);
                for (int PacksIndex = 0; PacksIndex < PacksLength; PacksIndex++)
                    Packs.Add(reader.Read<StickerPack>());
                reader.ReadInt32(); // vector code
                int DocumentsLength = reader.ReadInt32();
                Documents = new List<Document>(DocumentsLength);
                for (int DocumentsIndex = 0; DocumentsIndex < DocumentsLength; DocumentsIndex++)
                    Documents.Add(reader.Read<Document>());
            }

            public override string ToString()
            {
                return string.Format("(MessagesStickerSetType Set:{0} Packs:{1} Documents:{2})", Set, Packs, Documents);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Set": return Set;
                        case "Packs": return Packs;
                        case "Documents": return Documents;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Set":
                    case "Packs":
                    case "Documents": return true;
                    default: return false;
                }
            }
        }

        public class BotCommandType : BotCommand
        {
            public override Types ConstructorCode => Types.BotCommandType;

            public string Command;
            public string Description;

            public BotCommandType() { }

            public BotCommandType(string Command, string Description)
            {
                this.Command = Command;
                this.Description = Description;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Command);
                writer.Write(Description);
            }

            public override void Read(TBinaryReader reader)
            {
                Command = reader.ReadString();
                Description = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(BotCommandType Command:{0} Description:{1})", Command, Description);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Command": return Command;
                        case "Description": return Description;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Command":
                    case "Description": return true;
                    default: return false;
                }
            }
        }

        public class BotInfoType : BotInfo
        {
            public override Types ConstructorCode => Types.BotInfoType;

            public int UserId;
            public string Description;
            public List<BotCommand> Commands;

            public BotInfoType() { }

            public BotInfoType(int UserId, string Description, List<BotCommand> Commands)
            {
                this.UserId = UserId;
                this.Description = Description;
                this.Commands = Commands;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(Description);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Commands.Count);
                foreach (BotCommand CommandsElement in Commands)
                    CommandsElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                Description = reader.ReadString();
                reader.ReadInt32(); // vector code
                int CommandsLength = reader.ReadInt32();
                Commands = new List<BotCommand>(CommandsLength);
                for (int CommandsIndex = 0; CommandsIndex < CommandsLength; CommandsIndex++)
                    Commands.Add(reader.Read<BotCommand>());
            }

            public override string ToString()
            {
                return string.Format("(BotInfoType UserId:{0} Description:{1} Commands:{2})", UserId, Description, Commands);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "Description": return Description;
                        case "Commands": return Commands;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "Description":
                    case "Commands": return true;
                    default: return false;
                }
            }
        }

        public class KeyboardButtonType : KeyboardButton
        {
            public override Types ConstructorCode => Types.KeyboardButtonType;

            public string Text;

            public KeyboardButtonType() { }

            public KeyboardButtonType(string Text)
            {
                this.Text = Text;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Text);
            }

            public override void Read(TBinaryReader reader)
            {
                Text = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(KeyboardButtonType Text:{0})", Text);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Text": return Text;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Text": return true;
                    default: return false;
                }
            }
        }

        public class KeyboardButtonUrlType : KeyboardButton
        {
            public override Types ConstructorCode => Types.KeyboardButtonUrlType;

            public string Text;
            public string Url;

            public KeyboardButtonUrlType() { }

            public KeyboardButtonUrlType(string Text, string Url)
            {
                this.Text = Text;
                this.Url = Url;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Text);
                writer.Write(Url);
            }

            public override void Read(TBinaryReader reader)
            {
                Text = reader.ReadString();
                Url = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(KeyboardButtonUrlType Text:{0} Url:{1})", Text, Url);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Text": return Text;
                        case "Url": return Url;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Text":
                    case "Url": return true;
                    default: return false;
                }
            }
        }

        public class KeyboardButtonCallbackType : KeyboardButton
        {
            public override Types ConstructorCode => Types.KeyboardButtonCallbackType;

            public string Text;
            public byte[] Data;

            public KeyboardButtonCallbackType() { }

            public KeyboardButtonCallbackType(string Text, byte[] Data)
            {
                this.Text = Text;
                this.Data = Data;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Text);
                writer.Write(Data);
            }

            public override void Read(TBinaryReader reader)
            {
                Text = reader.ReadString();
                Data = reader.ReadBytes();
            }

            public override string ToString()
            {
                return string.Format("(KeyboardButtonCallbackType Text:{0} Data:{1})", Text, Data);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Text": return Text;
                        case "Data": return Data;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Text":
                    case "Data": return true;
                    default: return false;
                }
            }
        }

        public class KeyboardButtonRequestPhoneType : KeyboardButton
        {
            public override Types ConstructorCode => Types.KeyboardButtonRequestPhoneType;

            public string Text;

            public KeyboardButtonRequestPhoneType() { }

            public KeyboardButtonRequestPhoneType(string Text)
            {
                this.Text = Text;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Text);
            }

            public override void Read(TBinaryReader reader)
            {
                Text = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(KeyboardButtonRequestPhoneType Text:{0})", Text);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Text": return Text;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Text": return true;
                    default: return false;
                }
            }
        }

        public class KeyboardButtonRequestGeoLocationType : KeyboardButton
        {
            public override Types ConstructorCode => Types.KeyboardButtonRequestGeoLocationType;

            public string Text;

            public KeyboardButtonRequestGeoLocationType() { }

            public KeyboardButtonRequestGeoLocationType(string Text)
            {
                this.Text = Text;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Text);
            }

            public override void Read(TBinaryReader reader)
            {
                Text = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(KeyboardButtonRequestGeoLocationType Text:{0})", Text);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Text": return Text;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Text": return true;
                    default: return false;
                }
            }
        }

        public class KeyboardButtonSwitchInlineType : KeyboardButton
        {
            public override Types ConstructorCode => Types.KeyboardButtonSwitchInlineType;

            public string Text;
            public string Query;

            public KeyboardButtonSwitchInlineType() { }

            public KeyboardButtonSwitchInlineType(string Text, string Query)
            {
                this.Text = Text;
                this.Query = Query;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Text);
                writer.Write(Query);
            }

            public override void Read(TBinaryReader reader)
            {
                Text = reader.ReadString();
                Query = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(KeyboardButtonSwitchInlineType Text:{0} Query:{1})", Text, Query);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Text": return Text;
                        case "Query": return Query;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Text":
                    case "Query": return true;
                    default: return false;
                }
            }
        }

        public class KeyboardButtonRowType : KeyboardButtonRow
        {
            public override Types ConstructorCode => Types.KeyboardButtonRowType;

            public List<KeyboardButton> Buttons;

            public KeyboardButtonRowType() { }

            public KeyboardButtonRowType(List<KeyboardButton> Buttons)
            {
                this.Buttons = Buttons;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Buttons.Count);
                foreach (KeyboardButton ButtonsElement in Buttons)
                    ButtonsElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int ButtonsLength = reader.ReadInt32();
                Buttons = new List<KeyboardButton>(ButtonsLength);
                for (int ButtonsIndex = 0; ButtonsIndex < ButtonsLength; ButtonsIndex++)
                    Buttons.Add(reader.Read<KeyboardButton>());
            }

            public override string ToString()
            {
                return string.Format("(KeyboardButtonRowType Buttons:{0})", Buttons);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Buttons": return Buttons;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Buttons": return true;
                    default: return false;
                }
            }
        }

        public class ReplyKeyboardHideType : ReplyMarkup
        {
            public override Types ConstructorCode => Types.ReplyKeyboardHideType;

            public True Selective;

            public ReplyKeyboardHideType() { }

            /// <summary>
            /// The following arguments can be null: Selective
            /// </summary>
            /// <param name="Selective">Can be null</param>
            public ReplyKeyboardHideType(True Selective)
            {
                this.Selective = Selective;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Selective != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Selective != null)
                {

                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 2)) != 0)
                {
                    Selective = reader.ReadTrue();
                }

            }

            public override string ToString()
            {
                return string.Format("(ReplyKeyboardHideType Selective:{0})", Selective);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Selective": return Selective;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Selective": return true;
                    default: return false;
                }
            }
        }

        public class ReplyKeyboardForceReplyType : ReplyMarkup
        {
            public override Types ConstructorCode => Types.ReplyKeyboardForceReplyType;

            public True SingleUse;
            public True Selective;

            public ReplyKeyboardForceReplyType() { }

            /// <summary>
            /// The following arguments can be null: SingleUse, Selective
            /// </summary>
            /// <param name="SingleUse">Can be null</param>
            /// <param name="Selective">Can be null</param>
            public ReplyKeyboardForceReplyType(True SingleUse, True Selective)
            {
                this.SingleUse = SingleUse;
                this.Selective = Selective;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (SingleUse != null ? 1 << 1 : 0) |
                    (Selective != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (SingleUse != null)
                {

                }

                if (Selective != null)
                {

                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 1)) != 0)
                {
                    SingleUse = reader.ReadTrue();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    Selective = reader.ReadTrue();
                }

            }

            public override string ToString()
            {
                return string.Format("(ReplyKeyboardForceReplyType SingleUse:{0} Selective:{1})", SingleUse, Selective);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "SingleUse": return SingleUse;
                        case "Selective": return Selective;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "SingleUse":
                    case "Selective": return true;
                    default: return false;
                }
            }
        }

        public class ReplyKeyboardMarkupType : ReplyMarkup
        {
            public override Types ConstructorCode => Types.ReplyKeyboardMarkupType;

            public True Resize;
            public True SingleUse;
            public True Selective;
            public List<KeyboardButtonRow> Rows;

            public ReplyKeyboardMarkupType() { }

            /// <summary>
            /// The following arguments can be null: Resize, SingleUse, Selective
            /// </summary>
            /// <param name="Resize">Can be null</param>
            /// <param name="SingleUse">Can be null</param>
            /// <param name="Selective">Can be null</param>
            /// <param name="Rows">Can NOT be null</param>
            public ReplyKeyboardMarkupType(True Resize, True SingleUse, True Selective, List<KeyboardButtonRow> Rows)
            {
                this.Resize = Resize;
                this.SingleUse = SingleUse;
                this.Selective = Selective;
                this.Rows = Rows;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Resize != null ? 1 << 0 : 0) |
                    (SingleUse != null ? 1 << 1 : 0) |
                    (Selective != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Resize != null)
                {

                }

                if (SingleUse != null)
                {

                }

                if (Selective != null)
                {

                }

                writer.Write(0x1cb5c415); // vector code
                writer.Write(Rows.Count);
                foreach (KeyboardButtonRow RowsElement in Rows)
                    RowsElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    Resize = reader.ReadTrue();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    SingleUse = reader.ReadTrue();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    Selective = reader.ReadTrue();
                }

                reader.ReadInt32(); // vector code
                int RowsLength = reader.ReadInt32();
                Rows = new List<KeyboardButtonRow>(RowsLength);
                for (int RowsIndex = 0; RowsIndex < RowsLength; RowsIndex++)
                    Rows.Add(reader.Read<KeyboardButtonRow>());
            }

            public override string ToString()
            {
                return string.Format("(ReplyKeyboardMarkupType Resize:{0} SingleUse:{1} Selective:{2} Rows:{3})", Resize, SingleUse, Selective, Rows);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Resize": return Resize;
                        case "SingleUse": return SingleUse;
                        case "Selective": return Selective;
                        case "Rows": return Rows;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Resize":
                    case "SingleUse":
                    case "Selective":
                    case "Rows": return true;
                    default: return false;
                }
            }
        }

        public class ReplyInlineMarkupType : ReplyMarkup
        {
            public override Types ConstructorCode => Types.ReplyInlineMarkupType;

            public List<KeyboardButtonRow> Rows;

            public ReplyInlineMarkupType() { }

            public ReplyInlineMarkupType(List<KeyboardButtonRow> Rows)
            {
                this.Rows = Rows;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Rows.Count);
                foreach (KeyboardButtonRow RowsElement in Rows)
                    RowsElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int RowsLength = reader.ReadInt32();
                Rows = new List<KeyboardButtonRow>(RowsLength);
                for (int RowsIndex = 0; RowsIndex < RowsLength; RowsIndex++)
                    Rows.Add(reader.Read<KeyboardButtonRow>());
            }

            public override string ToString()
            {
                return string.Format("(ReplyInlineMarkupType Rows:{0})", Rows);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Rows": return Rows;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Rows": return true;
                    default: return false;
                }
            }
        }

        public class HelpAppChangelogEmptyType : HelpAppChangelog
        {
            public override Types ConstructorCode => Types.HelpAppChangelogEmptyType;

            public HelpAppChangelogEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(HelpAppChangelogEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class HelpAppChangelogType : HelpAppChangelog
        {
            public override Types ConstructorCode => Types.HelpAppChangelogType;

            public string Text;

            public HelpAppChangelogType() { }

            public HelpAppChangelogType(string Text)
            {
                this.Text = Text;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Text);
            }

            public override void Read(TBinaryReader reader)
            {
                Text = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(HelpAppChangelogType Text:{0})", Text);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Text": return Text;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Text": return true;
                    default: return false;
                }
            }
        }

        public class MessageEntityUnknownType : MessageEntity
        {
            public override Types ConstructorCode => Types.MessageEntityUnknownType;

            public int Offset;
            public int Length;

            public MessageEntityUnknownType() { }

            public MessageEntityUnknownType(int Offset, int Length)
            {
                this.Offset = Offset;
                this.Length = Length;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offset);
                writer.Write(Length);
            }

            public override void Read(TBinaryReader reader)
            {
                Offset = reader.ReadInt32();
                Length = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageEntityUnknownType Offset:{0} Length:{1})", Offset, Length);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Offset": return Offset;
                        case "Length": return Length;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Offset":
                    case "Length": return true;
                    default: return false;
                }
            }
        }

        public class MessageEntityMentionType : MessageEntity
        {
            public override Types ConstructorCode => Types.MessageEntityMentionType;

            public int Offset;
            public int Length;

            public MessageEntityMentionType() { }

            public MessageEntityMentionType(int Offset, int Length)
            {
                this.Offset = Offset;
                this.Length = Length;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offset);
                writer.Write(Length);
            }

            public override void Read(TBinaryReader reader)
            {
                Offset = reader.ReadInt32();
                Length = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageEntityMentionType Offset:{0} Length:{1})", Offset, Length);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Offset": return Offset;
                        case "Length": return Length;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Offset":
                    case "Length": return true;
                    default: return false;
                }
            }
        }

        public class MessageEntityHashtagType : MessageEntity
        {
            public override Types ConstructorCode => Types.MessageEntityHashtagType;

            public int Offset;
            public int Length;

            public MessageEntityHashtagType() { }

            public MessageEntityHashtagType(int Offset, int Length)
            {
                this.Offset = Offset;
                this.Length = Length;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offset);
                writer.Write(Length);
            }

            public override void Read(TBinaryReader reader)
            {
                Offset = reader.ReadInt32();
                Length = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageEntityHashtagType Offset:{0} Length:{1})", Offset, Length);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Offset": return Offset;
                        case "Length": return Length;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Offset":
                    case "Length": return true;
                    default: return false;
                }
            }
        }

        public class MessageEntityBotCommandType : MessageEntity
        {
            public override Types ConstructorCode => Types.MessageEntityBotCommandType;

            public int Offset;
            public int Length;

            public MessageEntityBotCommandType() { }

            public MessageEntityBotCommandType(int Offset, int Length)
            {
                this.Offset = Offset;
                this.Length = Length;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offset);
                writer.Write(Length);
            }

            public override void Read(TBinaryReader reader)
            {
                Offset = reader.ReadInt32();
                Length = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageEntityBotCommandType Offset:{0} Length:{1})", Offset, Length);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Offset": return Offset;
                        case "Length": return Length;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Offset":
                    case "Length": return true;
                    default: return false;
                }
            }
        }

        public class MessageEntityUrlType : MessageEntity
        {
            public override Types ConstructorCode => Types.MessageEntityUrlType;

            public int Offset;
            public int Length;

            public MessageEntityUrlType() { }

            public MessageEntityUrlType(int Offset, int Length)
            {
                this.Offset = Offset;
                this.Length = Length;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offset);
                writer.Write(Length);
            }

            public override void Read(TBinaryReader reader)
            {
                Offset = reader.ReadInt32();
                Length = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageEntityUrlType Offset:{0} Length:{1})", Offset, Length);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Offset": return Offset;
                        case "Length": return Length;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Offset":
                    case "Length": return true;
                    default: return false;
                }
            }
        }

        public class MessageEntityEmailType : MessageEntity
        {
            public override Types ConstructorCode => Types.MessageEntityEmailType;

            public int Offset;
            public int Length;

            public MessageEntityEmailType() { }

            public MessageEntityEmailType(int Offset, int Length)
            {
                this.Offset = Offset;
                this.Length = Length;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offset);
                writer.Write(Length);
            }

            public override void Read(TBinaryReader reader)
            {
                Offset = reader.ReadInt32();
                Length = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageEntityEmailType Offset:{0} Length:{1})", Offset, Length);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Offset": return Offset;
                        case "Length": return Length;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Offset":
                    case "Length": return true;
                    default: return false;
                }
            }
        }

        public class MessageEntityBoldType : MessageEntity
        {
            public override Types ConstructorCode => Types.MessageEntityBoldType;

            public int Offset;
            public int Length;

            public MessageEntityBoldType() { }

            public MessageEntityBoldType(int Offset, int Length)
            {
                this.Offset = Offset;
                this.Length = Length;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offset);
                writer.Write(Length);
            }

            public override void Read(TBinaryReader reader)
            {
                Offset = reader.ReadInt32();
                Length = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageEntityBoldType Offset:{0} Length:{1})", Offset, Length);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Offset": return Offset;
                        case "Length": return Length;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Offset":
                    case "Length": return true;
                    default: return false;
                }
            }
        }

        public class MessageEntityItalicType : MessageEntity
        {
            public override Types ConstructorCode => Types.MessageEntityItalicType;

            public int Offset;
            public int Length;

            public MessageEntityItalicType() { }

            public MessageEntityItalicType(int Offset, int Length)
            {
                this.Offset = Offset;
                this.Length = Length;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offset);
                writer.Write(Length);
            }

            public override void Read(TBinaryReader reader)
            {
                Offset = reader.ReadInt32();
                Length = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageEntityItalicType Offset:{0} Length:{1})", Offset, Length);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Offset": return Offset;
                        case "Length": return Length;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Offset":
                    case "Length": return true;
                    default: return false;
                }
            }
        }

        public class MessageEntityCodeType : MessageEntity
        {
            public override Types ConstructorCode => Types.MessageEntityCodeType;

            public int Offset;
            public int Length;

            public MessageEntityCodeType() { }

            public MessageEntityCodeType(int Offset, int Length)
            {
                this.Offset = Offset;
                this.Length = Length;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offset);
                writer.Write(Length);
            }

            public override void Read(TBinaryReader reader)
            {
                Offset = reader.ReadInt32();
                Length = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageEntityCodeType Offset:{0} Length:{1})", Offset, Length);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Offset": return Offset;
                        case "Length": return Length;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Offset":
                    case "Length": return true;
                    default: return false;
                }
            }
        }

        public class MessageEntityPreType : MessageEntity
        {
            public override Types ConstructorCode => Types.MessageEntityPreType;

            public int Offset;
            public int Length;
            public string Language;

            public MessageEntityPreType() { }

            public MessageEntityPreType(int Offset, int Length, string Language)
            {
                this.Offset = Offset;
                this.Length = Length;
                this.Language = Language;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offset);
                writer.Write(Length);
                writer.Write(Language);
            }

            public override void Read(TBinaryReader reader)
            {
                Offset = reader.ReadInt32();
                Length = reader.ReadInt32();
                Language = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(MessageEntityPreType Offset:{0} Length:{1} Language:{2})", Offset, Length, Language);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Offset": return Offset;
                        case "Length": return Length;
                        case "Language": return Language;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Offset":
                    case "Length":
                    case "Language": return true;
                    default: return false;
                }
            }
        }

        public class MessageEntityTextUrlType : MessageEntity
        {
            public override Types ConstructorCode => Types.MessageEntityTextUrlType;

            public int Offset;
            public int Length;
            public string Url;

            public MessageEntityTextUrlType() { }

            public MessageEntityTextUrlType(int Offset, int Length, string Url)
            {
                this.Offset = Offset;
                this.Length = Length;
                this.Url = Url;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offset);
                writer.Write(Length);
                writer.Write(Url);
            }

            public override void Read(TBinaryReader reader)
            {
                Offset = reader.ReadInt32();
                Length = reader.ReadInt32();
                Url = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(MessageEntityTextUrlType Offset:{0} Length:{1} Url:{2})", Offset, Length, Url);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Offset": return Offset;
                        case "Length": return Length;
                        case "Url": return Url;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Offset":
                    case "Length":
                    case "Url": return true;
                    default: return false;
                }
            }
        }

        public class MessageEntityMentionNameType : MessageEntity
        {
            public override Types ConstructorCode => Types.MessageEntityMentionNameType;

            public int Offset;
            public int Length;
            public int UserId;

            public MessageEntityMentionNameType() { }

            public MessageEntityMentionNameType(int Offset, int Length, int UserId)
            {
                this.Offset = Offset;
                this.Length = Length;
                this.UserId = UserId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offset);
                writer.Write(Length);
                writer.Write(UserId);
            }

            public override void Read(TBinaryReader reader)
            {
                Offset = reader.ReadInt32();
                Length = reader.ReadInt32();
                UserId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageEntityMentionNameType Offset:{0} Length:{1} UserId:{2})", Offset, Length, UserId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Offset": return Offset;
                        case "Length": return Length;
                        case "UserId": return UserId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Offset":
                    case "Length":
                    case "UserId": return true;
                    default: return false;
                }
            }
        }

        public class InputMessageEntityMentionNameType : MessageEntity
        {
            public override Types ConstructorCode => Types.InputMessageEntityMentionNameType;

            public int Offset;
            public int Length;
            public InputUser UserId;

            public InputMessageEntityMentionNameType() { }

            public InputMessageEntityMentionNameType(int Offset, int Length, InputUser UserId)
            {
                this.Offset = Offset;
                this.Length = Length;
                this.UserId = UserId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Offset);
                writer.Write(Length);
                UserId.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Offset = reader.ReadInt32();
                Length = reader.ReadInt32();
                UserId = reader.Read<InputUser>();
            }

            public override string ToString()
            {
                return string.Format("(InputMessageEntityMentionNameType Offset:{0} Length:{1} UserId:{2})", Offset, Length, UserId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Offset": return Offset;
                        case "Length": return Length;
                        case "UserId": return UserId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Offset":
                    case "Length":
                    case "UserId": return true;
                    default: return false;
                }
            }
        }

        public class InputChannelEmptyType : InputChannel
        {
            public override Types ConstructorCode => Types.InputChannelEmptyType;

            public InputChannelEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(InputChannelEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class InputChannelType : InputChannel
        {
            public override Types ConstructorCode => Types.InputChannelType;

            public int ChannelId;
            public long AccessHash;

            public InputChannelType() { }

            public InputChannelType(int ChannelId, long AccessHash)
            {
                this.ChannelId = ChannelId;
                this.AccessHash = AccessHash;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(ChannelId);
                writer.Write(AccessHash);
            }

            public override void Read(TBinaryReader reader)
            {
                ChannelId = reader.ReadInt32();
                AccessHash = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(InputChannelType ChannelId:{0} AccessHash:{1})", ChannelId, AccessHash);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ChannelId": return ChannelId;
                        case "AccessHash": return AccessHash;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ChannelId":
                    case "AccessHash": return true;
                    default: return false;
                }
            }
        }

        public class ContactsResolvedPeerType : ContactsResolvedPeer
        {
            public override Types ConstructorCode => Types.ContactsResolvedPeerType;

            public Peer Peer;
            public List<Chat> Chats;
            public List<User> Users;

            public ContactsResolvedPeerType() { }

            public ContactsResolvedPeerType(Peer Peer, List<Chat> Chats, List<User> Users)
            {
                this.Peer = Peer;
                this.Chats = Chats;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Peer = reader.Read<Peer>();
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(ContactsResolvedPeerType Peer:{0} Chats:{1} Users:{2})", Peer, Chats, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Peer": return Peer;
                        case "Chats": return Chats;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Peer":
                    case "Chats":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class MessageRangeType : MessageRange
        {
            public override Types ConstructorCode => Types.MessageRangeType;

            public int MinId;
            public int MaxId;

            public MessageRangeType() { }

            public MessageRangeType(int MinId, int MaxId)
            {
                this.MinId = MinId;
                this.MaxId = MaxId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(MinId);
                writer.Write(MaxId);
            }

            public override void Read(TBinaryReader reader)
            {
                MinId = reader.ReadInt32();
                MaxId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(MessageRangeType MinId:{0} MaxId:{1})", MinId, MaxId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "MinId": return MinId;
                        case "MaxId": return MaxId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "MinId":
                    case "MaxId": return true;
                    default: return false;
                }
            }
        }

        public class UpdatesChannelDifferenceEmptyType : UpdatesChannelDifference
        {
            public override Types ConstructorCode => Types.UpdatesChannelDifferenceEmptyType;

            public True Final;
            public int Pts;
            public int? Timeout;

            public UpdatesChannelDifferenceEmptyType() { }

            /// <summary>
            /// The following arguments can be null: Final, Timeout
            /// </summary>
            /// <param name="Final">Can be null</param>
            /// <param name="Pts">Can NOT be null</param>
            /// <param name="Timeout">Can be null</param>
            public UpdatesChannelDifferenceEmptyType(True Final, int Pts, int? Timeout)
            {
                this.Final = Final;
                this.Pts = Pts;
                this.Timeout = Timeout;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Final != null ? 1 << 0 : 0) |
                    (Timeout != null ? 1 << 1 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Final != null)
                {

                }

                writer.Write(Pts);
                if (Timeout != null)
                {
                    writer.Write(Timeout.Value);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    Final = reader.ReadTrue();
                }

                Pts = reader.ReadInt32();
                if ((flags & (1 << 1)) != 0)
                {
                    Timeout = reader.ReadInt32();
                }

            }

            public override string ToString()
            {
                return string.Format("(UpdatesChannelDifferenceEmptyType Final:{0} Pts:{1} Timeout:{2})", Final, Pts, Timeout);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Final": return Final;
                        case "Pts": return Pts;
                        case "Timeout": return Timeout;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Final":
                    case "Pts":
                    case "Timeout": return true;
                    default: return false;
                }
            }
        }

        public class UpdatesChannelDifferenceTooLongType : UpdatesChannelDifference
        {
            public override Types ConstructorCode => Types.UpdatesChannelDifferenceTooLongType;

            public True Final;
            public int Pts;
            public int? Timeout;
            public int TopMessage;
            public int ReadInboxMaxId;
            public int ReadOutboxMaxId;
            public int UnreadCount;
            public List<Message> Messages;
            public List<Chat> Chats;
            public List<User> Users;

            public UpdatesChannelDifferenceTooLongType() { }

            /// <summary>
            /// The following arguments can be null: Final, Timeout
            /// </summary>
            /// <param name="Final">Can be null</param>
            /// <param name="Pts">Can NOT be null</param>
            /// <param name="Timeout">Can be null</param>
            /// <param name="TopMessage">Can NOT be null</param>
            /// <param name="ReadInboxMaxId">Can NOT be null</param>
            /// <param name="ReadOutboxMaxId">Can NOT be null</param>
            /// <param name="UnreadCount">Can NOT be null</param>
            /// <param name="Messages">Can NOT be null</param>
            /// <param name="Chats">Can NOT be null</param>
            /// <param name="Users">Can NOT be null</param>
            public UpdatesChannelDifferenceTooLongType(True Final, int Pts, int? Timeout, int TopMessage, int ReadInboxMaxId, int ReadOutboxMaxId, int UnreadCount, List<Message> Messages, List<Chat> Chats, List<User> Users)
            {
                this.Final = Final;
                this.Pts = Pts;
                this.Timeout = Timeout;
                this.TopMessage = TopMessage;
                this.ReadInboxMaxId = ReadInboxMaxId;
                this.ReadOutboxMaxId = ReadOutboxMaxId;
                this.UnreadCount = UnreadCount;
                this.Messages = Messages;
                this.Chats = Chats;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Final != null ? 1 << 0 : 0) |
                    (Timeout != null ? 1 << 1 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Final != null)
                {

                }

                writer.Write(Pts);
                if (Timeout != null)
                {
                    writer.Write(Timeout.Value);
                }

                writer.Write(TopMessage);
                writer.Write(ReadInboxMaxId);
                writer.Write(ReadOutboxMaxId);
                writer.Write(UnreadCount);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Messages.Count);
                foreach (Message MessagesElement in Messages)
                    MessagesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    Final = reader.ReadTrue();
                }

                Pts = reader.ReadInt32();
                if ((flags & (1 << 1)) != 0)
                {
                    Timeout = reader.ReadInt32();
                }

                TopMessage = reader.ReadInt32();
                ReadInboxMaxId = reader.ReadInt32();
                ReadOutboxMaxId = reader.ReadInt32();
                UnreadCount = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int MessagesLength = reader.ReadInt32();
                Messages = new List<Message>(MessagesLength);
                for (int MessagesIndex = 0; MessagesIndex < MessagesLength; MessagesIndex++)
                    Messages.Add(reader.Read<Message>());
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(UpdatesChannelDifferenceTooLongType Final:{0} Pts:{1} Timeout:{2} TopMessage:{3} ReadInboxMaxId:{4} ReadOutboxMaxId:{5} UnreadCount:{6} Messages:{7} Chats:{8} Users:{9})", Final, Pts, Timeout, TopMessage, ReadInboxMaxId, ReadOutboxMaxId, UnreadCount, Messages, Chats, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Final": return Final;
                        case "Pts": return Pts;
                        case "Timeout": return Timeout;
                        case "TopMessage": return TopMessage;
                        case "ReadInboxMaxId": return ReadInboxMaxId;
                        case "ReadOutboxMaxId": return ReadOutboxMaxId;
                        case "UnreadCount": return UnreadCount;
                        case "Messages": return Messages;
                        case "Chats": return Chats;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Final":
                    case "Pts":
                    case "Timeout":
                    case "TopMessage":
                    case "ReadInboxMaxId":
                    case "ReadOutboxMaxId":
                    case "UnreadCount":
                    case "Messages":
                    case "Chats":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class UpdatesChannelDifferenceType : UpdatesChannelDifference
        {
            public override Types ConstructorCode => Types.UpdatesChannelDifferenceType;

            public True Final;
            public int Pts;
            public int? Timeout;
            public List<Message> NewMessages;
            public List<Update> OtherUpdates;
            public List<Chat> Chats;
            public List<User> Users;

            public UpdatesChannelDifferenceType() { }

            /// <summary>
            /// The following arguments can be null: Final, Timeout
            /// </summary>
            /// <param name="Final">Can be null</param>
            /// <param name="Pts">Can NOT be null</param>
            /// <param name="Timeout">Can be null</param>
            /// <param name="NewMessages">Can NOT be null</param>
            /// <param name="OtherUpdates">Can NOT be null</param>
            /// <param name="Chats">Can NOT be null</param>
            /// <param name="Users">Can NOT be null</param>
            public UpdatesChannelDifferenceType(True Final, int Pts, int? Timeout, List<Message> NewMessages, List<Update> OtherUpdates, List<Chat> Chats, List<User> Users)
            {
                this.Final = Final;
                this.Pts = Pts;
                this.Timeout = Timeout;
                this.NewMessages = NewMessages;
                this.OtherUpdates = OtherUpdates;
                this.Chats = Chats;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Final != null ? 1 << 0 : 0) |
                    (Timeout != null ? 1 << 1 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Final != null)
                {

                }

                writer.Write(Pts);
                if (Timeout != null)
                {
                    writer.Write(Timeout.Value);
                }

                writer.Write(0x1cb5c415); // vector code
                writer.Write(NewMessages.Count);
                foreach (Message NewMessagesElement in NewMessages)
                    NewMessagesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(OtherUpdates.Count);
                foreach (Update OtherUpdatesElement in OtherUpdates)
                    OtherUpdatesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    Final = reader.ReadTrue();
                }

                Pts = reader.ReadInt32();
                if ((flags & (1 << 1)) != 0)
                {
                    Timeout = reader.ReadInt32();
                }

                reader.ReadInt32(); // vector code
                int NewMessagesLength = reader.ReadInt32();
                NewMessages = new List<Message>(NewMessagesLength);
                for (int NewMessagesIndex = 0; NewMessagesIndex < NewMessagesLength; NewMessagesIndex++)
                    NewMessages.Add(reader.Read<Message>());
                reader.ReadInt32(); // vector code
                int OtherUpdatesLength = reader.ReadInt32();
                OtherUpdates = new List<Update>(OtherUpdatesLength);
                for (int OtherUpdatesIndex = 0; OtherUpdatesIndex < OtherUpdatesLength; OtherUpdatesIndex++)
                    OtherUpdates.Add(reader.Read<Update>());
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(UpdatesChannelDifferenceType Final:{0} Pts:{1} Timeout:{2} NewMessages:{3} OtherUpdates:{4} Chats:{5} Users:{6})", Final, Pts, Timeout, NewMessages, OtherUpdates, Chats, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Final": return Final;
                        case "Pts": return Pts;
                        case "Timeout": return Timeout;
                        case "NewMessages": return NewMessages;
                        case "OtherUpdates": return OtherUpdates;
                        case "Chats": return Chats;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Final":
                    case "Pts":
                    case "Timeout":
                    case "NewMessages":
                    case "OtherUpdates":
                    case "Chats":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class ChannelMessagesFilterEmptyType : ChannelMessagesFilter
        {
            public override Types ConstructorCode => Types.ChannelMessagesFilterEmptyType;

            public ChannelMessagesFilterEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ChannelMessagesFilterEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ChannelMessagesFilterType : ChannelMessagesFilter
        {
            public override Types ConstructorCode => Types.ChannelMessagesFilterType;

            public True ExcludeNewMessages;
            public List<MessageRange> Ranges;

            public ChannelMessagesFilterType() { }

            /// <summary>
            /// The following arguments can be null: ExcludeNewMessages
            /// </summary>
            /// <param name="ExcludeNewMessages">Can be null</param>
            /// <param name="Ranges">Can NOT be null</param>
            public ChannelMessagesFilterType(True ExcludeNewMessages, List<MessageRange> Ranges)
            {
                this.ExcludeNewMessages = ExcludeNewMessages;
                this.Ranges = Ranges;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (ExcludeNewMessages != null ? 1 << 1 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (ExcludeNewMessages != null)
                {

                }

                writer.Write(0x1cb5c415); // vector code
                writer.Write(Ranges.Count);
                foreach (MessageRange RangesElement in Ranges)
                    RangesElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 1)) != 0)
                {
                    ExcludeNewMessages = reader.ReadTrue();
                }

                reader.ReadInt32(); // vector code
                int RangesLength = reader.ReadInt32();
                Ranges = new List<MessageRange>(RangesLength);
                for (int RangesIndex = 0; RangesIndex < RangesLength; RangesIndex++)
                    Ranges.Add(reader.Read<MessageRange>());
            }

            public override string ToString()
            {
                return string.Format("(ChannelMessagesFilterType ExcludeNewMessages:{0} Ranges:{1})", ExcludeNewMessages, Ranges);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "ExcludeNewMessages": return ExcludeNewMessages;
                        case "Ranges": return Ranges;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "ExcludeNewMessages":
                    case "Ranges": return true;
                    default: return false;
                }
            }
        }

        public class ChannelParticipantType : ChannelParticipant
        {
            public override Types ConstructorCode => Types.ChannelParticipantType;

            public int UserId;
            public int Date;

            public ChannelParticipantType() { }

            public ChannelParticipantType(int UserId, int Date)
            {
                this.UserId = UserId;
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(ChannelParticipantType UserId:{0} Date:{1})", UserId, Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        public class ChannelParticipantSelfType : ChannelParticipant
        {
            public override Types ConstructorCode => Types.ChannelParticipantSelfType;

            public int UserId;
            public int InviterId;
            public int Date;

            public ChannelParticipantSelfType() { }

            public ChannelParticipantSelfType(int UserId, int InviterId, int Date)
            {
                this.UserId = UserId;
                this.InviterId = InviterId;
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(InviterId);
                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                InviterId = reader.ReadInt32();
                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(ChannelParticipantSelfType UserId:{0} InviterId:{1} Date:{2})", UserId, InviterId, Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "InviterId": return InviterId;
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "InviterId":
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        public class ChannelParticipantModeratorType : ChannelParticipant
        {
            public override Types ConstructorCode => Types.ChannelParticipantModeratorType;

            public int UserId;
            public int InviterId;
            public int Date;

            public ChannelParticipantModeratorType() { }

            public ChannelParticipantModeratorType(int UserId, int InviterId, int Date)
            {
                this.UserId = UserId;
                this.InviterId = InviterId;
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(InviterId);
                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                InviterId = reader.ReadInt32();
                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(ChannelParticipantModeratorType UserId:{0} InviterId:{1} Date:{2})", UserId, InviterId, Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "InviterId": return InviterId;
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "InviterId":
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        public class ChannelParticipantEditorType : ChannelParticipant
        {
            public override Types ConstructorCode => Types.ChannelParticipantEditorType;

            public int UserId;
            public int InviterId;
            public int Date;

            public ChannelParticipantEditorType() { }

            public ChannelParticipantEditorType(int UserId, int InviterId, int Date)
            {
                this.UserId = UserId;
                this.InviterId = InviterId;
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(InviterId);
                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                InviterId = reader.ReadInt32();
                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(ChannelParticipantEditorType UserId:{0} InviterId:{1} Date:{2})", UserId, InviterId, Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "InviterId": return InviterId;
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "InviterId":
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        public class ChannelParticipantKickedType : ChannelParticipant
        {
            public override Types ConstructorCode => Types.ChannelParticipantKickedType;

            public int UserId;
            public int KickedBy;
            public int Date;

            public ChannelParticipantKickedType() { }

            public ChannelParticipantKickedType(int UserId, int KickedBy, int Date)
            {
                this.UserId = UserId;
                this.KickedBy = KickedBy;
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
                writer.Write(KickedBy);
                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
                KickedBy = reader.ReadInt32();
                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(ChannelParticipantKickedType UserId:{0} KickedBy:{1} Date:{2})", UserId, KickedBy, Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        case "KickedBy": return KickedBy;
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId":
                    case "KickedBy":
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        public class ChannelParticipantCreatorType : ChannelParticipant
        {
            public override Types ConstructorCode => Types.ChannelParticipantCreatorType;

            public int UserId;

            public ChannelParticipantCreatorType() { }

            public ChannelParticipantCreatorType(int UserId)
            {
                this.UserId = UserId;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(UserId);
            }

            public override void Read(TBinaryReader reader)
            {
                UserId = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(ChannelParticipantCreatorType UserId:{0})", UserId);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "UserId": return UserId;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "UserId": return true;
                    default: return false;
                }
            }
        }

        public class ChannelParticipantsRecentType : ChannelParticipantsFilter
        {
            public override Types ConstructorCode => Types.ChannelParticipantsRecentType;

            public ChannelParticipantsRecentType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ChannelParticipantsRecentType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ChannelParticipantsAdminsType : ChannelParticipantsFilter
        {
            public override Types ConstructorCode => Types.ChannelParticipantsAdminsType;

            public ChannelParticipantsAdminsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ChannelParticipantsAdminsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ChannelParticipantsKickedType : ChannelParticipantsFilter
        {
            public override Types ConstructorCode => Types.ChannelParticipantsKickedType;

            public ChannelParticipantsKickedType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ChannelParticipantsKickedType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ChannelParticipantsBotsType : ChannelParticipantsFilter
        {
            public override Types ConstructorCode => Types.ChannelParticipantsBotsType;

            public ChannelParticipantsBotsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ChannelParticipantsBotsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ChannelRoleEmptyType : ChannelParticipantRole
        {
            public override Types ConstructorCode => Types.ChannelRoleEmptyType;

            public ChannelRoleEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ChannelRoleEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ChannelRoleModeratorType : ChannelParticipantRole
        {
            public override Types ConstructorCode => Types.ChannelRoleModeratorType;

            public ChannelRoleModeratorType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ChannelRoleModeratorType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ChannelRoleEditorType : ChannelParticipantRole
        {
            public override Types ConstructorCode => Types.ChannelRoleEditorType;

            public ChannelRoleEditorType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ChannelRoleEditorType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ChannelsChannelParticipantsType : ChannelsChannelParticipants
        {
            public override Types ConstructorCode => Types.ChannelsChannelParticipantsType;

            public int Count;
            public List<ChannelParticipant> Participants;
            public List<User> Users;

            public ChannelsChannelParticipantsType() { }

            public ChannelsChannelParticipantsType(int Count, List<ChannelParticipant> Participants, List<User> Users)
            {
                this.Count = Count;
                this.Participants = Participants;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Count);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Participants.Count);
                foreach (ChannelParticipant ParticipantsElement in Participants)
                    ParticipantsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Count = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int ParticipantsLength = reader.ReadInt32();
                Participants = new List<ChannelParticipant>(ParticipantsLength);
                for (int ParticipantsIndex = 0; ParticipantsIndex < ParticipantsLength; ParticipantsIndex++)
                    Participants.Add(reader.Read<ChannelParticipant>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(ChannelsChannelParticipantsType Count:{0} Participants:{1} Users:{2})", Count, Participants, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Count": return Count;
                        case "Participants": return Participants;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Count":
                    case "Participants":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class ChannelsChannelParticipantType : ChannelsChannelParticipant
        {
            public override Types ConstructorCode => Types.ChannelsChannelParticipantType;

            public ChannelParticipant Participant;
            public List<User> Users;

            public ChannelsChannelParticipantType() { }

            public ChannelsChannelParticipantType(ChannelParticipant Participant, List<User> Users)
            {
                this.Participant = Participant;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Participant.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Participant = reader.Read<ChannelParticipant>();
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(ChannelsChannelParticipantType Participant:{0} Users:{1})", Participant, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Participant": return Participant;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Participant":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class HelpTermsOfServiceType : HelpTermsOfService
        {
            public override Types ConstructorCode => Types.HelpTermsOfServiceType;

            public string Text;

            public HelpTermsOfServiceType() { }

            public HelpTermsOfServiceType(string Text)
            {
                this.Text = Text;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Text);
            }

            public override void Read(TBinaryReader reader)
            {
                Text = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(HelpTermsOfServiceType Text:{0})", Text);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Text": return Text;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Text": return true;
                    default: return false;
                }
            }
        }

        public class FoundGifType : FoundGif
        {
            public override Types ConstructorCode => Types.FoundGifType;

            public string Url;
            public string ThumbUrl;
            public string ContentUrl;
            public string ContentType;
            public int W;
            public int H;

            public FoundGifType() { }

            public FoundGifType(string Url, string ThumbUrl, string ContentUrl, string ContentType, int W, int H)
            {
                this.Url = Url;
                this.ThumbUrl = ThumbUrl;
                this.ContentUrl = ContentUrl;
                this.ContentType = ContentType;
                this.W = W;
                this.H = H;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Url);
                writer.Write(ThumbUrl);
                writer.Write(ContentUrl);
                writer.Write(ContentType);
                writer.Write(W);
                writer.Write(H);
            }

            public override void Read(TBinaryReader reader)
            {
                Url = reader.ReadString();
                ThumbUrl = reader.ReadString();
                ContentUrl = reader.ReadString();
                ContentType = reader.ReadString();
                W = reader.ReadInt32();
                H = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(FoundGifType Url:{0} ThumbUrl:{1} ContentUrl:{2} ContentType:{3} W:{4} H:{5})", Url, ThumbUrl, ContentUrl, ContentType, W, H);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Url": return Url;
                        case "ThumbUrl": return ThumbUrl;
                        case "ContentUrl": return ContentUrl;
                        case "ContentType": return ContentType;
                        case "W": return W;
                        case "H": return H;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Url":
                    case "ThumbUrl":
                    case "ContentUrl":
                    case "ContentType":
                    case "W":
                    case "H": return true;
                    default: return false;
                }
            }
        }

        public class FoundGifCachedType : FoundGif
        {
            public override Types ConstructorCode => Types.FoundGifCachedType;

            public string Url;
            public Photo Photo;
            public Document Document;

            public FoundGifCachedType() { }

            public FoundGifCachedType(string Url, Photo Photo, Document Document)
            {
                this.Url = Url;
                this.Photo = Photo;
                this.Document = Document;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Url);
                Photo.Write(writer);
                Document.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Url = reader.ReadString();
                Photo = reader.Read<Photo>();
                Document = reader.Read<Document>();
            }

            public override string ToString()
            {
                return string.Format("(FoundGifCachedType Url:{0} Photo:{1} Document:{2})", Url, Photo, Document);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Url": return Url;
                        case "Photo": return Photo;
                        case "Document": return Document;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Url":
                    case "Photo":
                    case "Document": return true;
                    default: return false;
                }
            }
        }

        public class MessagesFoundGifsType : MessagesFoundGifs
        {
            public override Types ConstructorCode => Types.MessagesFoundGifsType;

            public int NextOffset;
            public List<FoundGif> Results;

            public MessagesFoundGifsType() { }

            public MessagesFoundGifsType(int NextOffset, List<FoundGif> Results)
            {
                this.NextOffset = NextOffset;
                this.Results = Results;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(NextOffset);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Results.Count);
                foreach (FoundGif ResultsElement in Results)
                    ResultsElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                NextOffset = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int ResultsLength = reader.ReadInt32();
                Results = new List<FoundGif>(ResultsLength);
                for (int ResultsIndex = 0; ResultsIndex < ResultsLength; ResultsIndex++)
                    Results.Add(reader.Read<FoundGif>());
            }

            public override string ToString()
            {
                return string.Format("(MessagesFoundGifsType NextOffset:{0} Results:{1})", NextOffset, Results);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "NextOffset": return NextOffset;
                        case "Results": return Results;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "NextOffset":
                    case "Results": return true;
                    default: return false;
                }
            }
        }

        public class MessagesSavedGifsNotModifiedType : MessagesSavedGifs
        {
            public override Types ConstructorCode => Types.MessagesSavedGifsNotModifiedType;

            public MessagesSavedGifsNotModifiedType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(MessagesSavedGifsNotModifiedType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class MessagesSavedGifsType : MessagesSavedGifs
        {
            public override Types ConstructorCode => Types.MessagesSavedGifsType;

            public int Hash;
            public List<Document> Gifs;

            public MessagesSavedGifsType() { }

            public MessagesSavedGifsType(int Hash, List<Document> Gifs)
            {
                this.Hash = Hash;
                this.Gifs = Gifs;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Hash);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Gifs.Count);
                foreach (Document GifsElement in Gifs)
                    GifsElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Hash = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int GifsLength = reader.ReadInt32();
                Gifs = new List<Document>(GifsLength);
                for (int GifsIndex = 0; GifsIndex < GifsLength; GifsIndex++)
                    Gifs.Add(reader.Read<Document>());
            }

            public override string ToString()
            {
                return string.Format("(MessagesSavedGifsType Hash:{0} Gifs:{1})", Hash, Gifs);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Hash": return Hash;
                        case "Gifs": return Gifs;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Hash":
                    case "Gifs": return true;
                    default: return false;
                }
            }
        }

        public class InputBotInlineMessageMediaAutoType : InputBotInlineMessage
        {
            public override Types ConstructorCode => Types.InputBotInlineMessageMediaAutoType;

            public string Caption;
            public ReplyMarkup ReplyMarkup;

            public InputBotInlineMessageMediaAutoType() { }

            /// <summary>
            /// The following arguments can be null: ReplyMarkup
            /// </summary>
            /// <param name="Caption">Can NOT be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            public InputBotInlineMessageMediaAutoType(string Caption, ReplyMarkup ReplyMarkup)
            {
                this.Caption = Caption;
                this.ReplyMarkup = ReplyMarkup;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (ReplyMarkup != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                writer.Write(Caption);
                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                Caption = reader.ReadString();
                if ((flags & (1 << 2)) != 0)
                {
                    ReplyMarkup = reader.Read<ReplyMarkup>();
                }

            }

            public override string ToString()
            {
                return string.Format("(InputBotInlineMessageMediaAutoType Caption:{0} ReplyMarkup:{1})", Caption, ReplyMarkup);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Caption": return Caption;
                        case "ReplyMarkup": return ReplyMarkup;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Caption":
                    case "ReplyMarkup": return true;
                    default: return false;
                }
            }
        }

        public class InputBotInlineMessageTextType : InputBotInlineMessage
        {
            public override Types ConstructorCode => Types.InputBotInlineMessageTextType;

            public True NoWebpage;
            public string Message;
            public List<MessageEntity> Entities;
            public ReplyMarkup ReplyMarkup;

            public InputBotInlineMessageTextType() { }

            /// <summary>
            /// The following arguments can be null: NoWebpage, Entities, ReplyMarkup
            /// </summary>
            /// <param name="NoWebpage">Can be null</param>
            /// <param name="Message">Can NOT be null</param>
            /// <param name="Entities">Can be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            public InputBotInlineMessageTextType(True NoWebpage, string Message, List<MessageEntity> Entities, ReplyMarkup ReplyMarkup)
            {
                this.NoWebpage = NoWebpage;
                this.Message = Message;
                this.Entities = Entities;
                this.ReplyMarkup = ReplyMarkup;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (NoWebpage != null ? 1 << 0 : 0) |
                    (Entities != null ? 1 << 1 : 0) |
                    (ReplyMarkup != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (NoWebpage != null)
                {

                }

                writer.Write(Message);
                if (Entities != null)
                {
                    writer.Write(0x1cb5c415); // vector code
                    writer.Write(Entities.Count);
                    foreach (MessageEntity EntitiesElement in Entities)
                        EntitiesElement.Write(writer);
                }

                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    NoWebpage = reader.ReadTrue();
                }

                Message = reader.ReadString();
                if ((flags & (1 << 1)) != 0)
                {
                    reader.ReadInt32(); // vector code
                    int EntitiesLength = reader.ReadInt32();
                    Entities = new List<MessageEntity>(EntitiesLength);
                    for (int EntitiesIndex = 0; EntitiesIndex < EntitiesLength; EntitiesIndex++)
                        Entities.Add(reader.Read<MessageEntity>());
                }

                if ((flags & (1 << 2)) != 0)
                {
                    ReplyMarkup = reader.Read<ReplyMarkup>();
                }

            }

            public override string ToString()
            {
                return string.Format("(InputBotInlineMessageTextType NoWebpage:{0} Message:{1} Entities:{2} ReplyMarkup:{3})", NoWebpage, Message, Entities, ReplyMarkup);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "NoWebpage": return NoWebpage;
                        case "Message": return Message;
                        case "Entities": return Entities;
                        case "ReplyMarkup": return ReplyMarkup;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "NoWebpage":
                    case "Message":
                    case "Entities":
                    case "ReplyMarkup": return true;
                    default: return false;
                }
            }
        }

        public class InputBotInlineMessageMediaGeoType : InputBotInlineMessage
        {
            public override Types ConstructorCode => Types.InputBotInlineMessageMediaGeoType;

            public InputGeoPoint GeoPoint;
            public ReplyMarkup ReplyMarkup;

            public InputBotInlineMessageMediaGeoType() { }

            /// <summary>
            /// The following arguments can be null: ReplyMarkup
            /// </summary>
            /// <param name="GeoPoint">Can NOT be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            public InputBotInlineMessageMediaGeoType(InputGeoPoint GeoPoint, ReplyMarkup ReplyMarkup)
            {
                this.GeoPoint = GeoPoint;
                this.ReplyMarkup = ReplyMarkup;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (ReplyMarkup != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                GeoPoint.Write(writer);
                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                GeoPoint = reader.Read<InputGeoPoint>();
                if ((flags & (1 << 2)) != 0)
                {
                    ReplyMarkup = reader.Read<ReplyMarkup>();
                }

            }

            public override string ToString()
            {
                return string.Format("(InputBotInlineMessageMediaGeoType GeoPoint:{0} ReplyMarkup:{1})", GeoPoint, ReplyMarkup);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "GeoPoint": return GeoPoint;
                        case "ReplyMarkup": return ReplyMarkup;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "GeoPoint":
                    case "ReplyMarkup": return true;
                    default: return false;
                }
            }
        }

        public class InputBotInlineMessageMediaVenueType : InputBotInlineMessage
        {
            public override Types ConstructorCode => Types.InputBotInlineMessageMediaVenueType;

            public InputGeoPoint GeoPoint;
            public string Title;
            public string Address;
            public string Provider;
            public string VenueId;
            public ReplyMarkup ReplyMarkup;

            public InputBotInlineMessageMediaVenueType() { }

            /// <summary>
            /// The following arguments can be null: ReplyMarkup
            /// </summary>
            /// <param name="GeoPoint">Can NOT be null</param>
            /// <param name="Title">Can NOT be null</param>
            /// <param name="Address">Can NOT be null</param>
            /// <param name="Provider">Can NOT be null</param>
            /// <param name="VenueId">Can NOT be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            public InputBotInlineMessageMediaVenueType(InputGeoPoint GeoPoint, string Title, string Address, string Provider, string VenueId, ReplyMarkup ReplyMarkup)
            {
                this.GeoPoint = GeoPoint;
                this.Title = Title;
                this.Address = Address;
                this.Provider = Provider;
                this.VenueId = VenueId;
                this.ReplyMarkup = ReplyMarkup;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (ReplyMarkup != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                GeoPoint.Write(writer);
                writer.Write(Title);
                writer.Write(Address);
                writer.Write(Provider);
                writer.Write(VenueId);
                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                GeoPoint = reader.Read<InputGeoPoint>();
                Title = reader.ReadString();
                Address = reader.ReadString();
                Provider = reader.ReadString();
                VenueId = reader.ReadString();
                if ((flags & (1 << 2)) != 0)
                {
                    ReplyMarkup = reader.Read<ReplyMarkup>();
                }

            }

            public override string ToString()
            {
                return string.Format("(InputBotInlineMessageMediaVenueType GeoPoint:{0} Title:{1} Address:{2} Provider:{3} VenueId:{4} ReplyMarkup:{5})", GeoPoint, Title, Address, Provider, VenueId, ReplyMarkup);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "GeoPoint": return GeoPoint;
                        case "Title": return Title;
                        case "Address": return Address;
                        case "Provider": return Provider;
                        case "VenueId": return VenueId;
                        case "ReplyMarkup": return ReplyMarkup;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "GeoPoint":
                    case "Title":
                    case "Address":
                    case "Provider":
                    case "VenueId":
                    case "ReplyMarkup": return true;
                    default: return false;
                }
            }
        }

        public class InputBotInlineMessageMediaContactType : InputBotInlineMessage
        {
            public override Types ConstructorCode => Types.InputBotInlineMessageMediaContactType;

            public string PhoneNumber;
            public string FirstName;
            public string LastName;
            public ReplyMarkup ReplyMarkup;

            public InputBotInlineMessageMediaContactType() { }

            /// <summary>
            /// The following arguments can be null: ReplyMarkup
            /// </summary>
            /// <param name="PhoneNumber">Can NOT be null</param>
            /// <param name="FirstName">Can NOT be null</param>
            /// <param name="LastName">Can NOT be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            public InputBotInlineMessageMediaContactType(string PhoneNumber, string FirstName, string LastName, ReplyMarkup ReplyMarkup)
            {
                this.PhoneNumber = PhoneNumber;
                this.FirstName = FirstName;
                this.LastName = LastName;
                this.ReplyMarkup = ReplyMarkup;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (ReplyMarkup != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                writer.Write(PhoneNumber);
                writer.Write(FirstName);
                writer.Write(LastName);
                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                PhoneNumber = reader.ReadString();
                FirstName = reader.ReadString();
                LastName = reader.ReadString();
                if ((flags & (1 << 2)) != 0)
                {
                    ReplyMarkup = reader.Read<ReplyMarkup>();
                }

            }

            public override string ToString()
            {
                return string.Format("(InputBotInlineMessageMediaContactType PhoneNumber:{0} FirstName:{1} LastName:{2} ReplyMarkup:{3})", PhoneNumber, FirstName, LastName, ReplyMarkup);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "PhoneNumber": return PhoneNumber;
                        case "FirstName": return FirstName;
                        case "LastName": return LastName;
                        case "ReplyMarkup": return ReplyMarkup;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "PhoneNumber":
                    case "FirstName":
                    case "LastName":
                    case "ReplyMarkup": return true;
                    default: return false;
                }
            }
        }

        public class InputBotInlineResultType : InputBotInlineResult
        {
            public override Types ConstructorCode => Types.InputBotInlineResultType;

            public string Id;
            public string Type;
            public string Title;
            public string Description;
            public string Url;
            public string ThumbUrl;
            public string ContentUrl;
            public string ContentType;
            public int? W;
            public int? H;
            public int? Duration;
            public InputBotInlineMessage SendMessage;

            public InputBotInlineResultType() { }

            /// <summary>
            /// The following arguments can be null: Title, Description, Url, ThumbUrl, ContentUrl, ContentType, W, H, Duration
            /// </summary>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="Type">Can NOT be null</param>
            /// <param name="Title">Can be null</param>
            /// <param name="Description">Can be null</param>
            /// <param name="Url">Can be null</param>
            /// <param name="ThumbUrl">Can be null</param>
            /// <param name="ContentUrl">Can be null</param>
            /// <param name="ContentType">Can be null</param>
            /// <param name="W">Can be null</param>
            /// <param name="H">Can be null</param>
            /// <param name="Duration">Can be null</param>
            /// <param name="SendMessage">Can NOT be null</param>
            public InputBotInlineResultType(string Id, string Type, string Title, string Description, string Url, string ThumbUrl, string ContentUrl, string ContentType, int? W, int? H, int? Duration, InputBotInlineMessage SendMessage)
            {
                this.Id = Id;
                this.Type = Type;
                this.Title = Title;
                this.Description = Description;
                this.Url = Url;
                this.ThumbUrl = ThumbUrl;
                this.ContentUrl = ContentUrl;
                this.ContentType = ContentType;
                this.W = W;
                this.H = H;
                this.Duration = Duration;
                this.SendMessage = SendMessage;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Title != null ? 1 << 1 : 0) |
                    (Description != null ? 1 << 2 : 0) |
                    (Url != null ? 1 << 3 : 0) |
                    (ThumbUrl != null ? 1 << 4 : 0) |
                    (ContentUrl != null ? 1 << 5 : 0) |
                    (ContentType != null ? 1 << 5 : 0) |
                    (W != null ? 1 << 6 : 0) |
                    (H != null ? 1 << 6 : 0) |
                    (Duration != null ? 1 << 7 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                writer.Write(Id);
                writer.Write(Type);
                if (Title != null)
                {
                    writer.Write(Title);
                }

                if (Description != null)
                {
                    writer.Write(Description);
                }

                if (Url != null)
                {
                    writer.Write(Url);
                }

                if (ThumbUrl != null)
                {
                    writer.Write(ThumbUrl);
                }

                if (ContentUrl != null)
                {
                    writer.Write(ContentUrl);
                }

                if (ContentType != null)
                {
                    writer.Write(ContentType);
                }

                if (W != null)
                {
                    writer.Write(W.Value);
                }

                if (H != null)
                {
                    writer.Write(H.Value);
                }

                if (Duration != null)
                {
                    writer.Write(Duration.Value);
                }

                SendMessage.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                Id = reader.ReadString();
                Type = reader.ReadString();
                if ((flags & (1 << 1)) != 0)
                {
                    Title = reader.ReadString();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    Description = reader.ReadString();
                }

                if ((flags & (1 << 3)) != 0)
                {
                    Url = reader.ReadString();
                }

                if ((flags & (1 << 4)) != 0)
                {
                    ThumbUrl = reader.ReadString();
                }

                if ((flags & (1 << 5)) != 0)
                {
                    ContentUrl = reader.ReadString();
                }

                if ((flags & (1 << 5)) != 0)
                {
                    ContentType = reader.ReadString();
                }

                if ((flags & (1 << 6)) != 0)
                {
                    W = reader.ReadInt32();
                }

                if ((flags & (1 << 6)) != 0)
                {
                    H = reader.ReadInt32();
                }

                if ((flags & (1 << 7)) != 0)
                {
                    Duration = reader.ReadInt32();
                }

                SendMessage = reader.Read<InputBotInlineMessage>();
            }

            public override string ToString()
            {
                return string.Format("(InputBotInlineResultType Id:{0} Type:{1} Title:{2} Description:{3} Url:{4} ThumbUrl:{5} ContentUrl:{6} ContentType:{7} W:{8} H:{9} Duration:{10} SendMessage:{11})", Id, Type, Title, Description, Url, ThumbUrl, ContentUrl, ContentType, W, H, Duration, SendMessage);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Type": return Type;
                        case "Title": return Title;
                        case "Description": return Description;
                        case "Url": return Url;
                        case "ThumbUrl": return ThumbUrl;
                        case "ContentUrl": return ContentUrl;
                        case "ContentType": return ContentType;
                        case "W": return W;
                        case "H": return H;
                        case "Duration": return Duration;
                        case "SendMessage": return SendMessage;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Type":
                    case "Title":
                    case "Description":
                    case "Url":
                    case "ThumbUrl":
                    case "ContentUrl":
                    case "ContentType":
                    case "W":
                    case "H":
                    case "Duration":
                    case "SendMessage": return true;
                    default: return false;
                }
            }
        }

        public class InputBotInlineResultPhotoType : InputBotInlineResult
        {
            public override Types ConstructorCode => Types.InputBotInlineResultPhotoType;

            public string Id;
            public string Type;
            public InputPhoto Photo;
            public InputBotInlineMessage SendMessage;

            public InputBotInlineResultPhotoType() { }

            public InputBotInlineResultPhotoType(string Id, string Type, InputPhoto Photo, InputBotInlineMessage SendMessage)
            {
                this.Id = Id;
                this.Type = Type;
                this.Photo = Photo;
                this.SendMessage = SendMessage;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Id);
                writer.Write(Type);
                Photo.Write(writer);
                SendMessage.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Id = reader.ReadString();
                Type = reader.ReadString();
                Photo = reader.Read<InputPhoto>();
                SendMessage = reader.Read<InputBotInlineMessage>();
            }

            public override string ToString()
            {
                return string.Format("(InputBotInlineResultPhotoType Id:{0} Type:{1} Photo:{2} SendMessage:{3})", Id, Type, Photo, SendMessage);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Type": return Type;
                        case "Photo": return Photo;
                        case "SendMessage": return SendMessage;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Type":
                    case "Photo":
                    case "SendMessage": return true;
                    default: return false;
                }
            }
        }

        public class InputBotInlineResultDocumentType : InputBotInlineResult
        {
            public override Types ConstructorCode => Types.InputBotInlineResultDocumentType;

            public string Id;
            public string Type;
            public string Title;
            public string Description;
            public InputDocument Document;
            public InputBotInlineMessage SendMessage;

            public InputBotInlineResultDocumentType() { }

            /// <summary>
            /// The following arguments can be null: Title, Description
            /// </summary>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="Type">Can NOT be null</param>
            /// <param name="Title">Can be null</param>
            /// <param name="Description">Can be null</param>
            /// <param name="Document">Can NOT be null</param>
            /// <param name="SendMessage">Can NOT be null</param>
            public InputBotInlineResultDocumentType(string Id, string Type, string Title, string Description, InputDocument Document, InputBotInlineMessage SendMessage)
            {
                this.Id = Id;
                this.Type = Type;
                this.Title = Title;
                this.Description = Description;
                this.Document = Document;
                this.SendMessage = SendMessage;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Title != null ? 1 << 1 : 0) |
                    (Description != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                writer.Write(Id);
                writer.Write(Type);
                if (Title != null)
                {
                    writer.Write(Title);
                }

                if (Description != null)
                {
                    writer.Write(Description);
                }

                Document.Write(writer);
                SendMessage.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                Id = reader.ReadString();
                Type = reader.ReadString();
                if ((flags & (1 << 1)) != 0)
                {
                    Title = reader.ReadString();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    Description = reader.ReadString();
                }

                Document = reader.Read<InputDocument>();
                SendMessage = reader.Read<InputBotInlineMessage>();
            }

            public override string ToString()
            {
                return string.Format("(InputBotInlineResultDocumentType Id:{0} Type:{1} Title:{2} Description:{3} Document:{4} SendMessage:{5})", Id, Type, Title, Description, Document, SendMessage);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Type": return Type;
                        case "Title": return Title;
                        case "Description": return Description;
                        case "Document": return Document;
                        case "SendMessage": return SendMessage;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Type":
                    case "Title":
                    case "Description":
                    case "Document":
                    case "SendMessage": return true;
                    default: return false;
                }
            }
        }

        public class BotInlineMessageMediaAutoType : BotInlineMessage
        {
            public override Types ConstructorCode => Types.BotInlineMessageMediaAutoType;

            public string Caption;
            public ReplyMarkup ReplyMarkup;

            public BotInlineMessageMediaAutoType() { }

            /// <summary>
            /// The following arguments can be null: ReplyMarkup
            /// </summary>
            /// <param name="Caption">Can NOT be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            public BotInlineMessageMediaAutoType(string Caption, ReplyMarkup ReplyMarkup)
            {
                this.Caption = Caption;
                this.ReplyMarkup = ReplyMarkup;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (ReplyMarkup != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                writer.Write(Caption);
                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                Caption = reader.ReadString();
                if ((flags & (1 << 2)) != 0)
                {
                    ReplyMarkup = reader.Read<ReplyMarkup>();
                }

            }

            public override string ToString()
            {
                return string.Format("(BotInlineMessageMediaAutoType Caption:{0} ReplyMarkup:{1})", Caption, ReplyMarkup);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Caption": return Caption;
                        case "ReplyMarkup": return ReplyMarkup;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Caption":
                    case "ReplyMarkup": return true;
                    default: return false;
                }
            }
        }

        public class BotInlineMessageTextType : BotInlineMessage
        {
            public override Types ConstructorCode => Types.BotInlineMessageTextType;

            public True NoWebpage;
            public string Message;
            public List<MessageEntity> Entities;
            public ReplyMarkup ReplyMarkup;

            public BotInlineMessageTextType() { }

            /// <summary>
            /// The following arguments can be null: NoWebpage, Entities, ReplyMarkup
            /// </summary>
            /// <param name="NoWebpage">Can be null</param>
            /// <param name="Message">Can NOT be null</param>
            /// <param name="Entities">Can be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            public BotInlineMessageTextType(True NoWebpage, string Message, List<MessageEntity> Entities, ReplyMarkup ReplyMarkup)
            {
                this.NoWebpage = NoWebpage;
                this.Message = Message;
                this.Entities = Entities;
                this.ReplyMarkup = ReplyMarkup;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (NoWebpage != null ? 1 << 0 : 0) |
                    (Entities != null ? 1 << 1 : 0) |
                    (ReplyMarkup != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (NoWebpage != null)
                {

                }

                writer.Write(Message);
                if (Entities != null)
                {
                    writer.Write(0x1cb5c415); // vector code
                    writer.Write(Entities.Count);
                    foreach (MessageEntity EntitiesElement in Entities)
                        EntitiesElement.Write(writer);
                }

                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    NoWebpage = reader.ReadTrue();
                }

                Message = reader.ReadString();
                if ((flags & (1 << 1)) != 0)
                {
                    reader.ReadInt32(); // vector code
                    int EntitiesLength = reader.ReadInt32();
                    Entities = new List<MessageEntity>(EntitiesLength);
                    for (int EntitiesIndex = 0; EntitiesIndex < EntitiesLength; EntitiesIndex++)
                        Entities.Add(reader.Read<MessageEntity>());
                }

                if ((flags & (1 << 2)) != 0)
                {
                    ReplyMarkup = reader.Read<ReplyMarkup>();
                }

            }

            public override string ToString()
            {
                return string.Format("(BotInlineMessageTextType NoWebpage:{0} Message:{1} Entities:{2} ReplyMarkup:{3})", NoWebpage, Message, Entities, ReplyMarkup);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "NoWebpage": return NoWebpage;
                        case "Message": return Message;
                        case "Entities": return Entities;
                        case "ReplyMarkup": return ReplyMarkup;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "NoWebpage":
                    case "Message":
                    case "Entities":
                    case "ReplyMarkup": return true;
                    default: return false;
                }
            }
        }

        public class BotInlineMessageMediaGeoType : BotInlineMessage
        {
            public override Types ConstructorCode => Types.BotInlineMessageMediaGeoType;

            public GeoPoint Geo;
            public ReplyMarkup ReplyMarkup;

            public BotInlineMessageMediaGeoType() { }

            /// <summary>
            /// The following arguments can be null: ReplyMarkup
            /// </summary>
            /// <param name="Geo">Can NOT be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            public BotInlineMessageMediaGeoType(GeoPoint Geo, ReplyMarkup ReplyMarkup)
            {
                this.Geo = Geo;
                this.ReplyMarkup = ReplyMarkup;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (ReplyMarkup != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                Geo.Write(writer);
                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                Geo = reader.Read<GeoPoint>();
                if ((flags & (1 << 2)) != 0)
                {
                    ReplyMarkup = reader.Read<ReplyMarkup>();
                }

            }

            public override string ToString()
            {
                return string.Format("(BotInlineMessageMediaGeoType Geo:{0} ReplyMarkup:{1})", Geo, ReplyMarkup);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Geo": return Geo;
                        case "ReplyMarkup": return ReplyMarkup;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Geo":
                    case "ReplyMarkup": return true;
                    default: return false;
                }
            }
        }

        public class BotInlineMessageMediaVenueType : BotInlineMessage
        {
            public override Types ConstructorCode => Types.BotInlineMessageMediaVenueType;

            public GeoPoint Geo;
            public string Title;
            public string Address;
            public string Provider;
            public string VenueId;
            public ReplyMarkup ReplyMarkup;

            public BotInlineMessageMediaVenueType() { }

            /// <summary>
            /// The following arguments can be null: ReplyMarkup
            /// </summary>
            /// <param name="Geo">Can NOT be null</param>
            /// <param name="Title">Can NOT be null</param>
            /// <param name="Address">Can NOT be null</param>
            /// <param name="Provider">Can NOT be null</param>
            /// <param name="VenueId">Can NOT be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            public BotInlineMessageMediaVenueType(GeoPoint Geo, string Title, string Address, string Provider, string VenueId, ReplyMarkup ReplyMarkup)
            {
                this.Geo = Geo;
                this.Title = Title;
                this.Address = Address;
                this.Provider = Provider;
                this.VenueId = VenueId;
                this.ReplyMarkup = ReplyMarkup;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (ReplyMarkup != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                Geo.Write(writer);
                writer.Write(Title);
                writer.Write(Address);
                writer.Write(Provider);
                writer.Write(VenueId);
                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                Geo = reader.Read<GeoPoint>();
                Title = reader.ReadString();
                Address = reader.ReadString();
                Provider = reader.ReadString();
                VenueId = reader.ReadString();
                if ((flags & (1 << 2)) != 0)
                {
                    ReplyMarkup = reader.Read<ReplyMarkup>();
                }

            }

            public override string ToString()
            {
                return string.Format("(BotInlineMessageMediaVenueType Geo:{0} Title:{1} Address:{2} Provider:{3} VenueId:{4} ReplyMarkup:{5})", Geo, Title, Address, Provider, VenueId, ReplyMarkup);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Geo": return Geo;
                        case "Title": return Title;
                        case "Address": return Address;
                        case "Provider": return Provider;
                        case "VenueId": return VenueId;
                        case "ReplyMarkup": return ReplyMarkup;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Geo":
                    case "Title":
                    case "Address":
                    case "Provider":
                    case "VenueId":
                    case "ReplyMarkup": return true;
                    default: return false;
                }
            }
        }

        public class BotInlineMessageMediaContactType : BotInlineMessage
        {
            public override Types ConstructorCode => Types.BotInlineMessageMediaContactType;

            public string PhoneNumber;
            public string FirstName;
            public string LastName;
            public ReplyMarkup ReplyMarkup;

            public BotInlineMessageMediaContactType() { }

            /// <summary>
            /// The following arguments can be null: ReplyMarkup
            /// </summary>
            /// <param name="PhoneNumber">Can NOT be null</param>
            /// <param name="FirstName">Can NOT be null</param>
            /// <param name="LastName">Can NOT be null</param>
            /// <param name="ReplyMarkup">Can be null</param>
            public BotInlineMessageMediaContactType(string PhoneNumber, string FirstName, string LastName, ReplyMarkup ReplyMarkup)
            {
                this.PhoneNumber = PhoneNumber;
                this.FirstName = FirstName;
                this.LastName = LastName;
                this.ReplyMarkup = ReplyMarkup;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (ReplyMarkup != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                writer.Write(PhoneNumber);
                writer.Write(FirstName);
                writer.Write(LastName);
                if (ReplyMarkup != null)
                {
                    ReplyMarkup.Write(writer);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                PhoneNumber = reader.ReadString();
                FirstName = reader.ReadString();
                LastName = reader.ReadString();
                if ((flags & (1 << 2)) != 0)
                {
                    ReplyMarkup = reader.Read<ReplyMarkup>();
                }

            }

            public override string ToString()
            {
                return string.Format("(BotInlineMessageMediaContactType PhoneNumber:{0} FirstName:{1} LastName:{2} ReplyMarkup:{3})", PhoneNumber, FirstName, LastName, ReplyMarkup);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "PhoneNumber": return PhoneNumber;
                        case "FirstName": return FirstName;
                        case "LastName": return LastName;
                        case "ReplyMarkup": return ReplyMarkup;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "PhoneNumber":
                    case "FirstName":
                    case "LastName":
                    case "ReplyMarkup": return true;
                    default: return false;
                }
            }
        }

        public class BotInlineResultType : BotInlineResult
        {
            public override Types ConstructorCode => Types.BotInlineResultType;

            public string Id;
            public string Type;
            public string Title;
            public string Description;
            public string Url;
            public string ThumbUrl;
            public string ContentUrl;
            public string ContentType;
            public int? W;
            public int? H;
            public int? Duration;
            public BotInlineMessage SendMessage;

            public BotInlineResultType() { }

            /// <summary>
            /// The following arguments can be null: Title, Description, Url, ThumbUrl, ContentUrl, ContentType, W, H, Duration
            /// </summary>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="Type">Can NOT be null</param>
            /// <param name="Title">Can be null</param>
            /// <param name="Description">Can be null</param>
            /// <param name="Url">Can be null</param>
            /// <param name="ThumbUrl">Can be null</param>
            /// <param name="ContentUrl">Can be null</param>
            /// <param name="ContentType">Can be null</param>
            /// <param name="W">Can be null</param>
            /// <param name="H">Can be null</param>
            /// <param name="Duration">Can be null</param>
            /// <param name="SendMessage">Can NOT be null</param>
            public BotInlineResultType(string Id, string Type, string Title, string Description, string Url, string ThumbUrl, string ContentUrl, string ContentType, int? W, int? H, int? Duration, BotInlineMessage SendMessage)
            {
                this.Id = Id;
                this.Type = Type;
                this.Title = Title;
                this.Description = Description;
                this.Url = Url;
                this.ThumbUrl = ThumbUrl;
                this.ContentUrl = ContentUrl;
                this.ContentType = ContentType;
                this.W = W;
                this.H = H;
                this.Duration = Duration;
                this.SendMessage = SendMessage;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Title != null ? 1 << 1 : 0) |
                    (Description != null ? 1 << 2 : 0) |
                    (Url != null ? 1 << 3 : 0) |
                    (ThumbUrl != null ? 1 << 4 : 0) |
                    (ContentUrl != null ? 1 << 5 : 0) |
                    (ContentType != null ? 1 << 5 : 0) |
                    (W != null ? 1 << 6 : 0) |
                    (H != null ? 1 << 6 : 0) |
                    (Duration != null ? 1 << 7 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                writer.Write(Id);
                writer.Write(Type);
                if (Title != null)
                {
                    writer.Write(Title);
                }

                if (Description != null)
                {
                    writer.Write(Description);
                }

                if (Url != null)
                {
                    writer.Write(Url);
                }

                if (ThumbUrl != null)
                {
                    writer.Write(ThumbUrl);
                }

                if (ContentUrl != null)
                {
                    writer.Write(ContentUrl);
                }

                if (ContentType != null)
                {
                    writer.Write(ContentType);
                }

                if (W != null)
                {
                    writer.Write(W.Value);
                }

                if (H != null)
                {
                    writer.Write(H.Value);
                }

                if (Duration != null)
                {
                    writer.Write(Duration.Value);
                }

                SendMessage.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                Id = reader.ReadString();
                Type = reader.ReadString();
                if ((flags & (1 << 1)) != 0)
                {
                    Title = reader.ReadString();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    Description = reader.ReadString();
                }

                if ((flags & (1 << 3)) != 0)
                {
                    Url = reader.ReadString();
                }

                if ((flags & (1 << 4)) != 0)
                {
                    ThumbUrl = reader.ReadString();
                }

                if ((flags & (1 << 5)) != 0)
                {
                    ContentUrl = reader.ReadString();
                }

                if ((flags & (1 << 5)) != 0)
                {
                    ContentType = reader.ReadString();
                }

                if ((flags & (1 << 6)) != 0)
                {
                    W = reader.ReadInt32();
                }

                if ((flags & (1 << 6)) != 0)
                {
                    H = reader.ReadInt32();
                }

                if ((flags & (1 << 7)) != 0)
                {
                    Duration = reader.ReadInt32();
                }

                SendMessage = reader.Read<BotInlineMessage>();
            }

            public override string ToString()
            {
                return string.Format("(BotInlineResultType Id:{0} Type:{1} Title:{2} Description:{3} Url:{4} ThumbUrl:{5} ContentUrl:{6} ContentType:{7} W:{8} H:{9} Duration:{10} SendMessage:{11})", Id, Type, Title, Description, Url, ThumbUrl, ContentUrl, ContentType, W, H, Duration, SendMessage);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Type": return Type;
                        case "Title": return Title;
                        case "Description": return Description;
                        case "Url": return Url;
                        case "ThumbUrl": return ThumbUrl;
                        case "ContentUrl": return ContentUrl;
                        case "ContentType": return ContentType;
                        case "W": return W;
                        case "H": return H;
                        case "Duration": return Duration;
                        case "SendMessage": return SendMessage;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Type":
                    case "Title":
                    case "Description":
                    case "Url":
                    case "ThumbUrl":
                    case "ContentUrl":
                    case "ContentType":
                    case "W":
                    case "H":
                    case "Duration":
                    case "SendMessage": return true;
                    default: return false;
                }
            }
        }

        public class BotInlineMediaResultType : BotInlineResult
        {
            public override Types ConstructorCode => Types.BotInlineMediaResultType;

            public string Id;
            public string Type;
            public Photo Photo;
            public Document Document;
            public string Title;
            public string Description;
            public BotInlineMessage SendMessage;

            public BotInlineMediaResultType() { }

            /// <summary>
            /// The following arguments can be null: Photo, Document, Title, Description
            /// </summary>
            /// <param name="Id">Can NOT be null</param>
            /// <param name="Type">Can NOT be null</param>
            /// <param name="Photo">Can be null</param>
            /// <param name="Document">Can be null</param>
            /// <param name="Title">Can be null</param>
            /// <param name="Description">Can be null</param>
            /// <param name="SendMessage">Can NOT be null</param>
            public BotInlineMediaResultType(string Id, string Type, Photo Photo, Document Document, string Title, string Description, BotInlineMessage SendMessage)
            {
                this.Id = Id;
                this.Type = Type;
                this.Photo = Photo;
                this.Document = Document;
                this.Title = Title;
                this.Description = Description;
                this.SendMessage = SendMessage;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Photo != null ? 1 << 0 : 0) |
                    (Document != null ? 1 << 1 : 0) |
                    (Title != null ? 1 << 2 : 0) |
                    (Description != null ? 1 << 3 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                writer.Write(Id);
                writer.Write(Type);
                if (Photo != null)
                {
                    Photo.Write(writer);
                }

                if (Document != null)
                {
                    Document.Write(writer);
                }

                if (Title != null)
                {
                    writer.Write(Title);
                }

                if (Description != null)
                {
                    writer.Write(Description);
                }

                SendMessage.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                Id = reader.ReadString();
                Type = reader.ReadString();
                if ((flags & (1 << 0)) != 0)
                {
                    Photo = reader.Read<Photo>();
                }

                if ((flags & (1 << 1)) != 0)
                {
                    Document = reader.Read<Document>();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    Title = reader.ReadString();
                }

                if ((flags & (1 << 3)) != 0)
                {
                    Description = reader.ReadString();
                }

                SendMessage = reader.Read<BotInlineMessage>();
            }

            public override string ToString()
            {
                return string.Format("(BotInlineMediaResultType Id:{0} Type:{1} Photo:{2} Document:{3} Title:{4} Description:{5} SendMessage:{6})", Id, Type, Photo, Document, Title, Description, SendMessage);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Id": return Id;
                        case "Type": return Type;
                        case "Photo": return Photo;
                        case "Document": return Document;
                        case "Title": return Title;
                        case "Description": return Description;
                        case "SendMessage": return SendMessage;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Id":
                    case "Type":
                    case "Photo":
                    case "Document":
                    case "Title":
                    case "Description":
                    case "SendMessage": return true;
                    default: return false;
                }
            }
        }

        public class MessagesBotResultsType : MessagesBotResults
        {
            public override Types ConstructorCode => Types.MessagesBotResultsType;

            public True Gallery;
            public long QueryId;
            public string NextOffset;
            public InlineBotSwitchPM SwitchPm;
            public List<BotInlineResult> Results;

            public MessagesBotResultsType() { }

            /// <summary>
            /// The following arguments can be null: Gallery, NextOffset, SwitchPm
            /// </summary>
            /// <param name="Gallery">Can be null</param>
            /// <param name="QueryId">Can NOT be null</param>
            /// <param name="NextOffset">Can be null</param>
            /// <param name="SwitchPm">Can be null</param>
            /// <param name="Results">Can NOT be null</param>
            public MessagesBotResultsType(True Gallery, long QueryId, string NextOffset, InlineBotSwitchPM SwitchPm, List<BotInlineResult> Results)
            {
                this.Gallery = Gallery;
                this.QueryId = QueryId;
                this.NextOffset = NextOffset;
                this.SwitchPm = SwitchPm;
                this.Results = Results;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Gallery != null ? 1 << 0 : 0) |
                    (NextOffset != null ? 1 << 1 : 0) |
                    (SwitchPm != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Gallery != null)
                {

                }

                writer.Write(QueryId);
                if (NextOffset != null)
                {
                    writer.Write(NextOffset);
                }

                if (SwitchPm != null)
                {
                    SwitchPm.Write(writer);
                }

                writer.Write(0x1cb5c415); // vector code
                writer.Write(Results.Count);
                foreach (BotInlineResult ResultsElement in Results)
                    ResultsElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    Gallery = reader.ReadTrue();
                }

                QueryId = reader.ReadInt64();
                if ((flags & (1 << 1)) != 0)
                {
                    NextOffset = reader.ReadString();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    SwitchPm = reader.Read<InlineBotSwitchPM>();
                }

                reader.ReadInt32(); // vector code
                int ResultsLength = reader.ReadInt32();
                Results = new List<BotInlineResult>(ResultsLength);
                for (int ResultsIndex = 0; ResultsIndex < ResultsLength; ResultsIndex++)
                    Results.Add(reader.Read<BotInlineResult>());
            }

            public override string ToString()
            {
                return string.Format("(MessagesBotResultsType Gallery:{0} QueryId:{1} NextOffset:{2} SwitchPm:{3} Results:{4})", Gallery, QueryId, NextOffset, SwitchPm, Results);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Gallery": return Gallery;
                        case "QueryId": return QueryId;
                        case "NextOffset": return NextOffset;
                        case "SwitchPm": return SwitchPm;
                        case "Results": return Results;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Gallery":
                    case "QueryId":
                    case "NextOffset":
                    case "SwitchPm":
                    case "Results": return true;
                    default: return false;
                }
            }
        }

        public class ExportedMessageLinkType : ExportedMessageLink
        {
            public override Types ConstructorCode => Types.ExportedMessageLinkType;

            public string Link;

            public ExportedMessageLinkType() { }

            public ExportedMessageLinkType(string Link)
            {
                this.Link = Link;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Link);
            }

            public override void Read(TBinaryReader reader)
            {
                Link = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(ExportedMessageLinkType Link:{0})", Link);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Link": return Link;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Link": return true;
                    default: return false;
                }
            }
        }

        public class MessageFwdHeaderType : MessageFwdHeader
        {
            public override Types ConstructorCode => Types.MessageFwdHeaderType;

            public int? FromId;
            public int Date;
            public int? ChannelId;
            public int? ChannelPost;

            public MessageFwdHeaderType() { }

            /// <summary>
            /// The following arguments can be null: FromId, ChannelId, ChannelPost
            /// </summary>
            /// <param name="FromId">Can be null</param>
            /// <param name="Date">Can NOT be null</param>
            /// <param name="ChannelId">Can be null</param>
            /// <param name="ChannelPost">Can be null</param>
            public MessageFwdHeaderType(int? FromId, int Date, int? ChannelId, int? ChannelPost)
            {
                this.FromId = FromId;
                this.Date = Date;
                this.ChannelId = ChannelId;
                this.ChannelPost = ChannelPost;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (FromId != null ? 1 << 0 : 0) |
                    (ChannelId != null ? 1 << 1 : 0) |
                    (ChannelPost != null ? 1 << 2 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (FromId != null)
                {
                    writer.Write(FromId.Value);
                }

                writer.Write(Date);
                if (ChannelId != null)
                {
                    writer.Write(ChannelId.Value);
                }

                if (ChannelPost != null)
                {
                    writer.Write(ChannelPost.Value);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    FromId = reader.ReadInt32();
                }

                Date = reader.ReadInt32();
                if ((flags & (1 << 1)) != 0)
                {
                    ChannelId = reader.ReadInt32();
                }

                if ((flags & (1 << 2)) != 0)
                {
                    ChannelPost = reader.ReadInt32();
                }

            }

            public override string ToString()
            {
                return string.Format("(MessageFwdHeaderType FromId:{0} Date:{1} ChannelId:{2} ChannelPost:{3})", FromId, Date, ChannelId, ChannelPost);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "FromId": return FromId;
                        case "Date": return Date;
                        case "ChannelId": return ChannelId;
                        case "ChannelPost": return ChannelPost;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "FromId":
                    case "Date":
                    case "ChannelId":
                    case "ChannelPost": return true;
                    default: return false;
                }
            }
        }

        public class AuthCodeTypeSmsType : AuthCodeType
        {
            public override Types ConstructorCode => Types.AuthCodeTypeSmsType;

            public AuthCodeTypeSmsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(AuthCodeTypeSmsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class AuthCodeTypeCallType : AuthCodeType
        {
            public override Types ConstructorCode => Types.AuthCodeTypeCallType;

            public AuthCodeTypeCallType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(AuthCodeTypeCallType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class AuthCodeTypeFlashCallType : AuthCodeType
        {
            public override Types ConstructorCode => Types.AuthCodeTypeFlashCallType;

            public AuthCodeTypeFlashCallType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(AuthCodeTypeFlashCallType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class AuthSentCodeTypeAppType : AuthSentCodeType
        {
            public override Types ConstructorCode => Types.AuthSentCodeTypeAppType;

            public int Length;

            public AuthSentCodeTypeAppType() { }

            public AuthSentCodeTypeAppType(int Length)
            {
                this.Length = Length;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Length);
            }

            public override void Read(TBinaryReader reader)
            {
                Length = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(AuthSentCodeTypeAppType Length:{0})", Length);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Length": return Length;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Length": return true;
                    default: return false;
                }
            }
        }

        public class AuthSentCodeTypeSmsType : AuthSentCodeType
        {
            public override Types ConstructorCode => Types.AuthSentCodeTypeSmsType;

            public int Length;

            public AuthSentCodeTypeSmsType() { }

            public AuthSentCodeTypeSmsType(int Length)
            {
                this.Length = Length;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Length);
            }

            public override void Read(TBinaryReader reader)
            {
                Length = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(AuthSentCodeTypeSmsType Length:{0})", Length);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Length": return Length;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Length": return true;
                    default: return false;
                }
            }
        }

        public class AuthSentCodeTypeCallType : AuthSentCodeType
        {
            public override Types ConstructorCode => Types.AuthSentCodeTypeCallType;

            public int Length;

            public AuthSentCodeTypeCallType() { }

            public AuthSentCodeTypeCallType(int Length)
            {
                this.Length = Length;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Length);
            }

            public override void Read(TBinaryReader reader)
            {
                Length = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(AuthSentCodeTypeCallType Length:{0})", Length);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Length": return Length;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Length": return true;
                    default: return false;
                }
            }
        }

        public class AuthSentCodeTypeFlashCallType : AuthSentCodeType
        {
            public override Types ConstructorCode => Types.AuthSentCodeTypeFlashCallType;

            public string Pattern;

            public AuthSentCodeTypeFlashCallType() { }

            public AuthSentCodeTypeFlashCallType(string Pattern)
            {
                this.Pattern = Pattern;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Pattern);
            }

            public override void Read(TBinaryReader reader)
            {
                Pattern = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(AuthSentCodeTypeFlashCallType Pattern:{0})", Pattern);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Pattern": return Pattern;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Pattern": return true;
                    default: return false;
                }
            }
        }

        public class MessagesBotCallbackAnswerType : MessagesBotCallbackAnswer
        {
            public override Types ConstructorCode => Types.MessagesBotCallbackAnswerType;

            public True Alert;
            public string Message;

            public MessagesBotCallbackAnswerType() { }

            /// <summary>
            /// The following arguments can be null: Alert, Message
            /// </summary>
            /// <param name="Alert">Can be null</param>
            /// <param name="Message">Can be null</param>
            public MessagesBotCallbackAnswerType(True Alert, string Message)
            {
                this.Alert = Alert;
                this.Message = Message;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Alert != null ? 1 << 1 : 0) |
                    (Message != null ? 1 << 0 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Alert != null)
                {

                }

                if (Message != null)
                {
                    writer.Write(Message);
                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 1)) != 0)
                {
                    Alert = reader.ReadTrue();
                }

                if ((flags & (1 << 0)) != 0)
                {
                    Message = reader.ReadString();
                }

            }

            public override string ToString()
            {
                return string.Format("(MessagesBotCallbackAnswerType Alert:{0} Message:{1})", Alert, Message);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Alert": return Alert;
                        case "Message": return Message;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Alert":
                    case "Message": return true;
                    default: return false;
                }
            }
        }

        public class MessagesMessageEditDataType : MessagesMessageEditData
        {
            public override Types ConstructorCode => Types.MessagesMessageEditDataType;

            public True Caption;

            public MessagesMessageEditDataType() { }

            /// <summary>
            /// The following arguments can be null: Caption
            /// </summary>
            /// <param name="Caption">Can be null</param>
            public MessagesMessageEditDataType(True Caption)
            {
                this.Caption = Caption;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (Caption != null ? 1 << 0 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (Caption != null)
                {

                }

            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 0)) != 0)
                {
                    Caption = reader.ReadTrue();
                }

            }

            public override string ToString()
            {
                return string.Format("(MessagesMessageEditDataType Caption:{0})", Caption);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Caption": return Caption;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Caption": return true;
                    default: return false;
                }
            }
        }

        public class InputBotInlineMessageIDType : InputBotInlineMessageID
        {
            public override Types ConstructorCode => Types.InputBotInlineMessageIDType;

            public int DcId;
            public long Id;
            public long AccessHash;

            public InputBotInlineMessageIDType() { }

            public InputBotInlineMessageIDType(int DcId, long Id, long AccessHash)
            {
                this.DcId = DcId;
                this.Id = Id;
                this.AccessHash = AccessHash;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(DcId);
                writer.Write(Id);
                writer.Write(AccessHash);
            }

            public override void Read(TBinaryReader reader)
            {
                DcId = reader.ReadInt32();
                Id = reader.ReadInt64();
                AccessHash = reader.ReadInt64();
            }

            public override string ToString()
            {
                return string.Format("(InputBotInlineMessageIDType DcId:{0} Id:{1} AccessHash:{2})", DcId, Id, AccessHash);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "DcId": return DcId;
                        case "Id": return Id;
                        case "AccessHash": return AccessHash;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "DcId":
                    case "Id":
                    case "AccessHash": return true;
                    default: return false;
                }
            }
        }

        public class InlineBotSwitchPMType : InlineBotSwitchPM
        {
            public override Types ConstructorCode => Types.InlineBotSwitchPMType;

            public string Text;
            public string StartParam;

            public InlineBotSwitchPMType() { }

            public InlineBotSwitchPMType(string Text, string StartParam)
            {
                this.Text = Text;
                this.StartParam = StartParam;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(Text);
                writer.Write(StartParam);
            }

            public override void Read(TBinaryReader reader)
            {
                Text = reader.ReadString();
                StartParam = reader.ReadString();
            }

            public override string ToString()
            {
                return string.Format("(InlineBotSwitchPMType Text:{0} StartParam:{1})", Text, StartParam);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Text": return Text;
                        case "StartParam": return StartParam;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Text":
                    case "StartParam": return true;
                    default: return false;
                }
            }
        }

        public class MessagesPeerDialogsType : MessagesPeerDialogs
        {
            public override Types ConstructorCode => Types.MessagesPeerDialogsType;

            public List<Dialog> Dialogs;
            public List<Message> Messages;
            public List<Chat> Chats;
            public List<User> Users;
            public UpdatesState State;

            public MessagesPeerDialogsType() { }

            public MessagesPeerDialogsType(List<Dialog> Dialogs, List<Message> Messages, List<Chat> Chats, List<User> Users, UpdatesState State)
            {
                this.Dialogs = Dialogs;
                this.Messages = Messages;
                this.Chats = Chats;
                this.Users = Users;
                this.State = State;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Dialogs.Count);
                foreach (Dialog DialogsElement in Dialogs)
                    DialogsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Messages.Count);
                foreach (Message MessagesElement in Messages)
                    MessagesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
                State.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int DialogsLength = reader.ReadInt32();
                Dialogs = new List<Dialog>(DialogsLength);
                for (int DialogsIndex = 0; DialogsIndex < DialogsLength; DialogsIndex++)
                    Dialogs.Add(reader.Read<Dialog>());
                reader.ReadInt32(); // vector code
                int MessagesLength = reader.ReadInt32();
                Messages = new List<Message>(MessagesLength);
                for (int MessagesIndex = 0; MessagesIndex < MessagesLength; MessagesIndex++)
                    Messages.Add(reader.Read<Message>());
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
                State = reader.Read<UpdatesState>();
            }

            public override string ToString()
            {
                return string.Format("(MessagesPeerDialogsType Dialogs:{0} Messages:{1} Chats:{2} Users:{3} State:{4})", Dialogs, Messages, Chats, Users, State);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Dialogs": return Dialogs;
                        case "Messages": return Messages;
                        case "Chats": return Chats;
                        case "Users": return Users;
                        case "State": return State;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Dialogs":
                    case "Messages":
                    case "Chats":
                    case "Users":
                    case "State": return true;
                    default: return false;
                }
            }
        }

        public class TopPeerType : TopPeer
        {
            public override Types ConstructorCode => Types.TopPeerType;

            public Peer Peer;
            public double Rating;

            public TopPeerType() { }

            public TopPeerType(Peer Peer, double Rating)
            {
                this.Peer = Peer;
                this.Rating = Rating;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Peer.Write(writer);
                writer.Write(Rating);
            }

            public override void Read(TBinaryReader reader)
            {
                Peer = reader.Read<Peer>();
                Rating = reader.ReadDouble();
            }

            public override string ToString()
            {
                return string.Format("(TopPeerType Peer:{0} Rating:{1})", Peer, Rating);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Peer": return Peer;
                        case "Rating": return Rating;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Peer":
                    case "Rating": return true;
                    default: return false;
                }
            }
        }

        public class TopPeerCategoryBotsPMType : TopPeerCategory
        {
            public override Types ConstructorCode => Types.TopPeerCategoryBotsPMType;

            public TopPeerCategoryBotsPMType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(TopPeerCategoryBotsPMType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class TopPeerCategoryBotsInlineType : TopPeerCategory
        {
            public override Types ConstructorCode => Types.TopPeerCategoryBotsInlineType;

            public TopPeerCategoryBotsInlineType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(TopPeerCategoryBotsInlineType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class TopPeerCategoryCorrespondentsType : TopPeerCategory
        {
            public override Types ConstructorCode => Types.TopPeerCategoryCorrespondentsType;

            public TopPeerCategoryCorrespondentsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(TopPeerCategoryCorrespondentsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class TopPeerCategoryGroupsType : TopPeerCategory
        {
            public override Types ConstructorCode => Types.TopPeerCategoryGroupsType;

            public TopPeerCategoryGroupsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(TopPeerCategoryGroupsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class TopPeerCategoryChannelsType : TopPeerCategory
        {
            public override Types ConstructorCode => Types.TopPeerCategoryChannelsType;

            public TopPeerCategoryChannelsType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(TopPeerCategoryChannelsType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class TopPeerCategoryPeersType : TopPeerCategoryPeers
        {
            public override Types ConstructorCode => Types.TopPeerCategoryPeersType;

            public TopPeerCategory Category;
            public int Count;
            public List<TopPeer> Peers;

            public TopPeerCategoryPeersType() { }

            public TopPeerCategoryPeersType(TopPeerCategory Category, int Count, List<TopPeer> Peers)
            {
                this.Category = Category;
                this.Count = Count;
                this.Peers = Peers;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                Category.Write(writer);
                writer.Write(Count);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Peers.Count);
                foreach (TopPeer PeersElement in Peers)
                    PeersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                Category = reader.Read<TopPeerCategory>();
                Count = reader.ReadInt32();
                reader.ReadInt32(); // vector code
                int PeersLength = reader.ReadInt32();
                Peers = new List<TopPeer>(PeersLength);
                for (int PeersIndex = 0; PeersIndex < PeersLength; PeersIndex++)
                    Peers.Add(reader.Read<TopPeer>());
            }

            public override string ToString()
            {
                return string.Format("(TopPeerCategoryPeersType Category:{0} Count:{1} Peers:{2})", Category, Count, Peers);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Category": return Category;
                        case "Count": return Count;
                        case "Peers": return Peers;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Category":
                    case "Count":
                    case "Peers": return true;
                    default: return false;
                }
            }
        }

        public class ContactsTopPeersNotModifiedType : ContactsTopPeers
        {
            public override Types ConstructorCode => Types.ContactsTopPeersNotModifiedType;

            public ContactsTopPeersNotModifiedType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(ContactsTopPeersNotModifiedType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class ContactsTopPeersType : ContactsTopPeers
        {
            public override Types ConstructorCode => Types.ContactsTopPeersType;

            public List<TopPeerCategoryPeers> Categories;
            public List<Chat> Chats;
            public List<User> Users;

            public ContactsTopPeersType() { }

            public ContactsTopPeersType(List<TopPeerCategoryPeers> Categories, List<Chat> Chats, List<User> Users)
            {
                this.Categories = Categories;
                this.Chats = Chats;
                this.Users = Users;
            }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Categories.Count);
                foreach (TopPeerCategoryPeers CategoriesElement in Categories)
                    CategoriesElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Chats.Count);
                foreach (Chat ChatsElement in Chats)
                    ChatsElement.Write(writer);
                writer.Write(0x1cb5c415); // vector code
                writer.Write(Users.Count);
                foreach (User UsersElement in Users)
                    UsersElement.Write(writer);
            }

            public override void Read(TBinaryReader reader)
            {
                reader.ReadInt32(); // vector code
                int CategoriesLength = reader.ReadInt32();
                Categories = new List<TopPeerCategoryPeers>(CategoriesLength);
                for (int CategoriesIndex = 0; CategoriesIndex < CategoriesLength; CategoriesIndex++)
                    Categories.Add(reader.Read<TopPeerCategoryPeers>());
                reader.ReadInt32(); // vector code
                int ChatsLength = reader.ReadInt32();
                Chats = new List<Chat>(ChatsLength);
                for (int ChatsIndex = 0; ChatsIndex < ChatsLength; ChatsIndex++)
                    Chats.Add(reader.Read<Chat>());
                reader.ReadInt32(); // vector code
                int UsersLength = reader.ReadInt32();
                Users = new List<User>(UsersLength);
                for (int UsersIndex = 0; UsersIndex < UsersLength; UsersIndex++)
                    Users.Add(reader.Read<User>());
            }

            public override string ToString()
            {
                return string.Format("(ContactsTopPeersType Categories:{0} Chats:{1} Users:{2})", Categories, Chats, Users);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "Categories": return Categories;
                        case "Chats": return Chats;
                        case "Users": return Users;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "Categories":
                    case "Chats":
                    case "Users": return true;
                    default: return false;
                }
            }
        }

        public class DraftMessageEmptyType : DraftMessage
        {
            public override Types ConstructorCode => Types.DraftMessageEmptyType;

            public DraftMessageEmptyType() { }

            public override void Write(TBinaryWriter writer)
            {
                writer.Write((uint)ConstructorCode);
            }

            public override void Read(TBinaryReader reader)
            {
            }

            public override string ToString()
            {
                return "(DraftMessageEmptyType)";
            }

            public override object this[string name]
            { get { throw new InvalidOperationException("This type has no properties"); } }

            public override bool HasKey(string name) => false;
        }

        public class DraftMessageType : DraftMessage
        {
            public override Types ConstructorCode => Types.DraftMessageType;

            public True NoWebpage;
            public int? ReplyToMsgId;
            public string Message;
            public List<MessageEntity> Entities;
            public int Date;

            public DraftMessageType() { }

            /// <summary>
            /// The following arguments can be null: NoWebpage, ReplyToMsgId, Entities
            /// </summary>
            /// <param name="NoWebpage">Can be null</param>
            /// <param name="ReplyToMsgId">Can be null</param>
            /// <param name="Message">Can NOT be null</param>
            /// <param name="Entities">Can be null</param>
            /// <param name="Date">Can NOT be null</param>
            public DraftMessageType(True NoWebpage, int? ReplyToMsgId, string Message, List<MessageEntity> Entities, int Date)
            {
                this.NoWebpage = NoWebpage;
                this.ReplyToMsgId = ReplyToMsgId;
                this.Message = Message;
                this.Entities = Entities;
                this.Date = Date;
            }

            public override void Write(TBinaryWriter writer)
            {
                int flags =
                    (NoWebpage != null ? 1 << 1 : 0) |
                    (ReplyToMsgId != null ? 1 << 0 : 0) |
                    (Entities != null ? 1 << 3 : 0);

                writer.Write((uint)ConstructorCode);
                writer.Write(flags);

                if (NoWebpage != null)
                {

                }

                if (ReplyToMsgId != null)
                {
                    writer.Write(ReplyToMsgId.Value);
                }

                writer.Write(Message);
                if (Entities != null)
                {
                    writer.Write(0x1cb5c415); // vector code
                    writer.Write(Entities.Count);
                    foreach (MessageEntity EntitiesElement in Entities)
                        EntitiesElement.Write(writer);
                }

                writer.Write(Date);
            }

            public override void Read(TBinaryReader reader)
            {
                int flags = reader.ReadInt32();
                if ((flags & (1 << 1)) != 0)
                {
                    NoWebpage = reader.ReadTrue();
                }

                if ((flags & (1 << 0)) != 0)
                {
                    ReplyToMsgId = reader.ReadInt32();
                }

                Message = reader.ReadString();
                if ((flags & (1 << 3)) != 0)
                {
                    reader.ReadInt32(); // vector code
                    int EntitiesLength = reader.ReadInt32();
                    Entities = new List<MessageEntity>(EntitiesLength);
                    for (int EntitiesIndex = 0; EntitiesIndex < EntitiesLength; EntitiesIndex++)
                        Entities.Add(reader.Read<MessageEntity>());
                }

                Date = reader.ReadInt32();
            }

            public override string ToString()
            {
                return string.Format("(DraftMessageType NoWebpage:{0} ReplyToMsgId:{1} Message:{2} Entities:{3} Date:{4})", NoWebpage, ReplyToMsgId, Message, Entities, Date);
            }

            public override object this[string name]
            {
                get
                {
                    switch (name)
                    {
                        case "NoWebpage": return NoWebpage;
                        case "ReplyToMsgId": return ReplyToMsgId;
                        case "Message": return Message;
                        case "Entities": return Entities;
                        case "Date": return Date;
                        default: throw new KeyNotFoundException();
                    }
                }
            }

            public override bool HasKey(string name)
            {
                switch (name)
                {
                    case "NoWebpage":
                    case "ReplyToMsgId":
                    case "Message":
                    case "Entities":
                    case "Date": return true;
                    default: return false;
                }
            }
        }

        #endregion
    }
}
